<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cenium.Framework.Component</name>
    </assembly>
    <members>
        <member name="T:Cenium.Framework.Component.AppServices.AccommodationService">
            <summary>
            Defines methods related to accommodations
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.AccommodationService.#ctor">
            <summary>
            Initializes a new instance of the AccommodationService class
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.AccommodationService.GetFURAlgorithmByProperty(System.Int64)">
            <summary>
            Gets the fur algorithm associated with a specified property context
            </summary>
            <param name="propertyContextId">The property context identifier.</param>
            <returns>The <c>FURAlgorithm</c> instance associated with the specified property, or null if the property does not exist.</returns>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.AccommodationService.RequestFURRefresh(System.Int64,System.Guid)">
            <summary>
            Invoke this method to request a refresh of the fair-use rotation data.
            </summary>
            <remarks>
            Invoking this method will trigger a refresh of the fair-use rotation data, which in term determines the sort order of accommodations.
            Note that the data will only be refreshed if the property is using the specified algorithm, otherwise the method will exit without errors or warnings.
            </remarks>
            <param name="propertyContextId">The property context identifier the request is for</param>
            <param name="algorithm">The algorithm this request is for</param>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.AccommodationService.Search(Cenium.Framework.Component.AppServices.Common.AccommodationSearch)">
            <summary>
            Performs an accommodation search. The results are sorted by rank, them by sort order as determined by the current FUR algorithm.
            </summary>
            <param name="parameters">The parameters to apply to the search.</param>
            <returns>The result of the search.</returns>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.AccommodationService.IsStatusSupported(Cenium.Framework.Component.AppServices.Common.AccommodationStatus)">
            <summary>
            Determines whether an accommodation status is supported for the current version
            </summary>
            <param name="status">The status to check for</param>
            <returns><c>true</c> if the <c>AccommodationStatus</c> is supported; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.AccommodationService.IsCapabilityEnabled(Cenium.Framework.Component.AppServices.Common.AccommodationServiceCapability)">
            <summary>
            Checks if a specified capability is implemented by the service provider
            </summary>
            <param name="capability">The capability to check for</param>
            <returns><c>true</c> if the specified capability is enabled; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.AccommodationService.GetFeatures">
            <summary>
            Gets all available features
            </summary>
            <remarks>
            This is an optional method, you can check if the method is supported with the IsCapabilityEnabled method.
            The method will return null if the method is not implemented by the service provider.
            </remarks>
            <returns>A read-only collection of <c>FeatureInfo</c> instances.</returns>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.AccommodationService.RegisterFURAlgorithm(Cenium.Framework.Component.AppServices.Common.FURAlgorithm)">
            <summary>
            Registers a fair-use rotation algorithm.
            </summary>
            <param name="algorithm">The algorithm to register</param>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.AccommodationService.FURAlgorithms">
            <summary>
            Gets a read-only collection of all registered fair-use rotation algorithms.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.AccommodationService.GetFURAlgorithmByIdentity(System.Guid)">
            <summary>
            Gets a registered fair-use rotation algorithm by its identity
            </summary>
            <param name="identity">The identity of the algorithm</param>
            <returns>A <c>FURAlgorithm</c> instance if one was found; otherwise null.</returns>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.AppServiceLanguageConstants">
            <summary>
            Contains language constants for all app services
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.AppServiceManager">
            <summary>
            Provides access to basic application services
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.AppServiceManager.IsErpServicesAvailable">
            <summary>
            Gets a value indicating whether the ERP application service is available
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.AppServiceManager.IsCurrencyServicesAvailable">
            <summary>
            Gets a value indicating whether the currency application service is available
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.AppServiceManager.IsNightAuditServicesAvailable">
            <summary>
            Gets a value indicating whether the night audit application service is available
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.AppServiceManager.IsTaskEngineServicesAvailable">
            <summary>
            Gets a value indicating whether the task engine application service is available
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.AppServiceManager.IsNotificationServicesAvailable">
            <summary>
            Gets a value indicating whether the notification application service is available
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.AppServiceManager.IsPropertyContextServicesAvailable">
            <summary>
            Gets a value indicating whether the property context application service is available
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.AppServiceManager.IsCertificateServicesAvailable">
            <summary>
            Gets a value indicating whether the certificate service is available.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.AppServiceManager.IsDocumentServicesAvailable">
            <summary>
            Gets a value indicating whether the documents service is available.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.AppServiceManager.IsAccommodationServicesAvailable">
            <summary>
            Gets a value indicating whether the accommodation service is available.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.AppServiceManager.IsAttachedLinkServicesAvailable">
            <summary>
            Gets a value indicating whether the attached link service is available.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.AppServiceManager.IsStatisticsServiceAvailable">
            <summary>
            Gets a value indicating whether the statistics service is available
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.AppServiceManager.IsAttachedNoteServicesAvailable">
            <summary>
            Gets a value indicating whether the attached notes service is available
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.AppServiceManager.IsRoomAllocationServicesAvailable">
            <summary>
            Gets a value indicating whether the room allocation service is available
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.AppServiceManager.ErpService">
            <summary>
            Gets the ERP application service.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.AppServiceManager.CurrencyService">
            <summary>
            Gets the Currency application service
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.AppServiceManager.NightAuditService">
            <summary>
            Gets the Night audit application service
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.AppServiceManager.TaskEngineService">
            <summary>
            Gets the Task engine application service
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.AppServiceManager.NotificationService">
            <summary>
            Gets the notification service.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.AppServiceManager.CertificateService">
            <summary>
            Gets the certificate service.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.AppServiceManager.PropertyContextService">
            <summary>
            Gets the property context service.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.AppServiceManager.ObjectPublishingService">
            <summary>
            Gets the object publish service.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.AppServiceManager.DocumentService">
            <summary>
            Gets the document service.
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.AppServiceProviderAttribute">
            <summary>
            Marks a class as an application service provider
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.AppServiceProviderAttribute.#ctor">
            <summary>
            Initializes a new instance of the AppServiceProviderAttribute class
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.AttachedLinkService">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.AttachedLinkService.OnCreateLinkCopyToHandler">
            <summary>
            Method delegate that is executed whenever a link is created for a specific entity.
            Returns a list of entity key references to which the link should be copied to.
            </summary>
            <param name="entitySourceRef">The entity which the link was created on</param>
            <returns>List of entity key references that the link should be copied to</returns>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.AttachedLinkService.#ctor">
            <summary>
            Initializes a new instance of the AttachedLinkService class
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.AttachedLinkService.RegisterLinkTemplateEntity(System.String,System.String,System.String)">
            <summary>
            Registers a link template entity
            </summary>
            <param name="entityTypeName">Name of the entity type</param>
            <param name="entityTypeDisplayName">Display name of the entity type</param>
            <param name="entityPropertyName">Property name in the entity, that is used as the target file name when template is used</param>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.AttachedLinkService.RegisterOnCreateLinkCopyToHandler(System.Type,Cenium.Framework.Component.AppServices.AttachedLinkService.OnCreateLinkCopyToHandler)">
            <summary>
            Registers handler methods that are executed when a link is created for registered entities.
            </summary>
            <param name="entityType">Type of entity to register handler to</param>
            <param name="handler">Method handler delegate</param>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.AttachedLinkService.CopyLinks(Cenium.Framework.Data.EntityKeyReference,Cenium.Framework.Data.EntityKeyReference)">
            <summary>
            Copies links from one entity instance to another.
            </summary>
            <param name="copyFrom">The entity instance to copy from</param>
            <param name="copyTo">The entity instance to copy to</param>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.AttachedLinkService.CopyLinksToMultiple(Cenium.Framework.Data.EntityKeyReference,System.Collections.Generic.List{Cenium.Framework.Data.EntityKeyReference})">
            <summary>
            Copies links from one entity instance to multiple destination entities.
            </summary>
            <param name="copyFrom">The entity instance to copy from</param>
            <param name="copyTo">The list of entity instances to copy to</param>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.AttachedLinkService.OnCreateAttachedLink(System.Int64)">
            <summary>
            Executed when a new attached link has been created.
            </summary>
            <param name="attachedLinkId">The key of the attached link</param>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.AttachedLinkService.GetLinkTemplateEntities">
            <summary>
            Gets information about all registered link template entities.
            </summary>
            <returns>An <c>IEnumerable</c> of <c>ILinkTemplateEntity</c> instances</returns>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.AttachedLinks.LinkTemplateEntity">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.AttachedNoteService">
            <summary>
            Represents a service for handling attached notes
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.AttachedNoteService.#ctor">
            <summary>
            Initializes a new instance of the AttachedNoteService class
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.AttachedNoteService.CopyCore(System.Collections.Generic.IEnumerable{Cenium.Framework.Data.EntityKeyCopyReference},Cenium.Framework.Component.AppServices.AttachedNotes.NotesCopyOptions)">
            <summary>
            Performs the copy operation for notes
            </summary>
            <param name="copyRefs">An enumerable of copy references.</param>
            <param name="options">The options used when performing the copy operation</param>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.AttachedNoteService.AddNotesCore(System.Collections.Generic.IEnumerable{Cenium.Framework.Component.AppServices.AttachedNotes.Note})">
            <summary>
            Adds notes to the underlying storage.
            </summary>
            <param name="notes">The notes to add.</param>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.AttachedNoteService.RemoveNotesCore(System.Collections.Generic.IEnumerable{Cenium.Framework.Data.EntityKeyCopyReference})">
            <summary>
            Remove notes from the underlying storage.
            </summary>
            <param name="remoeRefs">The notes to remove.</param>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.AttachedNoteService.CreateNoteCore(Cenium.Framework.Data.EntityKeyReference)">
            <summary>
            Creates a new <c>Note</c> instance.
            </summary>
            <param name="owner">The entity reference to the owner of the note.</param>
            <returns>A new <c>Note</c> instance.</returns>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.AttachedNoteService.Copy(Cenium.Framework.Data.EntityKeyReference,Cenium.Framework.Data.EntityKeyReference,Cenium.Framework.Component.AppServices.AttachedNotes.NotesCopyOptions)">
            <summary>
            Copies notes from a source to a target entity key reference
            </summary>
            <param name="source">The source reference to copy from.</param>
            <param name="target">The target reference to copy to.</param>
            <param name="options">The copy operation options to use.</param>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.AttachedNoteService.Copy(Cenium.Framework.Data.EntityKeyCopyReference,Cenium.Framework.Component.AppServices.AttachedNotes.NotesCopyOptions)">
            <summary>
            Copies notes from a source to a target entity key reference
            </summary>
            <param name="copyRef">An <c>EntityKeyCopyReference</c> instance containing the copy references</param>
            <param name="options">The copy operation options to use.</param>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.AttachedNoteService.Copy(System.Collections.Generic.IEnumerable{Cenium.Framework.Data.EntityKeyCopyReference},Cenium.Framework.Component.AppServices.AttachedNotes.NotesCopyOptions)">
            <summary>
            Copies notes for multiple sources and targets
            </summary>
            <param name="copyRefs">An <c>IEnumerable</c> of <c>EntityKeyCopyReference</c> instances containing the copy references</param>
            <param name="options">The copy operation options to use.</param>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.AttachedNoteService.AddNote(Cenium.Framework.Component.AppServices.AttachedNotes.Note)">
            <summary>
            Adds a single note
            </summary>
            <param name="note">The note to add</param>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.AttachedNoteService.AddNotes(System.Collections.Generic.IEnumerable{Cenium.Framework.Component.AppServices.AttachedNotes.Note})">
            <summary>
            Adds multiple notes
            </summary>
            <param name="notes">The notes to add.</param>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.AttachedNoteService.Remove(System.Collections.Generic.IEnumerable{Cenium.Framework.Data.EntityKeyCopyReference})">
            <summary>
            Performs the remove operation for notes
            </summary>
            <param name="removeRefs">An enumerable of remove references.</param>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.AttachedNotes.Note">
            <summary>
            Represents a note or comment
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.AttachedNotes.Note.#ctor">
            <summary>
            Initializes a new instance of the Note class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.AttachedNotes.Note.OwnerReference">
            <summary>
            Gets a reference to the entity that owns the note.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.AttachedNotes.Note.NoteTypeId">
            <summary>
            Gets or sets the note type
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.AttachedNotes.Note.Text">
            <summary>
            Gets or sets the note text
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.AttachedNotes.Note.Options">
            <summary>
            Gets or sets the options.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.AttachedNotes.Note.ValidFrom">
            <summary>
            Gets or sets the valid from date.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.AttachedNotes.Note.ValidTo">
            <summary>
            Gets or sets the valid to date.
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.AttachedNotes.NoteOptions">
            <summary>
            Explain the purpose of the enumeration here
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.AttachedNotes.NotesCopyOptions">
            <summary>
            Defines options for copying attached notes
            </summary>
        </member>
        <member name="F:Cenium.Framework.Component.AppServices.AttachedNotes.NotesCopyOptions.None">
            <summary>
            No copy options have been set
            </summary>
        </member>
        <member name="F:Cenium.Framework.Component.AppServices.AttachedNotes.NotesCopyOptions.IncludePrivateNotes">
            <summary>
            Include private notes in the copy operation
            </summary>
        </member>
        <member name="F:Cenium.Framework.Component.AppServices.AttachedNotes.NotesCopyOptions.IncludeExpiredNotes">
            <summary>
            Include expired notes in the copy operation
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.CertificateService">
            <summary>
            Base class for the certificate service
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.CertificateService.#ctor">
            <summary>
            Initializes a new instance of the CertificateService class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.CertificateService.CertificateTypes">
            <summary>
            Gets a read-only collection containing all the registered certificate types
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.CertificateService.UserCertificateTypes">
            <summary>
            Gets a read-only collection containing all non-system certificate types
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.CertificateService.GetCertificateTypeInfo(System.Guid)">
            <summary>
            Gets the certificate information associated with the specified identity.
            </summary>
            <param name="identity">The identity associated with the certificate type</param>
            <returns>A <c>CertificateTypeInfo</c> instance associated with the specified identity, or null if the identity is not in use</returns>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.CertificateService.GetSystemCertificate(Cenium.Framework.Component.AppServices.Certificates.CertificateTypeInfo)">
            <summary>
            Gets the system certificate associated with the specified certificate type
            </summary>
            <param name="info">The certificate type to retrieve the certificate for</param>
            <returns>The <c>CertificateData</c> instance associated with the certificate type</returns>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.CertificateService.GetUserCertificates(System.Guid)">
            <summary>
            Gets all user certificates associated with the specified certificate type
            </summary>
            <param name="certificateType">The certificate type to retrieve the user certificates for.</param>
            <returns></returns>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.CertificateService.ValidateUserCertificate(System.Guid,System.Byte[],System.String)">
            <summary>
            Performs validation of a user certificate
            </summary>
            <param name="certificateType">The certificate type.</param>
            <param name="certificateData">The certificate in binary form.</param>
            <param name="password">The password associated with the certificate, if any</param>
            <exception cref="T:Cenium.Framework.FrameworkException">when the certificate is not valid</exception>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.CertificateService.RegisterCertificateLoader(System.Guid,System.Func{Cenium.Framework.Component.AppServices.Certificates.CertificateTypeInfo,Cenium.Framework.Component.AppServices.Certificates.CertificateData})">
            <summary>
            Registers a certificate loader.
            </summary>
            <remarks>
            A certificate loader is a function that retrieves certificate data (including the certificate itself). Certificate loaders are typically used for embedded certificates.
            </remarks>
            <param name="identity">The identity of the certificate type</param>
            <param name="loader">The loader function</param>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.Certificates.CertificateData">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Certificates.CertificateData.#ctor(System.Byte[],System.String)">
            <summary>
            Initializes a new instance of the CertificateData class
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.Certificates.CertificateInfo">
            <summary>
            Represents minimal information about a certificate
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Certificates.CertificateInfo.#ctor">
            <summary>
            Initializes a new instance of the CertificateInfo class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Certificates.CertificateInfo.CertificateId">
            <summary>
            Gets or sets the identity of the certificate
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Certificates.CertificateInfo.CertificateType">
            <summary>
            Gets or sets the identity of the certificate type.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Certificates.CertificateInfo.Name">
            <summary>
            Gets or sets the name of the certificate
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Certificates.CertificateInfo.Description">
            <summary>
            Gets or sets the description of the certificate
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.Certificates.CertificateOptions">
            <summary>
            Specifies the options for a registered certificate type
            </summary>
        </member>
        <member name="F:Cenium.Framework.Component.AppServices.Certificates.CertificateOptions.None">
            <summary>
            No options specified
            </summary>
        </member>
        <member name="F:Cenium.Framework.Component.AppServices.Certificates.CertificateOptions.PrivateKey">
            <summary>
            Certificate must contain private key
            </summary>
        </member>
        <member name="F:Cenium.Framework.Component.AppServices.Certificates.CertificateOptions.Password">
            <summary>
            Certificate must be associated with a password
            </summary>
        </member>
        <member name="F:Cenium.Framework.Component.AppServices.Certificates.CertificateOptions.System">
            <summary>
            Certificate is a system certificate, i.e. embedded
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.Certificates.CertificateTypeInfo">
            <summary>
            Represents information about a certificate type
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Certificates.CertificateTypeInfo.#ctor(Cenium.Framework.Component.AppServices.Certificates.RegisterCertificateTypeAttribute)">
            <summary>
            Initializes a new instance of the CertificateTypeInfo class
            </summary>
            <param name="attr">The attribute that contains information about the registered certificate type</param>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Certificates.CertificateTypeInfo.Identity">
            <summary>
            Gets the identity of the certificate type.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Certificates.CertificateTypeInfo.DisplayName">
            <summary>
            Gets the display name of the certificate type
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Certificates.CertificateTypeInfo.Description">
            <summary>
            Gets a description of the certificate type
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Certificates.CertificateTypeInfo.IsSystemDefined">
            <summary>
            Gets a value indicating whether this instance is system defined.
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.Certificates.RegisterCertificateTypeAttribute">
            <summary>
            Registers a certificate type
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Certificates.RegisterCertificateTypeAttribute.#ctor(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the RegisterCertificateType class
            </summary>
            <param name="id">The identity of the certificate type; this must be a string representation of a Guid</param>
            <param name="displayName">A display-friendly name of the certificate type</param>
            <param name="description">An optional description of the certificate type</param>
            <param name="isSystemDefined">Defines whether the certificate is system-defined. System-defined certificates cannot be changed by a user.</param>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Certificates.RegisterCertificateTypeAttribute.#ctor(System.String,System.String,System.String,Cenium.Framework.Component.AppServices.Certificates.CertificateOptions)">
            <summary>
            Initializes a new instance of the RegisterCertificateType class
            </summary>
            <param name="id">The identity of the certificate type; this must be a string representation of a Guid</param>
            <param name="displayName">A display-friendly name of the certificate type</param>
            <param name="description">An optional description of the certificate type</param>
            <param name="options">Sets the options for this certificate type.</param>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Certificates.RegisterCertificateTypeAttribute.Identity">
            <summary>
            Gets the identity of the certificate type.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Certificates.RegisterCertificateTypeAttribute.DisplayName">
            <summary>
            Gets the display name of the certificate type
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Certificates.RegisterCertificateTypeAttribute.Description">
            <summary>
            Gets a description of the certificate type
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Certificates.RegisterCertificateTypeAttribute.IsSystemDefined">
            <summary>
            Gets a value indicating whether this instance is system defined (i.e. embedded)
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Certificates.RegisterCertificateTypeAttribute.IsPrivateKeyRequired">
            <summary>
            Gets a value indicating whether a private key is required for this certificate type
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Certificates.RegisterCertificateTypeAttribute.IsPasswordRequired">
            <summary>
            Gets a value indicating whether a password is required for the certificate type.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Certificates.RegisterCertificateTypeAttribute.Options">
            <summary>
            Gets or sets the options for the certificate type.
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.Common.AccommodationFeatureFilter">
            <summary>
            Represents an inclusion filter for features. Accommodation filters are used to filter an accommodation search
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Common.AccommodationFeatureFilter.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the AccommodationFeatureFilter class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Common.AccommodationFeatureFilter.FeatureId">
            <summary>
            Gets the feature identifier for the feature to include
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Common.AccommodationFeatureFilter.Create(System.Int64)">
            <summary>
            Creates a new AccommodationFeatureFilter instance
            </summary>
            <param name="featureId">The feature identifier to filter on.</param>
            <returns>a new <c>AccommodationFeatureFilter</c> instance.</returns>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.Common.AccommodationInfo">
            <summary>
            Represents an Accommodation
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Common.AccommodationInfo.#ctor">
            <summary>
            Initializes a new instance of the AccommodationInfo class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Common.AccommodationInfo.Identity">
            <summary>
            Gets the identity of the accommodation
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Common.AccommodationInfo.PropertyContextId">
            <summary>
            Gets the property context the accommodation belongs to
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Common.AccommodationInfo.Number">
            <summary>
            Gets the accommodation number
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Common.AccommodationInfo.Name">
            <summary>
            Gets the accommodation name
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Common.AccommodationInfo.Status">
            <summary>
            Gets the current status of the accommodation.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Common.AccommodationInfo.AccommodationZoneId">
            <summary>
            Gets the accommodation zone identifier.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Common.AccommodationInfo.AccommodationTypeId">
            <summary>
            Gets the accommodation type identifier.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Common.AccommodationInfo.SortOrder">
            <summary>
            Gets or sets the sort order of the accommodation.
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.Common.AccommodationFilter">
            <summary>
            Represents a filter in an accommodation or accommodation type search. This is a base class for all accommodation search filters
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Common.AccommodationFilter.#ctor">
            <summary>
            Initializes a new instance of the AccommodationSearchFilter class
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.Common.AccommodationSearchResultItem">
            <summary>
            Represents an accommodation in a search result
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Common.AccommodationSearchResultItem.#ctor">
            <summary>
            Initializes a new instance of the AccommodationResultItem class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Common.AccommodationSearchResultItem.AccommodationType">
            <summary>
            Gets the accommodation type associated with this item.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Common.AccommodationSearchResultItem.AccommodationZone">
            <summary>
            Gets the accommodation zone associated with this item.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Common.AccommodationSearchResultItem.Rank">
            <summary>
            Gets the accommodation item rank from the search
            </summary>
            <remarks>
            The rank is a weighted number that is calculated based on the number of matching criterias and the weight associated with the matcher
            </remarks>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Common.AccommodationSearchResultItem.RankMatches">
            <summary>
            Gets the matches that makes up the rank. This will always return a value
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Common.AccommodationSearchResultItem.CheckOutDate">
            <summary>
            Gets the check-out date for the accommodation
            </summary>
            <remarks>
            This will only have a value if the status is Occupied
            </remarks>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Common.AccommodationSearchResultItem.IsDirty">
            <summary>
            Gets if an accommodation is dirty
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Common.AccommodationSearchResultItem.FeatureMatches">
            <summary>
            Gets the features that matched with the original search
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Common.AccommodationSearchResultItem.Features">
            <summary>
            Gets all the features associated with an accommodation
            </summary>
            <value>
            This property requires the <c>GetFeatures</c> capability to be enabled; otherwise this property will return null.
            </value>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.Common.AccommodationSearch">
            <summary>
            Represents the filters and rank matchers to be applied to an accommodation search
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Common.AccommodationSearch.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the AccommodationSearchParameters class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Common.AccommodationSearch.MaxResults">
            <summary>
            Gets or sets the maximum number of results to return.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Common.AccommodationSearch.PropertyContextId">
            <summary>
            Gets the property context identifier this search is valid for.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Common.AccommodationSearch.Filters">
            <summary>
            Gets a read-only collection of the filters to apply to this search
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Common.AccommodationSearch.Matchers">
            <summary>
            Gets a read-only collection of the rank matchers to apply to this search
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Common.AccommodationSearch.AddFilter(Cenium.Framework.Component.AppServices.Common.AccommodationFilter)">
            <summary>
            Adds a filter to the search
            </summary>
            <param name="filter">The filter to add.</param>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Common.AccommodationSearch.AddFilterRange(System.Collections.Generic.IEnumerable{Cenium.Framework.Component.AppServices.Common.AccommodationFilter})">
            <summary>
            Adds the filters of the specified collection to the search.
            </summary>
            <param name="filters">The collection whose filters should be added.</param>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Common.AccommodationSearch.AddMatchers(Cenium.Framework.Component.AppServices.Common.RankMatcher)">
            <summary>
            Adds a rank matcher to the search
            </summary>
            <param name="matcher">The matcher to add.</param>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Common.AccommodationSearch.AddMatcherRange(System.Collections.Generic.IEnumerable{Cenium.Framework.Component.AppServices.Common.RankMatcher})">
            <summary>
            Adds the rank matchers of the specified collection to the search.
            </summary>
            <param name="matchers">The collection whose rank matchers should be added.</param>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Common.AccommodationSearch.Create(System.Int64)">
            <summary>
            Creates a new <c>AccommodationSearch</c> instance
            </summary>
            <param name="propertyContextId">The property context identifier to use in the search.</param>
            <returns>A new <c>AccommodationSearch</c> instance.</returns>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.Common.AccommodationSearchResult">
            <summary>
            Represents a search result from an accommodation search
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Common.AccommodationSearchResult.#ctor">
            <summary>
            Initializes a new instance of the AccommodationSearchResult class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Common.AccommodationSearchResult.PropertyContextId">
            <summary>
            Gets the property context the result is valid for.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Common.AccommodationSearchResult.Count">
            <summary>
            Gets the number of elements in the collection.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Common.AccommodationSearchResult.TotalMatchCount">
            <summary>
            Gets the total number of matches in the search. This can either be higher than or same as the Count property value.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Common.AccommodationSearchResult.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An enumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Common.AccommodationSearchResult.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Common.AccommodationSearchResult.AddRange(System.Collections.Generic.IEnumerable{Cenium.Framework.Component.AppServices.Common.AccommodationSearchResultItem})">
            <summary>
            Adds a collection of <c>AccommodationSearchResultItem</c> instances to the result.
            </summary>
            <param name="items">The items to add.</param>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.Common.AccommodationServiceCapability">
            <summary>
            Defines optional capabilities that the accommodation service may implement
            </summary>
        </member>
        <member name="F:Cenium.Framework.Component.AppServices.Common.AccommodationServiceCapability.StatusOutOfOrder">
            <summary>
            Status OutOfOrder
            </summary>
        </member>
        <member name="F:Cenium.Framework.Component.AppServices.Common.AccommodationServiceCapability.GetFeatures">
            <summary>
            Whether the service returns feaures
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.Common.AccommodationStatus">
            <summary>
            Represents the status on an accommodation
            </summary>
        </member>
        <member name="F:Cenium.Framework.Component.AppServices.Common.AccommodationStatus.Vacant">
            <summary>
            The accommodation is vacant
            </summary>
        </member>
        <member name="F:Cenium.Framework.Component.AppServices.Common.AccommodationStatus.Occupied">
            <summary>
            The accommodation is occupied
            </summary>
        </member>
        <member name="F:Cenium.Framework.Component.AppServices.Common.AccommodationStatus.OutOfService">
            <summary>
            The accommodation is taken out of service
            </summary>
        </member>
        <member name="F:Cenium.Framework.Component.AppServices.Common.AccommodationStatus.Blocked">
            <summary>
            The accommodation is blocked from use.
            </summary>
        </member>
        <member name="F:Cenium.Framework.Component.AppServices.Common.AccommodationStatus.OutOfOrder">
            <summary>
            The accommodation is out of order
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.Common.AccommodationTypeInfo">
            <summary>
            Represents information about an accommodation type
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Common.AccommodationTypeInfo.#ctor">
            <summary>
            Initializes a new instance of the AccommodationType class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Common.AccommodationTypeInfo.Identity">
            <summary>
            Gets the identity of the accommodation type
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Common.AccommodationTypeInfo.Code">
            <summary>
            Gets the code associated with the accommodation type
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Common.AccommodationTypeInfo.Name">
            <summary>
            Gets the name associated with the accommodation type
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Common.AccommodationTypeInfo.Description">
            <summary>
            Gets the description associated with the accommodation type
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.Common.AccommodationTypeFilter">
            <summary>
            Represents an inclusion filter for accommodation types. Accommodation filters are used to filter an accommodation search
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Common.AccommodationTypeFilter.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the AccommodationTypeFilter class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Common.AccommodationTypeFilter.AccommodationTypeId">
            <summary>
            Gets the accommodation type identifier that should be included in the search result
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Common.AccommodationTypeFilter.Create(System.Int64)">
            <summary>
            Creates a new AccommodationTypeFilter instance
            </summary>
            <param name="accommodationTypeId">The accommodation type identifier.</param>
            <returns>A new AccommodationTypeFilter instance.</returns>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.Common.AccommodationZoneFilter">
            <summary>
            Represents an inclusion filter for accommodation zones. Accommodation filters are used to filter an accommodation search
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Common.AccommodationZoneFilter.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the AccommodationZoneFilter class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Common.AccommodationZoneFilter.AccommodationZoneId">
            <summary>
            Gets the accommodation zone identifier that should be included in the search result
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Common.AccommodationZoneFilter.Create(System.Int64)">
            <summary>
            Creates a new AccommodationZoneFilter instance
            </summary>
            <param name="accommodationZoneId">The accommodation zone identifier.</param>
            <returns>A new AccommodationZoneFilter instance.</returns>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.Common.AccommodationStatusFilter">
            <summary>
            Represents an inclusion filter for accommodation status. Accommodation filters are used to filter an accommodation search
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Common.AccommodationStatusFilter.#ctor(Cenium.Framework.Component.AppServices.Common.AccommodationStatus,System.Nullable{System.DateTime})">
            <summary>
            Initializes a new instance of the AccommodatonStatusFilter class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Common.AccommodationStatusFilter.Status">
            <summary>
            Gets the status to include in the result
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Common.AccommodationStatusFilter.CheckOutDate">
            <summary>
            Gets the check-out-date. Only applicable for Status = AccommodationStatus.Occupied.
            </summary>
            <remarks>
            When specified, includes occupied results where an accommodation check-out date is equal to or less than this date
            </remarks>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Common.AccommodationStatusFilter.Create(Cenium.Framework.Component.AppServices.Common.AccommodationStatus)">
            <summary>
            Creates a new AccommodationStatusFilter instance.
            </summary>
            <param name="status">The status to include in the results</param>
            <returns>a new AccommodationStatusFilter instance.</returns>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Common.AccommodationStatusFilter.Create(System.DateTime)">
            <summary>
            Creates a filter that includes occupied accommodations that will be available on or after specified date
            </summary>
            <param name="checkOutDate">The date when the accommodation must become available.</param>
            <returns>A new <c>AccommodationStatusFilter</c> instance.</returns>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.Common.AccommodationZoneInfo">
            <summary>
            Represents information about an accommodation zone
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Common.AccommodationZoneInfo.#ctor">
            <summary>
            Initializes a new instance of the AccommodationZoneInfo class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Common.AccommodationZoneInfo.Identity">
            <summary>
            Gets the identity of the accommodation type
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Common.AccommodationZoneInfo.Name">
            <summary>
            Gets the name associated with the accommodation zone
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.Common.Currency">
            <summary>
            Represents a currency type
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Common.Currency.#ctor">
            <summary>
            Initializes a new instance of the Currency class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Common.Currency.Identity">
            <summary>
            Gets the identity of the currency
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Common.Currency.Code">
            <summary>
            Gets the code associated with the currency
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Common.Currency.Name">
            <summary>
            Gets the name of the currency
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Common.Currency.Symbol">
            <summary>
            Gets the currency symbol, if defined
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Common.Currency.DecimalDigits">
            <summary>
            Gets the number of decimals used for the currency
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Common.Currency.Round(System.Decimal)">
            <summary>
            Rounds the specified value according to the rules of the currency.
            </summary>
            <param name="value">The value to perform the rounding operation on</param>
            <returns>A rounded decimal value</returns>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Common.Currency.Round(System.Double)">
            <summary>
            Rounds the specified value according to the rules of the currency.
            </summary>
            <param name="value">The value to perform the rounding operation on</param>
            <returns>A rounded double value</returns>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Common.Currency.Round(System.Single)">
            <summary>
            Rounds the specified value according to the rules of the currency.
            </summary>
            <param name="value">The value to perform the rounding operation on</param>
            <returns>A rounded float value</returns>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.Common.ExchangeRateType">
            <summary>
            Represents a currency exchange rate type
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Common.ExchangeRateType.#ctor">
            <summary>
            Initializes a new instance of the ExchangeRateType class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Common.ExchangeRateType.Id">
            <summary>
            Gets or sets the identity of the rate type
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Common.ExchangeRateType.Name">
            <summary>
            Gets or sets the name of the rate type
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Common.ExchangeRateType.BaseCurrency">
            <summary>
            Gets or sets the base currency of the rate type
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Common.ExchangeRateType.CalculateFromBase(System.Int64,System.Decimal,System.DateTime)">
            <summary>
            Converts an amount from base to a specified currency. The amount to calculate from must be in the base currency
            </summary>
            <param name="toCurrencyId">The identity of the currency the calculated amount should be in</param>
            <param name="baseAmount">The base currency amount</param>
            <param name="transactionDate">The date/time when the transaction takes place</param>
            <returns>The amount in the specified currency</returns>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Common.ExchangeRateType.CalculateFromBase(System.Int64,System.Decimal)">
            <summary>
            Converts an amount from base to a specified currency. The amount to calculate from must be in the base currency
            </summary>
            <param name="toCurrencyId">The identity of the currency the calculated amount should be in</param>
            <param name="baseAmount">The base currency amount</param>
            <returns>The amount in the specified currency</returns>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Common.ExchangeRateType.CalculateFromBase(Cenium.Framework.Component.AppServices.Common.Currency,System.Decimal,System.DateTime)">
            <summary>
            Converts an amount from base to a specified currency. The amount to calculate from must be in the base currency
            </summary>
            <param name="toCurrency">The currency the calculated amount should be in</param>
            <param name="baseAmount">The base currency amount</param>
            <param name="transactionDate">The date/time when the transaction takes place</param>
            <returns>The amount in the specified currency</returns>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Common.ExchangeRateType.CalculateFromBase(Cenium.Framework.Component.AppServices.Common.Currency,System.Decimal)">
            <summary>
            Converts an amount from base to a specified currency. The amount to calculate from must be in the base currency
            </summary>
            <param name="toCurrency">The currency the calculated amount should be in</param>
            <param name="baseAmount">The base currency amount</param>
            <returns>The amount in the specified currency</returns>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Common.ExchangeRateType.CalculateFromCurrency(System.Int64,System.Decimal,System.DateTime)">
            <summary>
            Converts an amount from a specified currency to the base currency.
            </summary>
            <param name="fromCurrencyId">The identity of the currency to convert from</param>
            <param name="currencyAmount">The amount in the currency specified.</param>
            <param name="transactionDate">The date\time when the transaction occured</param>
            <returns>The calculated amount in the base currency.</returns>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Common.ExchangeRateType.CalculateFromCurrency(System.Int64,System.Decimal)">
            <summary>
            Converts an amount from a specified currency to the base currency.
            </summary>
            <param name="fromCurrencyId">The identity of the currency to convert from</param>
            <param name="currencyAmount">The amount in the currency specified.</param>
            <returns>The calculated amount in the base currency.</returns>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Common.ExchangeRateType.CalculateFromCurrency(Cenium.Framework.Component.AppServices.Common.Currency,System.Decimal,System.DateTime)">
            <summary>
            Converts an amount from a specified currency to the base currency.
            </summary>
            <param name="fromCurrency">The currency to convert from</param>
            <param name="currencyAmount">The amount in the currency specified.</param>
            <param name="transactionDate">The date\time when the transaction occured</param>
            <returns>The calculated amount in the base currency.</returns>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Common.ExchangeRateType.CalculateFromCurrency(Cenium.Framework.Component.AppServices.Common.Currency,System.Decimal)">
            <summary>
            Converts an amount from a specified currency to the base currency.
            </summary>
            <param name="fromCurrency">The currency to convert from</param>
            <param name="currencyAmount">The amount in the currency specified.</param>
            <param name="transactionDate">The date\time when the transaction occured</param>
            <returns>The calculated amount in the base currency.</returns>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.Common.FeatureInfo">
            <summary>
            Represents information about a feature. Features are associated with accommodations.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Common.FeatureInfo.#ctor">
            <summary>
            Initializes a new instance of the FeatureInfo class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Common.FeatureInfo.Identity">
            <summary>
            Gets the identity of the feature
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Common.FeatureInfo.Name">
            <summary>
            Gets the name of the feature
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.Common.FeatureRankMatcher">
            <summary>
            Represents a rank matcher for matching against accommodation features.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Common.FeatureRankMatcher.#ctor(System.Int64,System.Int32)">
            <summary>
            Initializes a new instance of the FeatureRankMatcher class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Common.FeatureRankMatcher.FeatureId">
            <summary>
            Gets the feature identifier to match against
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Common.FeatureRankMatcher.Create(System.Int64)">
            <summary>
            Creates a new FeatureRankMatcher for a specified feature identity with a default weight of 1.
            </summary>
            <param name="featureId">The feature identifier.</param>
            <returns>A new FeatureRankMatcher instance.</returns>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Common.FeatureRankMatcher.Create(System.Int64,System.Int32)">
            <summary>
            Creates a new FeatureRankMatcher for a specified feature identity with an associated weight
            </summary>
            <param name="featureId">The feature identifier.</param>
            <param name="weight">The weight to associate with the matcher.</param>
            <returns>A new FeatureRankMatcher instance.</returns>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.Common.FURAlgorithm">
            <summary>
            Represents a Fair Use Rotation algorithm
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Common.FURAlgorithm.#ctor(System.Guid,Cenium.Framework.Language.LanguageConstant,Cenium.Framework.Language.LanguageConstant,System.Action{System.Int64,System.Collections.Generic.IReadOnlyCollection{Cenium.Framework.Component.AppServices.Common.AccommodationInfo}})">
            <summary>
            Initializes a new instance of the FURAlgorithm class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Common.FURAlgorithm.Identity">
            <summary>
            Gets the identity of the algorithm.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Common.FURAlgorithm.DisplayName">
            <summary>
            Gets the display name for the algorithm
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Common.FURAlgorithm.DisplayNameTranslated">
            <summary>
            Gets the display name for the algorithm as a translated text.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Common.FURAlgorithm.Description">
            <summary>
            Gets the description for the algorithm
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Common.FURAlgorithm.DescriptionTranslated">
            <summary>
            Gets the description for the algorithm as a translated text.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Common.FURAlgorithm.Invoke(System.Int64,System.Collections.Generic.IReadOnlyCollection{Cenium.Framework.Component.AppServices.Common.AccommodationInfo})">
            <summary>
            Invokes the algorithm handler
            </summary>
            <param name="propertyContextId">The property context to execute the handler for.</param>
            <param name="accommodations">The accommodations to sort by fair use rotation.</param>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Common.FURAlgorithm.Create(System.Guid,Cenium.Framework.Language.LanguageConstant,Cenium.Framework.Language.LanguageConstant,System.Action{System.Int64,System.Collections.Generic.IReadOnlyCollection{Cenium.Framework.Component.AppServices.Common.AccommodationInfo}})">
            <summary>
            Creates a new <c>FURAlgorithm</c> instance
            </summary>
            <param name="identity">The identity associated with the algorithm. The identity must be unique for the algorithm being registered.</param>
            <param name="displayName">The display name for the algorithm</param>
            <param name="description">The description for the algorithm</param>
            <param name="handler">The delegate method that performs the sorting.</param>
            <returns>A new <c>FURAlgorithm</c> instance.</returns>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.Common.AccommodationOptionFilter">
            <summary>
            General class for filtering on specific options in an accommodation searchg
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Common.AccommodationOptionFilter.#ctor">
            <summary>
            Initializes a new instance of the OptionFilter class
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Common.AccommodationOptionFilter.Filter(System.Collections.Generic.IEnumerable{Cenium.Framework.Component.AppServices.Common.AccommodationSearchResultItem})">
            <summary>
            Method for applying a filter to a collection of search result items.
            </summary>
            <param name="items">An enumerable of items before filtering.</param>
            <returns>An enumerable of search result items with filtering applied</returns>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Common.AccommodationOptionFilter.CreateExcludeDirtyFilter">
            <summary>
            Creates a search filter that excludes any dirty accommodations
            </summary>
            <returns>A new <c>AccommodationOptionFilter</c> instance.</returns>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.Common.PropertyContextInfo">
            <summary>
            Represents information about a property
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Common.PropertyContextInfo.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the PropertyContextInfo class
            </summary>
            <param name="propertyContextId">The identifier associated with the property.</param>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Common.PropertyContextInfo.PropertyContextId">
            <summary>
            Gets the property context identifier.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Common.PropertyContextInfo.Name">
            <summary>
            Gets the property context name.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Common.PropertyContextInfo.Description">
            <summary>
            Gets the property context description.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Common.PropertyContextInfo.Address1">
            <summary>
            Gets the property context address field 'Address1'
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Common.PropertyContextInfo.Address2">
            <summary>
            Gets the property context address field 'Address2'
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Common.PropertyContextInfo.Address3">
            <summary>
            Gets the property context address field 'Address3'
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Common.PropertyContextInfo.City">
            <summary>
            Gets the property context address field 'City'
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Common.PropertyContextInfo.Province">
            <summary>
            Gets the property context address field 'Province'
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Common.PropertyContextInfo.ZipCode">
            <summary>
            Gets the property context address field 'ZipCode'
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Common.PropertyContextInfo.CountryId">
            <summary>
            Gets the country identity associated with the address
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Common.PropertyContextInfo.CountryCode">
            <summary>
            Gets the property context address field 'CountryCode'
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Common.PropertyContextInfo.CountryName">
            <summary>
            Gets the property context address field 'CountryName'
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Common.PropertyContextInfo.PhoneNo">
            <summary>
            Gets the main phone number associated with the property
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Common.PropertyContextInfo.FaxNo">
            <summary>
            Gets the main fax number associated with the property.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Common.PropertyContextInfo.Mail">
            <summary>
            Gets the main email address associated with the property.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Common.PropertyContextInfo.Url">
            <summary>
            Gets the URL associated with the property.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Common.PropertyContextInfo.LogoRef">
            <summary>
            Gets the reference to the logo image associated with the property.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Cenium.Framework.Component.AppServices.Common.PropertyContextInfo.Logo" -->
        <member name="T:Cenium.Framework.Component.AppServices.Common.RankMatch">
            <summary>
            Represents the matches that makes up a rank on an <c>AccommodationSearchResultItem</c>
            </summary>
        </member>
        <member name="F:Cenium.Framework.Component.AppServices.Common.RankMatch.Empty">
            <summary>
            Represents an empty rank match
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Common.RankMatch.#ctor">
            <summary>
            Initializes a new instance of the RankMatch class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Common.RankMatch.Rank">
            <summary>
            Gets the rank value. The rank value is decided by the number of matches and their weight
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Common.RankMatch.MatchCount">
            <summary>
            Gets the number of matches.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Common.RankMatch.MatchPercent">
            <summary>
            Gets the match percentage. The percentage is defined as number of matches divided by number of <c>RankMatcher</c> specified in the query
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Common.RankMatch.FeatureMatches">
            <summary>
            Gets the feature matches. The result array consist of feature identities
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Common.RankMatch.IsEmpty">
            <summary>
            Gets a value indicating whether the match is empty
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.Common.RankMatcher">
            <summary>
            Representing a potential match in a result, the rank matcher is used to assign a rank to a search result. The RankMatcher class is a the base of all rank matchers.
            </summary>
            <remarks>
            A matcher can be associated with a weight; the higher the weight, the more important the match is, thus increasing the chance of being presented at the top of the search result list.
            </remarks>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Common.RankMatcher.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the RankMatcher class
            </summary>
            <param name="weight">The weight associated with the match.</param>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Common.RankMatcher.Weight">
            <summary>
            Gets the weight associated with the matcher
            </summary>
            <remarks>The weight is used to prioritize matches.</remarks>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.CurrencyService">
            <summary>
            Base class for the Currency application service.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.CurrencyService.#ctor">
            <summary>
            Initializes a new instance of the CurrencyService class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.CurrencyService.Currencies">
            <summary>
            Gets an IEnumerable of Currency instances that represents all active currencies.
            </summary>
            <remarks>
            Implementers of the currency service must provide an implementation of this method. By default this method throws a NotImplementedException.
            </remarks>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.CurrencyService.GetCurrencyByIdentity(System.Int64)">
            <summary>
            Gets the Currency instance associated with the specified identity.
            If a currency with the specified identity does not exist, or the identity is an invalid value (such as zero or a negative value), the method returns null
            </summary>
            <remarks>
            Implementers of the currency service must provide an implementation of this method. By default this method throws a NotImplementedException.
            </remarks>
            <param name="identity">The identity of the currency to get</param>
            <returns>A <c>Currency</c> instance if one was found; otherwise null</returns>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.CurrencyService.GetCurrencyByCode(System.String)">
            <summary>
            Gets the Currency instance associated with the specified code.
            If a currency with the specified code does not exist, or the code is an invalid value (such as null or whitespace), the method returns null. This method is not case-sensitive.
            </summary>
            <remarks>
            Implementers of the currency service must provide an implementation of this method. By default this method throws a NotImplementedException.
            </remarks>
            <param name="identity">The code associated with the currency to get</param>
            <returns>A <c>Currency</c> instance if one was found; otherwise null</returns>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.CurrencyService.GetCurrencyForProperty(System.Int64)">
            <summary>
            Gets the Currency instance associated with a specific property context
            </summary>
            <remarks>
            Implementers of the currency service must provide an implementation of this method. By default this method throws a NotImplementedException.
            </remarks>
            <param name="propertyContextId">The property to get the Currency for</param>
            <returns>A <c>Currency</c> instance if one was found; otherwise null</returns>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.CurrencyService.ExchangeRateTypes">
            <summary>
            Gets an IEnumerable of ExchangeRateType instances that represents all available rate types.
            </summary>
            <remarks>
            Implementers of the currency service must provide an implementation of this method. By default this method throws a NotImplementedException.
            </remarks>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.CurrencyService.GetExchangeRateTypeByIdentity(System.Int64,System.Int64)">
            <summary>
            Gets the ExchangeRateType instance associated with the specified identity.
            If a rate type with the specified identity does not exist, or the identity is an invalid value (such as zero or a negative value), the method returns null
            </summary>
            <remarks>
            Implementers of the currency service must provide an implementation of this method. By default this method throws a NotImplementedException.
            </remarks>
            <param name="identity">The identity of the rate type to get</param>
            <returns>A <c>ExchangeRateType</c> instance if one was found; otherwise null</returns>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.CurrencyService.GetExchangeRateTypeByName(System.String,Cenium.Framework.Component.AppServices.Common.Currency)">
            <summary>
            Gets the ExchangeRateType instance associated with the specified name (not case-sensitive).
            If a rate type with the specified name does not exist, or the name is an invalid value (such as null or whitespace), the method returns null
            </summary>
            <remarks>
            Implementers of the currency service must provide an implementation of this method. By default this method throws a NotImplementedException.
            </remarks>
            <param name="name">The name of the rate type to get</param>
            <returns>A <c>ExchangeRateType</c> instance if one was found; otherwise null</returns>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.CurrencyService.GetExchangeRateTypeForProperty(System.Int64)">
            <summary>
            Gets the ExchangeRateType instance associated with a specific property context
            </summary>
            <remarks>
            Implementers of the currency service must provide an implementation of this method. By default this method throws a NotImplementedException.
            </remarks>
            <param name="propertyContextId">The property to get the ExchangeRateType for</param>
            <returns>A <c>ExchangeRateType</c> instance if one was found; otherwise null</returns>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.DocumentService">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.DocumentService.#ctor">
            <summary>
            Initializes a new instance of the DocumentService class
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.DocumentService.RegisterDocumentReferenceAddedHandler(System.Type,Cenium.Framework.Component.AppServices.DocumentService.DocumentReferenceHandler)">
            <summary>
            Registers a handler that is invoked when a reference to the object of the specified entity type is being added to the document
            </summary>
            <param name="entityType">The entity type that should trigger the handler</param>
            <param name="handler">The handler to register</param>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.DocumentService.GetDocumentReferencesForEntity(Cenium.Framework.Data.EntityKeyReference)">
            <summary>
            Gets a list of documents that are attached to the specified entity instance
            </summary>
            <param name="entityKeyRef">The entity reference to the entity instance</param>
            <returns>A collection of attached to the specified entity instance</returns>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.DocumentService.CopyDocumentReferences(Cenium.Framework.Data.EntityKeyReference,Cenium.Framework.Data.EntityKeyReference)">
            <summary>
            Copies the document references from one entity instance to another.
            </summary>
            <param name="copyFrom">The entity instance to copy from</param>
            <param name="copyTo">The entity instance to copy to</param>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.DocumentService.DeleteDocumentReferences(Cenium.Framework.Data.EntityKeyReference)">
            <summary>
            Removes the document connections for a specified entity instance.
            </summary>
            <param name="entityKeyRef">A reference to the entity instance</param>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.Documents.DocumentReferences">
            <summary>
            Represents a set of references for a document
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Documents.DocumentReferences.#ctor">
            <summary>
            Initializes a new instance of the DocumentAttachments class
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Documents.DocumentReferences.AddReference(Cenium.Framework.Data.EntityKeyReference)">
            <summary>
            Adds a new reference to the document.
            </summary>
            <param name="reference">The reference to add</param>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Documents.DocumentReferences.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An enumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Documents.DocumentReferences.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.Documents.DocumentInfo">
            <summary>
            Represents a document
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Documents.DocumentInfo.#ctor">
            <summary>
            Initializes a new instance of the DocumentInfo class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Documents.DocumentInfo.Identity">
            <summary>
            Gets or sets the identity of the document.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Documents.DocumentInfo.PublishIdentity">
            <summary>
            Gets or sets the external identity of the document.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Documents.DocumentInfo.Version">
            <summary>
            Gets or sets the current version of the document.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Documents.DocumentInfo.Title">
            <summary>
            Gets or sets the title of the document.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Documents.DocumentInfo.ExpirationDate">
            <summary>
            Gets or sets the expiration date of the document.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Documents.DocumentInfo.ValidTo">
            <summary>
            Gets or sets the valid date of the document.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Documents.DocumentInfo.DocumentTypeId">
            <summary>
            Gets or sets the document type identity of the document.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Documents.DocumentInfo.DocumentTypeName">
            <summary>
            Gets or sets the type name of the document.
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.ErpService">
            <summary>
            Base class for the ERP application service
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.ErpService.#ctor">
            <summary>
            Initializes a new instance of the ErpService class
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.ErpService.RegisterPredefinedDimensionValueEntity``1">
            <summary>
            Registers an entity type that can be associated with pre-defined dimension values.
            </summary>
            <typeparam name="TEntity">The entity type.</typeparam>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.ErpService.RegisterDimensionSourceQueryHandler(System.String,System.Func{Cenium.Framework.Component.AppServices.Erp.DimensionSourceQueryHandler})">
            <summary>
            Registers a dimension code query handler factory
            </summary>
            <param name="dimensionCodeIdentity">The dimension source code identity to register the factory for.</param>
            <param name="factory">The factory to register.</param>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.ErpService.RegisterDimensionSourceQueryHandler``1(System.String,System.Func{``0,System.Collections.Generic.IEnumerable{Cenium.Framework.Component.AppServices.Erp.DimensionSourceValue}})">
            <summary>
            Registers a dimension code query handler. This method automatically creates a factory
            </summary>
            <param name="dimensionCodeIdentity">The dimension source code identity to register the factory for.</param>
            <param name="query">The query delegate method to use.</param>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.ErpService.CreateErpContextCore">
            <summary>
            Creates an <c>ErpContext</c> instance. Implementers of the ERP service should override this method.
            </summary>
            <returns>A new <c>ErpContext</c> instance. </returns>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.ErpService.CreateErpContext">
            <summary>
            Creates a new <c>ErpContext</c> instance.
            </summary>
            <returns>A new <c>ErpContext</c> instance.</returns>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.ErpService.RegisterDimensionSourceQueryHandler(System.String,System.Func{System.Collections.Generic.IEnumerable{Cenium.Framework.Component.AppServices.Erp.DimensionSourceValue}})">
            <summary>
            Registers a dimension code query handler. This method automatically creates a factory
            </summary>
            <param name="dimensionCodeIdentity">The dimension source code identity to register the factory for.</param>
            <param name="query">The query delegate method to use.</param>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.ErpService.DimensionSources">
            <summary>
            Gets a read-only collection of all registered dimension sources.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.ErpService.TransactionTypes">
            <summary>
            Gets a read-only collection of all registered transaction types.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.ErpService.IsPredefinedDimensionValueEntity(System.String)">
            <summary>
            Determines whether an entity supports pre-defined dimension values.
            </summary>
            <param name="entityName">Name of the entity.</param>
            <returns><c>true</c> if the entity supports pre-defined dimension values; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.ErpService.PredefinedDimensionValueEntities">
            <summary>
            Gets the entity types that supports pre-defined dimension values.
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.Erp.DefaultErpContext">
            <summary>
            Provides a default implementation of the ErpContext
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Erp.DefaultErpContext.#ctor">
            <summary>
            Initializes a new instance of the DefaultErpContext class
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.Erp.DefaultTransactionCollection`1">
            <summary>
            Provides a default implementation of a TransactionCollection
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Erp.DefaultTransactionCollection`1.#ctor(System.Guid[],System.Func{System.Guid,`0})">
            <summary>
            Initializes a new instance of the DefaultTransactionCollection class
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.Erp.DimensionSourceCode">
            <summary>
            Represents a registered dimension source code
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Erp.DimensionSourceCode.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the DimensionSourceCode class
            </summary>
            <param name="id">The identity of the dimension source code</param>
            <param name="name">A display-friendly name for the dimension source code</param>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Erp.DimensionSourceCode.Id">
            <summary>
            Gets the identifier for the dimension source
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Erp.DimensionSourceCode.Name">
            <summary>
            Gets a display-friendly name for the dimension source
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Erp.DimensionSourceCode.IsQueryable">
            <summary>
            Returns true if this dimension source code is associated with a query handler; otherwise false
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Erp.DimensionSourceCode.CreateQueryHandler">
            <summary>
            Creates a new <c>DimensionSourceQueryHandler</c> instance.
            </summary>
            <returns>a new <c>DimensionSourceQueryHandler</c> instance.</returns>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.Erp.DimensionSourceCodePrepareEntry">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Erp.DimensionSourceCodePrepareEntry.#ctor(Cenium.Framework.Component.AppServices.Erp.DimensionSourceCodeValueLookupHandler,Cenium.Framework.Component.AppServices.Erp.DimensionSourceCodeValueIndexEntry)">
            <summary>
            Initializes a new instance of the DimensionSourceCodePrepareEntry class
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.Erp.DimensionSourceCodeValue">
            <summary>
            Represents a dimension source code value
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Erp.DimensionSourceCodeValue.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the DimensionSourceCodeValue class
            </summary>
            <param name="identity">The identity of the dimension source code</param>
            <param name="value">The value associated with the dimension source code</param>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.Erp.DimensionSourceCodeValueIndexEntry">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Erp.DimensionSourceCodeValueIndexEntry.#ctor">
            <summary>
            Initializes a new instance of the DimensionSourceCodeValueIndexEntry class
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.Erp.DimensionSourceCodeValueLookupHandler">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Erp.DimensionSourceCodeValueLookupHandler.#ctor">
            <summary>
            Initializes a new instance of the DimensionSourceCodeValueLookupHandler class
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Erp.DimensionSourceCodeValueLookupHandler.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="dispose"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Erp.DimensionSourceCodeValueLookupHandler.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.Erp.DimensionSourceCodeValueLookupHandlerFactory">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Erp.DimensionSourceCodeValueLookupHandlerFactory.#ctor">
            <summary>
            Initializes a new instance of the DimensionSourceCodeValueLookupHandlerFactory class
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.Erp.DimensionSourceCodeValueLookupReference">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.Erp.DimensionSourceContextQueryHandler`1">
            <summary>
            Base class for implementing dimension source query handlers from an entity context
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Erp.DimensionSourceContextQueryHandler`1.#ctor">
            <summary>
            Initializes a new instance of the DimensionSourceContextQueryHandler class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Erp.DimensionSourceContextQueryHandler`1.Context">
            <summary>
            Gets the context instance.
            </summary>
            <exception cref="T:System.ObjectDisposedException">TContext</exception>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Erp.DimensionSourceContextQueryHandler`1.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="dispose"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.Erp.DimensionSourceDelegateContextQueryHandler`1">
            <summary>
            Dimension source class for use with delegate functions
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Erp.DimensionSourceDelegateContextQueryHandler`1.#ctor(System.Func{`0,System.Collections.Generic.IEnumerable{Cenium.Framework.Component.AppServices.Erp.DimensionSourceValue}})">
            <summary>
            Initializes a new instance of the <see cref="T:Cenium.Framework.Component.AppServices.Erp.DimensionSourceDelegateContextQueryHandler`1"/> class.
            </summary>
            <param name="handler">The handler delegate</param>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Erp.DimensionSourceDelegateContextQueryHandler`1.Query">
            <summary>
            Creates a query for the dimension source
            </summary>
            <returns>
            An enumerable of <c>StringListEntry</c> instances.
            </returns>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Erp.DimensionSourceDelegateContextQueryHandler`1.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="dispose"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.Erp.DimensionSourceDelegateQueryHandler">
            <summary>
            Dimension source class for use with delegate functions
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Erp.DimensionSourceDelegateQueryHandler.#ctor(System.Func{System.Collections.Generic.IEnumerable{Cenium.Framework.Component.AppServices.Erp.DimensionSourceValue}})">
            <summary>
            Initializes a new instance of the DimensionSourceDelegateQueryHandler class
            </summary>
            <param name="handler">The query handler method</param>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Erp.DimensionSourceDelegateQueryHandler.Query">
            <summary>
            Creates a query for the dimension source
            </summary>
            <returns>
            An enumerable of <c>StringListEntry</c> instances.
            </returns>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Erp.DimensionSourceDelegateQueryHandler.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="dispose"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.Erp.DimensionSourceQueryHandler">
            <summary>
            Base class for implementing dimension source query handlers
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Erp.DimensionSourceQueryHandler.#ctor">
            <summary>
            Initializes a new instance of the DimensionSourceQueryHandler class
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Erp.DimensionSourceQueryHandler.Query">
            <summary>
            Creates a query for the dimension source
            </summary>
            <returns>An enumerable of <c>StringListEntry</c> instances.</returns>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Erp.DimensionSourceQueryHandler.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Erp.DimensionSourceQueryHandler.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="dispose"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Erp.DimensionSourceQueryHandler.IsDisposed">
            <summary>
            Gets a value indicating whether this instance has been disposed.
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.Erp.DimensionSourceValue">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Erp.DimensionSourceValue.#ctor">
            <summary>
            Initializes a new instance of the DimensionValue class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Erp.DimensionSourceValue.Value">
            <summary>
            Gets or sets the dimension value.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Erp.DimensionSourceValue.Description">
            <summary>
            Gets or sets the dimension value description.
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.Erp.ErpContext">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Erp.ErpContext.#ctor">
            <summary>
            Initializes a new instance of the ErpContext class
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Erp.ErpContext.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Erp.ErpContext.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="dispose"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.Erp.InventoryTransaction">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Erp.InventoryTransaction.#ctor">
            <summary>
            Initializes a new instance of the InventoryTransaction class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Erp.InventoryTransaction.Source">
            <summary>
            Gets or sets the source where the transaction originates.
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.Erp.InventoryTransactionType">
            <summary>
            Defines transaction types for inventory transaction
            </summary>
        </member>
        <member name="F:Cenium.Framework.Component.AppServices.Erp.InventoryTransactionType.Sale">
            <summary>
            Inventory sale transaction
            </summary>
        </member>
        <member name="F:Cenium.Framework.Component.AppServices.Erp.InventoryTransactionType.PositiveAdjustment">
            <summary>
            Positive adjustment to increase inventory stock
            </summary>
        </member>
        <member name="F:Cenium.Framework.Component.AppServices.Erp.InventoryTransactionType.NegativeAdjustment">
            <summary>
            Negative adjustment to decrease inventory stock
            </summary>
        </member>
        <member name="F:Cenium.Framework.Component.AppServices.Erp.InventoryTransactionType.Planned">
            <summary>
            Future planned sale of an inventory item
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.Erp.RegisterDimensionSourceCodeValueLookupAttribute">
            <summary>
            Registers a dimension source code value lookup
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Erp.RegisterDimensionSourceCodeValueLookupAttribute.#ctor(System.Type,System.Type)">
            <summary>
            Initializes a new instance of the RegisterDimensionSourceCodeValueLookup class
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.Erp.RegisterTransactionTypeAttribute">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Erp.RegisterTransactionTypeAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the RegisterTransactionTypeAttribute class
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.Erp.Transaction">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Erp.Transaction.#ctor">
            <summary>
            Initializes a new instance of the Transaction class
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.Erp.TransactionBase">
            <summary>
            Base class for transactions and transaction sets. Provides common functionality
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Erp.TransactionBase.#ctor">
            <summary>
            Initializes a new instance of the TransactionBase class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Erp.TransactionBase.Identity">
            <summary>
            Gets a unique identifier for the transaction set.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Erp.TransactionBase.PropertyContextId">
            <summary>
            Gets or sets the property context for the transaction set.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Erp.TransactionBase.TransactionDate">
            <summary>
            Gets or sets the transaction date.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Erp.TransactionBase.Source">
            <summary>
            Gets or sets the source where the transaction originates.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Erp.TransactionBase.References">
            <summary>
            Gets a collection of all the references in this transaction
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Erp.TransactionBase.DimensionSourceCodeValues">
            <summary>
            Gets a collection of all the dimension source code values in this transaction
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.Erp.TransactionCollection`1">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Erp.TransactionCollection`1.#ctor(System.Guid[])">
            <summary>
            Initializes a new instance of the TransactionCollection class
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.Erp.TransactionCurrencyProcessing">
            <summary>
            Defines how a transaction handles currency conversion
            </summary>
        </member>
        <member name="F:Cenium.Framework.Component.AppServices.Erp.TransactionCurrencyProcessing.NoConversion">
            <summary>
            No currency conversion is performed
            </summary>
        </member>
        <member name="F:Cenium.Framework.Component.AppServices.Erp.TransactionCurrencyProcessing.CalculateCurrencyAmount">
            <summary>
            The currency amount is calculated from the base amount
            </summary>
        </member>
        <member name="F:Cenium.Framework.Component.AppServices.Erp.TransactionCurrencyProcessing.CalculateBaseAmount">
            <summary>
            The base amount is calculated from the currency amount
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.Erp.TransactionReference">
            <summary>
            Represents a reference to an entity instance
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Erp.TransactionReference.#ctor(System.String,System.Object,System.Boolean)">
            <summary>
            Initializes a new instance of the TransactionReference class
            </summary>
            <param name="entityTypeName">The name of the entity to reference</param>
            <param name="key">The key to the entity instance being reference</param>
            <param name="autoResolve">Indicates whether the framework should resolve the reference</param>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Erp.TransactionReference.#ctor(System.Type,System.Object,System.Boolean)">
            <summary>
            Initializes a new instance of the TransactionReference class
            </summary>
            <param name="entityType">The entity type being referenced</param>
            <param name="key">The key to the entity instance being referenced</param>
            <param name="autoResolve">Indicates whether the framework should resolve the reference</param>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Erp.TransactionReference.EntityTypeName">
            <summary>
            Gets the name of the entity type being referenced.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Erp.TransactionReference.EntityKey">
            <summary>
            Gets the key to the entity being referenced.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Erp.TransactionReference.GetEntityKey``1">
            <summary>
            Gets the entity key, converted to the specified type
            </summary>
            <typeparam name="T">The type to convert the entity key to</typeparam>
            <returns>The converted entity key.</returns>
            <exception cref="T:System.NotSupportedException">When the conversion type is not supported.</exception>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Erp.TransactionReference.GetEntityKeyAsString">
            <summary>
            Gets the entity key as a string value
            </summary>
            <returns>The entity key as a string value.</returns>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Erp.TransactionReference.EntityReference">
            <summary>
            Gets the entity reference for the entity name and key
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Erp.TransactionReference.AutoResolve">
            <summary>
            Gets a value indicating whether this reference should be automatically resolved or not.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Erp.TransactionReference.Description">
            <summary>
            Gets or sets the description for the reference.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Erp.TransactionReference.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Erp.TransactionReference.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.Erp.TransactionSet">
            <summary>
            Represents an ERP transaction set
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Erp.TransactionSet.#ctor">
            <summary>
            Initializes a new instance of the TransactionSet class
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.Erp.TransactionType">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Erp.TransactionType.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the TransactionType class
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.Erp.RegisterDimensionSourceCodeAttribute">
            <summary>
            Registers a dimension source and associates it with an identity
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Erp.RegisterDimensionSourceCodeAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the RegisterDimensionSourceCodeAttribute class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Erp.RegisterDimensionSourceCodeAttribute.Id">
            <summary>
            Gets the identifier for the dimension source
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Erp.RegisterDimensionSourceCodeAttribute.Name">
            <summary>
            Gets a display-friendly name for the dimension source
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.NightAuditService">
            <summary>
            Base class for the night audit application service
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.NightAuditService.#ctor">
            <summary>
            Initializes a new instance of the NightAuditService class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.NightAuditService.Tasks">
            <summary>
            Gets all registered night audit tasks
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.NightAudit.INightAuditTaskInfo">
            <summary>
            Defines the structure that contains information about a night audit task
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.NightAudit.INightAuditTaskInfo.Name">
            <summary>
            Gets the name of the night audit task
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.NightAudit.INightAuditTaskInfo.Component">
            <summary>
            Gets the component the night audit task belongs to
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.NightAudit.INightAuditTaskInfo.DisplayName">
            <summary>
            Gets the display name for the night audit task
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.NightAudit.INightAuditTaskInfo.Description">
            <summary>
            Gets the description for the night audit task
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.NightAudit.INightAuditTaskInfo.Priority">
            <summary>
            Gets the priority for the night audit task
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.NightAudit.INightAuditTaskInfo.NightAuditTaskMethod">
            <summary>
            Gets the night audit task method delegate
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.NightAudit.NightAuditManager">
            <summary>
            Contains methods to subscribe night audit tasks.
            </summary>
        </member>
        <member name="F:Cenium.Framework.Component.AppServices.NightAudit.NightAuditManager.NightAuditTaskMethodDelegate">
            <summary>
            Signature of a night audit task method (Business date, Property context id)
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.NightAudit.NightAuditManager.RegisterNightAuditTask(System.Action{System.DateTime,System.Int64},System.String,System.String,System.String,Cenium.Framework.Component.AppServices.NightAudit.NightAuditTaskPriority)">
            <summary>
            Registers a night audit task method and associates the method with task metadata
            </summary>
            <param name="method">The night audit task method</param>
            <param name="name">The name of the night audit task. This must be a unique name</param>
            <param name="displayName">Display name of the night audit task</param>
            <param name="description">Description of the night audit task</param>
            <param name="priority">Priority of the night audit task</param>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.NightAudit.NightAuditManager.GetTasks">
            <summary>
            Gets information about all registered night audit tasks
            </summary>
            <returns>An <c>IEnumerable</c> of <c>INightAuditTaskInfo</c> instances</returns>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.NightAudit.NightAuditTaskInfo">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.NightAudit.NightAuditTaskPriority">
            <summary>
            Defines priority of a night audit task
            </summary>
        </member>
        <member name="F:Cenium.Framework.Component.AppServices.NightAudit.NightAuditTaskPriority.Critical">
            <summary>
            Task is critical, and night audit is aborted if task fails
            </summary>
        </member>
        <member name="F:Cenium.Framework.Component.AppServices.NightAudit.NightAuditTaskPriority.Normal">
            <summary>
            Normal priority, night audit is not aborted if task fails
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.NotificationService">
            <summary>
            Base class for the notification application service
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.NotificationService.#ctor">
            <summary>
            Initializes a new instance of the NotificationService class
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.Notifications.Notification">
            <summary>
            Represents a notification message
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Notifications.Notification.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Notification class
            </summary>
            <param name="typeId">The identity for the notification type</param>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Notifications.Notification.TypeId">
            <summary>
            Gets the notification type identifier.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Notifications.Notification.Title">
            <summary>
            Gets or sets the title.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Notifications.Notification.Description">
            <summary>
            Gets or sets the description.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Notifications.Notification.Expires">
            <summary>
            Gets or sets when the notification expires.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Notifications.Notification.EntityName">
            <summary>
            Gets or sets the entity name that the notification references.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Notifications.Notification.EntityKey">
            <summary>
            Gets or sets the entity key that the notification references.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Notifications.Notification.Recipients">
            <summary>
            Gets a collection of recipients for the notification.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Notifications.Notification.SetEntityReference(Cenium.Framework.Data.EntityKeyReference)">
            <summary>
            Sets the entity reference for then notification.
            </summary>
            <param name="entityRef">The entity reference.</param>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.ObjectPublishingService">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.ObjectPublishingService.#ctor">
            <summary>
            Initializes a new instance of the ObjectService class
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.Objects.ObjectInfo">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Objects.ObjectInfo.#ctor(System.Type,Cenium.Framework.Component.AppServices.Objects.PublishInfoAttribute)">
            <summary>
            Initializes a new instance of the ObjectInfo class
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.Objects.ObjectPropertyInfo">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Objects.ObjectPropertyInfo.#ctor(System.Type,System.Reflection.PropertyInfo)">
            <summary>
            Initializes a new instance of the ObjectPropertyInfo class
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.Objects.PublishInfoAttribute">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.PropertyContextService">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.PropertyContextService.#ctor">
            <summary>
            Initializes a new instance of the PropertyContextService class
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.RoomAllocationService">
            <summary>
            Defines methods for room allocations.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.RoomAllocationService.#ctor">
            <summary>
            Initializes a new instance of the RoomAllocationService class
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.RoomAllocationService.CreateAllocationSet(System.Int64,System.Int64)">
            <summary>
            Creates a new allocation set
            </summary>
            <param name="propertyContextId">Property context id</param>
            <param name="resourceId">Resource id</param>
            <returns>Allocation set</returns>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.RoomAllocation.AllocationEntry">
            <summary>
            Represents an allocation entry, used for allocation of rooms in resource engine.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.RoomAllocation.AllocationEntry.#ctor">
            <summary>
            Initializes a new instance of the AllocationEntry class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.RoomAllocation.AllocationEntry.Date">
            <summary>
            Gets or sets the date to allocate
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.RoomAllocation.AllocationEntry.SourceRef">
            <summary>
            Gets or sets the source reference of the business object doing the allocation
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.RoomAllocation.AllocationEntryBase">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.RoomAllocation.AllocationEntryBase.#ctor">
            <summary>
            Initializes a new instance of the AllocationEntryBase class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.RoomAllocation.AllocationEntryBase.Identity">
            <summary>
            Gets the allocation identifier.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.RoomAllocation.AllocationEntryBase.PropertyContextId">
            <summary>
            Gets or sets the property context
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.RoomAllocation.AllocationEntryBase.ResourceId">
            <summary>
            Gets or sets the resource id
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.RoomAllocation.AllocationEntryBase.AllocationQuantity">
            <summary>
            Gets or sets the quantity to allocate
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.RoomAllocation.AllocationEntryBase.SourceName">
            <summary>
            Name of source doing the allocation
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.RoomAllocation.AllocationSet">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.RoomAllocation.AllocationSet.#ctor">
            <summary>
            Initializes a new instance of the AllocationSet class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.RoomAllocation.AllocationSet.PropertyContextId">
            <summary>
            Gets or sets the property context
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.RoomAllocation.AllocationSet.ResourceId">
            <summary>
            Gets or sets the resource id
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.RoomAllocation.AllocationSet.SourceName">
            <summary>
            Name of source doing the allocation
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.RoomAllocation.AllocationSet.AllocationEntries">
            <summary>
            Gets a collection of allocation entries in the allocation set.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.RoomAllocation.AllocationSet.CreateEntry(System.DateTime,System.Int32)">
            <summary>
            Creates a new allocation entry in the allocation set.
            </summary>
            <param name="date">Allocation date</param>
            <param name="quantity">Quantity to allocate</param>
            <returns>Allocation entry</returns>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.RoomAllocation.AllocationSet.PreAllocate">
            <summary>
            Pre-allocates (soft allocates) the allocation entries in the allocation set.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.RoomAllocation.AllocationSet.Commit">
            <summary>
            Commits the allocation entries, in the allocation set, to the database.
            Rooms are reserved from inventory.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.RoomAllocation.AllocationSet.Rollback">
            <summary>
            Executes a rollback for allocation entries in the allocation set.
            Removes the allocations from inventory.
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.ServiceCatalog.OrderContainerType">
            <summary>
            Represents the order container type a ServiceItem belongs to
            </summary>
        </member>
        <member name="F:Cenium.Framework.Component.AppServices.ServiceCatalog.OrderContainerType.Quote">
            <summary>
            The container is a quote
            </summary>
        </member>
        <member name="F:Cenium.Framework.Component.AppServices.ServiceCatalog.OrderContainerType.Order">
            <summary>
            The container is an order
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.ServiceCatalog.OrderServiceContainer">
            <summary>
            Represents a service container
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.ServiceCatalog.OrderServiceContainer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the OrderServiceContainer class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.ServiceCatalog.OrderServiceContainer.Name">
            <summary>
            Gets the name of the container.
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.ServiceCatalog.PriceEntry">
            <summary>
            Represents a price structure for a service item
            </summary>
            <remarks>
            Each price element has two properties; one for the amount in a specified currency and one for the base or property currency.
            </remarks>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.ServiceCatalog.PriceEntry.#ctor">
            <summary>
            Initializes a new instance of the PriceEntry class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.ServiceCatalog.PriceEntry.CurrencyId">
            <summary>
            Gets the currency identity
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.ServiceCatalog.PriceEntry.BaseCurrencyId">
            <summary>
            Gets the base currency identifier.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.ServiceCatalog.PriceEntry.Quantity">
            <summary>
            Gets or sets the product quantity.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.ServiceCatalog.PriceEntry.CurrencyUnitPrice">
            <summary>
            Gets or sets the unit price (expressed in currency).
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.ServiceCatalog.PriceEntry.BaseUnitPrice">
            <summary>
            Gets or sets the unit price in the base currency (expressed in the property currency).
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.ServiceCatalog.PriceEntry.CurrencyDiscountAmount">
            <summary>
            Gets or sets the discount amount (expressed in currency).
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.ServiceCatalog.PriceEntry.BaseDiscountAmount">
            <summary>
            Gets or sets the discount amount (expressed in the property currency).
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.ServiceCatalog.PriceEntry.DiscountPercent">
            <summary>
            Gets or sets the discount percentage.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.ServiceCatalog.PriceEntry.CurrencyTaxAmount">
            <summary>
            Gets or sets the tax amount (expressed in currency).
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.ServiceCatalog.PriceEntry.BaseTaxAmount">
            <summary>
            Gets or sets the tax amount (expressed in the property currency).
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.ServiceCatalog.PriceEntry.TotalCurrencyAmountExcludingTax">
            <summary>
            Gets or sets the total amount without tax (expressed in currency).
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.ServiceCatalog.PriceEntry.TotalCurrencyAmountIncludingTax">
            <summary>
            Gets or sets the total amount (including taxes, expressed in currency).
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.ServiceCatalog.PriceEntry.TotalBaseAmountExcludingTax">
            <summary>
            Gets or sets the total amount without tax (expressed in the property currency).
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.ServiceCatalog.PriceEntry.TotalBaseAmountIncludingTax">
            <summary>
            Gets or sets the total amount (including taxes, expressed in the property currency).
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.ServiceCatalog.PriceEntry.CalculateDiscountPercentage">
            <summary>
            Calculates the discount percentage.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.ServiceCatalog.PriceEntry.CalculateDiscountAmount">
            <summary>
            Calculates the discount amount.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.ServiceCatalog.PriceEntry.RoundCurrencyAmounts">
            <summary>
            Rounds the currency amounts.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.ServiceCatalog.PriceEntry.RoundBaseAmounts">
            <summary>
            Rounds the base amounts.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.ServiceCatalog.PriceEntry.CalculateBaseAmounts(System.DateTime)">
            <summary>
            Calculates the base amounts based on the currency amounts
            </summary>
            <param name="date">The date to use for getting the correct exchange rate</param>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.ServiceCatalog.PriceEntry.CalculateCurrencyAmounts(System.DateTime)">
            <summary>
            Calculates the currency amounts based on the base amounts
            </summary>
            <param name="date">The date to use for getting the correct exchange rate</param>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.ServiceCatalog.ServiceItem">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.ServiceCatalog.ServiceItem.#ctor(System.String,System.String,Cenium.Framework.Component.AppServices.ServiceCatalog.OrderContainerType,System.String,System.Int64)">
            <summary>
            Initializes a new instance of the ServiceItem class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.ServiceCatalog.ServiceItem.ParentId">
            <summary>
            Gets or sets the parent identifier for the item.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.ServiceCatalog.ServiceItem.PropertyContextId">
            <summary>
            Gets or sets the property context identifier.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.ServiceCatalog.ServiceItem.ProductId">
            <summary>
            Gets or sets the product identifier.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.ServiceCatalog.ServiceItem.Quantity">
            <summary>
            Gets or sets the quantity.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.ServiceCatalog.ServiceItem.Date">
            <summary>
            Gets or sets the date.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.ServiceCatalog.ServiceItem.StartDate">
            <summary>
            Gets or sets the start date.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.ServiceCatalog.ServiceItem.EndDate">
            <summary>
            Gets or sets the end date.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.ServiceCatalog.ServiceItem.PrimaryContactId">
            <summary>
            Gets or sets the primary contact identifier.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.ServiceCatalog.ServiceItem.CompanyId">
            <summary>
            Gets or sets the company identifier.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.ServiceCatalog.ServiceItem.TravelAgentId">
            <summary>
            Gets or sets the travel agent identifier.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.ServiceCatalog.ServiceItem.DepositRuleId">
            <summary>
            Gets or sets the deposit rule identifier.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.ServiceCatalog.ServiceItem.CancellationPolicyId">
            <summary>
            Gets or sets the cancellation policy identifier.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.ServiceCatalog.ServiceItem.PromotionCode">
            <summary>
            Gets or sets the promotion code.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.ServiceCatalog.ServiceItem.GetEntity``1">
            <summary>
            Gets the service data associated with the item as the specified entity type.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <returns>The service data serialized into a TEntity type</returns>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.ServiceCatalog.ServiceItem.CreatePriceEntry(System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Creates a new <c>PriceEntry</c> instance
            </summary>
            <param name="currencyId">The identifier for the currency to use</param>
            <param name="exchangeRateTypeId">The identifier for the exchange rate type to use</param>
            <returns>A new <c>PriceEntry</c> instance</returns>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.ServiceCatalog.OrderServiceOperationContext">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.ServiceCatalog.OrderServiceOperationContext.#ctor">
            <summary>
            Initializes a new instance of the ServiceOperationContext class
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.ServiceCatalog.OrderServiceOperationContext.GetItemDescription(Cenium.Framework.Component.AppServices.ServiceCatalog.ServiceItem)">
            <summary>
            Gets a description of the service item. This is used to present a summary of the item data
            </summary>
            <param name="item">The item data</param>
            <returns>A <c>string</c> that is a summary of the item data.</returns>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.ServiceCatalog.OrderServiceOperationContext.OnCopy(Cenium.Framework.Component.AppServices.ServiceCatalog.ServiceItem,Cenium.Framework.Component.AppServices.ServiceCatalog.OrderContainerType)">
            <summary>
            Called when an item is copied to a new order
            </summary>
            <param name="item">The item data</param>
            <param name="targetType">The container type being copied to</param>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.ServiceCatalog.OrderServiceOperationContext.Release(Cenium.Framework.Component.AppServices.ServiceCatalog.ServiceItem)">
            <summary>
            Called when an item is being released.
            </summary>
            <param name="item">The item data</param>
            <returns>A reference to the release object; or null if no release object exists</returns>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.ServiceCatalog.OrderServiceOperationContext.CheckCanRelease(Cenium.Framework.Component.AppServices.ServiceCatalog.ServiceItem)">
            <summary>
            Determines if an item can be released
            </summary>
            <param name="item">The item data.</param>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.ServiceCatalog.OrderServiceProvider">
            <summary>
            Base class for all services published through the service catalog
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.ServiceCatalog.OrderServiceProvider.#ctor">
            <summary>
            Initializes a new instance of the Service class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.ServiceCatalog.OrderServiceProvider.Name">
            <summary>
            Gets or sets the service name.
            </summary>
            <remarks>The service name must be a unqiue identifier for the service</remarks>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.ServiceCatalog.OrderServiceProvider.DisplayName">
            <summary>
            Gets or sets the display name for the service.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.ServiceCatalog.OrderServiceProvider.LookupMethod">
            <summary>
            Gets or sets the method to lookup products
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.ServiceCatalog.OrderServiceProvider.LookupDisplayNameMemberPath">
            <summary>
            Gets or sets the property path for the  lookup display value. If not specified, the lookup entity primary display field is used.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.ServiceCatalog.OrderServiceProvider.LookupDescriptionMemberPath">
            <summary>
            Gets or sets the property path for the  lookup description.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.ServiceCatalog.OrderServiceProvider.InputPane">
            <summary>
            Gets or sets the identifier of the input pane.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.ServiceCatalog.OrderServiceProvider.EntityType">
            <summary>
            Gets or sets the input entity type
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.ServiceCatalog.OrderServiceProvider.EditEventHandler">
            <summary>
            Gets or sets the edit event handler identifier.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.ServiceCatalog.OrderServiceProvider.PriceTriggers">
            <summary>
            Gets a collection of the price triggers.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.ServiceCatalog.OrderServiceProvider.CreateContext">
            <summary>
            Creates the context.
            </summary>
            <returns>A new <c>ServiceOperationContext</c> instance for the service entry</returns>
            <remarks>Service implementations should override this method to return a context specific to the service being implemented.</remarks>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.ServiceCatalog.OrderServiceProvider.AddPriceTrigger(Cenium.Framework.Component.AppServices.ServiceCatalog.ServiceProviderTrigger)">
            <summary>
            Adds a price trigger to the provider
            </summary>
            <param name="trigger">The trigger to add</param>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.ServiceCatalog.OrderServiceProviderOperationContext">
            <summary>
            Base class for performing service operations
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.ServiceCatalog.OrderServiceProviderOperationContext.#ctor">
            <summary>
            Initializes a new instance of the ServiceContext class
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.ServiceCatalog.OrderServiceProviderOperationContext.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.ServiceCatalog.OrderServiceProviderOperationContext.GetItemDescription(Cenium.Framework.Component.AppServices.ServiceCatalog.ServiceItem)">
            <summary>
            Gets a description of the service item. This is used to present a summary of the item data
            </summary>
            <param name="item">The item data</param>
            <returns>A <c>string</c> that is a summary of the item data.</returns>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.ServiceCatalog.OrderServiceProviderOperationContext.OnCopy(Cenium.Framework.Component.AppServices.ServiceCatalog.ServiceItem,Cenium.Framework.Component.AppServices.ServiceCatalog.OrderContainerType)">
            <summary>
            Called when an item is copied to a new order
            </summary>
            <param name="item">The item data</param>
            <param name="targetType">The container type being copied to</param>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.ServiceCatalog.OrderServiceProviderOperationContext.CheckCanRelease(Cenium.Framework.Component.AppServices.ServiceCatalog.ServiceItem)">
            <summary>
            Determines if an item can be released
            </summary>
            <param name="item">The item data.</param>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.ServiceCatalog.OrderServiceProviderOperationContext.Release(Cenium.Framework.Component.AppServices.ServiceCatalog.ServiceItem)">
            <summary>
            Called when an item is being released.
            </summary>
            <param name="item">The item data</param>
            <returns>A reference to the release object; or null if no release object exists</returns>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.ServiceCatalog.OrderServiceProviderOperationContext.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.ServiceCatalog.OrderServiceProviderOperationContext.IsDisposed">
            <summary>
            Gets a value indicating whether this instance is disposed.
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.ServiceCatalog.ServiceProviderTrigger">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.ServiceCatalog.ServiceProviderTrigger.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the ServiceProviderTrigger class
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.ServiceCatalog.OrderServiceCatalog">
            <summary>
            Contains methods for publishing and retriving services from the service catalog
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.ServiceCatalog.OrderServiceCatalog.Publish(Cenium.Framework.Component.AppServices.ServiceCatalog.OrderServiceProvider)">
            <summary>
            Adds a service entry to the service catalog
            </summary>
            <param name="entry">The entry to add.</param>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.ServiceCatalog.OrderServiceCatalog.Providers">
            <summary>
            Gets all published service providers.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.ServiceCatalog.OrderServiceCatalog.IsServiceAvailable(System.String)">
            <summary>
            Determines whether a service identified by the name argument is available
            </summary>
            <param name="name">The service entry identifier</param>
            <returns><c>true</c> if the service is available; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.ServiceCatalog.OrderServiceCatalog.IsServiceContainerAvailable(System.String)">
            <summary>
            Determines whether a service container identified by the name argument is available
            </summary>
            <param name="name">The name of the container</param>
            <returns><c>true</c> if the service container with the specified name is available; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.ServiceCatalog.OrderServiceCatalog.GetProviderByName(System.String)">
            <summary>
            Gets a service provider based on the service name
            </summary>
            <param name="name">The name associated with the service entry</param>
            <returns>A service entry with the specified name, or null if the service is not available</returns>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.ServiceCatalog.OrderServiceCatalog.GetContainerByName(System.String)">
            <summary>
            Gets a service container associated with the name argument.
            </summary>
            <param name="name">The name of the container to get</param>
            <returns>A service container with the specified name, or null if the service container is not available</returns>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.ServiceCatalog.OrderServiceCatalog.CreateContext">
            <summary>
            Creates a new <c>ServiceOperationContext</c> instance.
            </summary>
            <returns>A new <c>ServiceOperationContext</c> instance.</returns>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.StatisticsService">
            <summary>
            Base class for the Statistics service provider
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.StatisticsService.#ctor">
            <summary>
            Initializes a new instance of the StatisticsService class
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.StatisticsService.CreateCounterContextCore">
            <summary>
            Creates a <c>CounterContext</c> instance. Implementers of the statistics service should override this method.
            </summary>
            <returns>A new <c>CounterContext</c> instance. </returns>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.StatisticsService.CreateCounterContext">
            <summary>
            Creates a new <c>CounterContext</c> instance.
            </summary>
            <returns>A new <c>CounterContext</c> instance.</returns>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.StatisticsService.Counters">
            <summary>
            Gets a read-only collection containing all registered counters
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.StatisticsService.GetCounterByIdentity(System.Guid)">
            <summary>
            Gets the counter associated with the identity argument.
            </summary>
            <param name="identity">The identity of the counter to get</param>
            <returns>The counter associated with the identity argument, or null if the counter does not exist</returns>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.StatisticsService.RegisterCounter(Cenium.Framework.Component.AppServices.Statistics.CounterBase)">
            <summary>
            Registers a counter
            </summary>
            <param name="counter">The counter to register</param>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.StatisticsService.RegisterGroupQuery(Cenium.Framework.Component.AppServices.Statistics.GroupQuery)">
            <summary>
            Registers a grouping query
            </summary>
            <param name="query">The query metadata to register.</param>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.StatisticsService.GroupQueries">
            <summary>
            Gets a read-only collection containing all registered group queries
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.StatisticsService.GetGroupQueryByIdentity(System.Guid)">
            <summary>
            Gets the group query associated with the identity argument.
            </summary>
            <param name="identity">The identity of the group query to get</param>
            <returns>The group query associated with the identity argument, or null if the group query does not exist</returns>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.Statistics.ApplicationCounter">
            <summary>
            Represents the definition of a statistical counter that is application specific (i.e. not property specific)
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Statistics.ApplicationCounter.#ctor(System.Guid,Cenium.Framework.Component.AppServices.Statistics.CounterType,System.String,System.String)">
            <summary>
            Initializes a new instance of the ApplicationCounter class
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Statistics.ApplicationCounter.CreateValue">
            <summary>
            Creates a new <c>CounterValue</c> instance
            </summary>
            <returns>A new <c>CounterValue</c> instance.</returns>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Statistics.ApplicationCounter.Create(System.Guid,Cenium.Framework.Component.AppServices.Statistics.CounterType,System.String,System.String)">
            <summary>
            Creates a new <c>ApplicationCounter</c> instance
            </summary>
            <param name="identity">The identity of the counter. This must be a unique Guid for the counter.</param>
            <param name="type">The type of counter</param>
            <param name="displayName">A display-friendly name of the counter.</param>
            <param name="description">A description associated with the counter.</param>
            <returns>a new <c>ApplicationCounter</c> instance.</returns>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.Statistics.CounterQueryHandlerBase">
            <summary>
            Represents a base class for all custom counter handlers
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Statistics.CounterQueryHandlerBase.#ctor">
            <summary>
            Initializes a new instance of the CounterQueryHandlerBase class
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Statistics.CounterQueryHandlerBase.GetCurrentCounterResult(System.Int64,System.Guid)">
            <summary>
            Gets the current counter result for a specified counter and property context
            </summary>
            <param name="propertyContextId">The property context identifier.</param>
            <param name="counterId">The counter identifier.</param>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Statistics.CounterQueryHandlerBase.GetCounterResultForDate(System.Int64,System.Guid,System.DateTime)">
            <summary>
            Gets the counter result for a specified counter, property context and date
            </summary>
            <param name="propertyContextId">The property context identifier.</param>
            <param name="counterId">The counter identifier.</param>
            <param name="date">The date to get the result for.</param>
            <returns>A new <c>CounterResultItem</c> containing the counter data for the specified arguments</returns>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Statistics.CounterQueryHandlerBase.GetCounterResultForDateRange(System.Int64,System.Guid,System.DateTime,System.DateTime)">
            <summary>
            Gets the counter result for a specified counter, property context and date range.
            </summary>
            <param name="propertyContextId">The property context identifier.</param>
            <param name="counterId">The counter identifier.</param>
            <param name="dateFrom">The start date (inclusive) to get the result for.</param>
            <param name="dateTo">The end date (inclusive) to get the result for.</param>
            <returns>An <c>IEnumerable</c> containing <c>CounterResultItem</c> instances with the counter data for the specified arguments</returns>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Statistics.CounterQueryHandlerBase.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Statistics.CounterQueryHandlerBase.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Statistics.CounterQueryHandlerBase.CheckNotDisposed">
            <summary>
            Checks that the context has not been disposed
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.Statistics.CounterResultItem">
            <summary>
            The <c>CounterResultItem</c> represents a result from a query on a counter
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Statistics.CounterResultItem.#ctor">
            <summary>
            Initializes a new instance of the CounterResultItem class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Statistics.CounterResultItem.CounterDate">
            <summary>
            Gets or sets the date for the result. This is a date-only, not date and time property
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Statistics.CounterResultItem.PropertyContextId">
            <summary>
            Gets or sets the property context identifier. If the result does not support property, the value is ignored
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Statistics.CounterResultItem.CountValue">
            <summary>
            Gets or sets the count value.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Statistics.CounterResultItem.Value">
            <summary>
            Gets or sets the counter value.
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.Statistics.CustomCounter">
            <summary>
            Represents the definition of a counter that is custom
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Statistics.CustomCounter.#ctor(System.Guid,Cenium.Framework.Component.AppServices.Statistics.CounterType,System.String,System.String,System.Func{Cenium.Framework.Component.AppServices.Statistics.CounterQueryHandlerBase},Cenium.Framework.Component.AppServices.Statistics.CounterOptions)">
            <summary>
            Initializes a new instance of the CustomCounter class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Statistics.CustomCounter.Factory">
            <summary>
            Gets the factory for creating a new query handler instance
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Statistics.CustomCounter.Create(System.Guid,Cenium.Framework.Component.AppServices.Statistics.CounterType,System.String,System.String,System.Func{Cenium.Framework.Component.AppServices.Statistics.CounterQueryHandlerBase},Cenium.Framework.Component.AppServices.Statistics.CounterOptions)">
            <summary>
            Creates a new <c>CustomCounter</c> instance
            </summary>
            <param name="identity">The identity of the counter. This must be a unique Guid for the counter.</param>
            <param name="type">The type of counter</param>
            <param name="displayName">A display-friendly name of the counter.</param>
            <param name="description">A description associated with the counter.</param>
            <param name="factory">The factory method that creates new counter query handlers.</param>
            <param name="options">The options the custom counter supports.</param>
            <returns>a new <c>CustomCounter</c> instance.</returns>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.Statistics.EntityContextCounterQueryHandlerBase`1">
            <summary>
            Base class for all entity context based counter query handlers. This class handles automatic creation and disposing of entity contexts
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Statistics.EntityContextCounterQueryHandlerBase`1.#ctor">
            <summary>
            Initializes a new instance of the EntityContextCounterQueryHandlerBase class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Statistics.EntityContextCounterQueryHandlerBase`1.Context">
            <summary>
            Gets the entity context.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Statistics.EntityContextCounterQueryHandlerBase`1.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.Statistics.EntityContextGroupQueryHandlerBase`1">
            <summary>
            Base class for group query execution handlers that uses an entity context.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Statistics.EntityContextGroupQueryHandlerBase`1.#ctor">
            <summary>
            Initializes a new instance of the EntityContextGroupQueryHandlerBase class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Statistics.EntityContextGroupQueryHandlerBase`1.Context">
            <summary>
            Gets the entity context.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Statistics.EntityContextGroupQueryHandlerBase`1.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.Statistics.GroupAggregateOperator">
            <summary>
            Defines how a group query will aggregate the results
            </summary>
        </member>
        <member name="F:Cenium.Framework.Component.AppServices.Statistics.GroupAggregateOperator.Count">
            <summary>
            Use a count of items per group
            </summary>
        </member>
        <member name="F:Cenium.Framework.Component.AppServices.Statistics.GroupAggregateOperator.Sum">
            <summary>
            Use a sum of an item value per group
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.Statistics.GroupQuery">
            <summary>
            Defines the metadata and execution logic for a grouping query
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Statistics.GroupQuery.#ctor(System.Guid,System.String,System.String,Cenium.Framework.Component.AppServices.Statistics.GroupQueryOptions)">
            <summary>
            Initializes a new instance of the GroupQuery class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Statistics.GroupQuery.Identity">
            <summary>
            Gets the unique identity of the group query
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Statistics.GroupQuery.Name">
            <summary>
            Gets the display-friendly name of the group query
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Statistics.GroupQuery.Description">
            <summary>
            Gets the description associated with the group query
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Statistics.GroupQuery.Options">
            <summary>
            Gets the options the group query supports.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Statistics.GroupQuery.IsPropertySpecific">
            <summary>
            Gets a value indicating whether this group query is property context specific.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Statistics.GroupQuery.Properties">
            <summary>
            Gets the properties associated with the group query. This includes both group by and aggregation properties.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Statistics.GroupQuery.Filters">
            <summary>
            Gets the filters associated with the group query.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Statistics.GroupQuery.HasProperty(System.String,System.String,Cenium.Framework.Component.AppServices.Statistics.GroupQueryPropertyOptions,Cenium.Framework.Component.AppServices.Statistics.GroupQueryPropertyValueType)">
            <summary>
            Adds a property to the group query.
            </summary>
            <param name="propertyName">Name of the property to add.</param>
            <param name="displayName">The display name of the property to add.</param>
            <param name="options">Specifies whether the property can be used for grouping purposes, aggregation purposes or both.</param>
            <param name="valueType">Determines if the property is a decimal or integer value type. Only applicable if the property is an aggregation property.</param>
            <returns>The <c>GroupQuery</c> instance, used for chaining method calls.</returns>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Statistics.GroupQuery.GetPropertyValueType(System.String)">
            <summary>
            Gets the value type for an aggregation property
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>The value type for the aggregation property. If the property is not defined, or not an aggregation property, this method returns <c>GroupQueryPropertyValueType.Undefined</c>.</returns>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Statistics.GroupQuery.HasFilter(System.Int32,System.String)">
            <summary>
            Adds a filter to the group query.
            </summary>
            <param name="identity">The identity of the filter.</param>
            <param name="displayName">The display name of the filter to add.</param>
            <returns>The <c>GroupQuery</c> instance, used for chaining method calls.</returns>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Statistics.GroupQuery.HasHandler(System.Func{Cenium.Framework.Component.AppServices.Statistics.GroupQueryHandlerBase})">
            <summary>
            Sets the handler factory used to execute the group query.
            </summary>
            <param name="handlerFactory">The handler factory to set.</param>
            <returns>The <c>GroupQuery</c> instance, used for chaining method calls.</returns>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Statistics.GroupQuery.ExecuteQuery(Cenium.Framework.Component.AppServices.Statistics.GroupQueryContext)">
            <summary>
            Executes the group query.
            </summary>
            <param name="context">The query context with arguments used during execution of the query.</param>
            <returns>An enumerable of <c>GroupQueryResultItem</c>, representing the result of the execution.</returns>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Statistics.GroupQuery.Create(System.Guid,System.String,System.String,Cenium.Framework.Component.AppServices.Statistics.GroupQueryOptions)">
            <summary>
            Creates a new <c>GroupQuery</c> instance
            </summary>
            <param name="identity">The unique identifier of the group query.</param>
            <param name="name">A display-friendly name for the group query.</param>
            <param name="description">A summary description of the purpose of the group query.</param>
            <param name="options">Defines the options the grouping query supports.</param>
            <returns>A new <c>GroupQuery</c> instance.</returns>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.Statistics.GroupQueryContext">
            <summary>
            Represents the arguments used to execute a group query.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Statistics.GroupQueryContext.#ctor(System.Int64,System.String,Cenium.Framework.Component.AppServices.Statistics.GroupAggregateOperator,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the GroupQueryContext class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Statistics.GroupQueryContext.PropertyContextId">
            <summary>
            Gets the property context identifier.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Statistics.GroupQueryContext.GroupByProperty">
            <summary>
            Gets the property to group on
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Statistics.GroupQueryContext.Operator">
            <summary>
            Gets the aggregate operator to use
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Statistics.GroupQueryContext.AggregateProperty">
            <summary>
            Gets the aggregate property.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Statistics.GroupQueryContext.Filter">
            <summary>
            Gets the filter to use
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.Statistics.GroupQueryFilter">
            <summary>
            Represents a filter definition for a grouping query
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Statistics.GroupQueryFilter.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the GroupQueryFilter class
            </summary>
            <param name="identity">The identity of the filter.</param>
            <param name="name">A display-friendly name for the filter.</param>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Statistics.GroupQueryFilter.Name">
            <summary>
            Gets the display-friendly name of the filter.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Statistics.GroupQueryFilter.Identity">
            <summary>
            Gets the identity associated with the filter.
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.Statistics.GroupQueryHandlerBase">
            <summary>
            Base class for all group query handlers
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Statistics.GroupQueryHandlerBase.#ctor">
            <summary>
            Initializes a new instance of the GroupQueryHandlerBase class
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Statistics.GroupQueryHandlerBase.ExecuteQuery(Cenium.Framework.Component.AppServices.Statistics.GroupQueryContext)">
            <summary>
            Provides the execution logic for a query.
            </summary>
            <param name="context">The arguments needed for building a grouping query.</param>
            <returns>The result of the query.</returns>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Statistics.GroupQueryHandlerBase.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Statistics.GroupQueryHandlerBase.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="dispose"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Statistics.GroupQueryHandlerBase.CheckNotDisposed">
            <summary>
            Checks that the context has not been disposed
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.Statistics.GroupQueryOptions">
            <summary>
            Defines the options (capabilities) that a group query supports.
            </summary>
        </member>
        <member name="F:Cenium.Framework.Component.AppServices.Statistics.GroupQueryOptions.None">
            <summary>
            No options are set
            </summary>
        </member>
        <member name="F:Cenium.Framework.Component.AppServices.Statistics.GroupQueryOptions.IsPropertySpecific">
            <summary>
            The group query is specific to property
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.Statistics.GroupQueryProperty">
            <summary>
            Represents a property associated with a group query.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Statistics.GroupQueryProperty.#ctor(System.String,System.String,Cenium.Framework.Component.AppServices.Statistics.GroupQueryPropertyOptions,Cenium.Framework.Component.AppServices.Statistics.GroupQueryPropertyValueType)">
            <summary>
            Initializes a new instance of the GroupQueryProperty class
            </summary>
            <param name="propertyName">The property name.</param>
            <param name="displayName">a display-friendly name associated with the property.</param>
            <param name="options">The options the property supports.</param>
            <param name="valueType">The value type of the property.</param>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Statistics.GroupQueryProperty.PropertyName">
            <summary>
            Gets the name of the property.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Statistics.GroupQueryProperty.DisplayName">
            <summary>
            Gets the display name.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Statistics.GroupQueryProperty.Options">
            <summary>
            Gets the options the property supports.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Statistics.GroupQueryProperty.ValueType">
            <summary>
            Gets the value type of the property.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Statistics.GroupQueryProperty.IsGroupByProperty">
            <summary>
            Gets a value indicating whether this property can be used as a grouping property.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Statistics.GroupQueryProperty.IsAggregateProperty">
            <summary>
            Gets a value indicating whether this property can be used as an aggregation property.
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.Statistics.GroupQueryPropertyOptions">
            <summary>
            Defines how a property can be used in a group query
            </summary>
        </member>
        <member name="F:Cenium.Framework.Component.AppServices.Statistics.GroupQueryPropertyOptions.None">
            <summary>
            The property cannot be used.
            </summary>
        </member>
        <member name="F:Cenium.Framework.Component.AppServices.Statistics.GroupQueryPropertyOptions.GroupBy">
            <summary>
            The property can be used as grouping property
            </summary>
        </member>
        <member name="F:Cenium.Framework.Component.AppServices.Statistics.GroupQueryPropertyOptions.Aggregate">
            <summary>
            The property can be used as an aggregate property.
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.Statistics.GroupQueryResultItem">
            <summary>
            Represents a result item in a group query
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Statistics.GroupQueryResultItem.#ctor">
            <summary>
            Initializes a new instance of the GroupQueryResultItem class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Statistics.GroupQueryResultItem.Name">
            <summary>
            Gets or sets the group name
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Statistics.GroupQueryResultItem.IntValue">
            <summary>
            Gets or sets the value as an integer
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Statistics.GroupQueryResultItem.Value">
            <summary>
            Gets or sets the value as a decimal
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.Statistics.GroupQueryPropertyValueType">
            <summary>
            Defines the value type of group query properties
            </summary>
        </member>
        <member name="F:Cenium.Framework.Component.AppServices.Statistics.GroupQueryPropertyValueType.Undefined">
            <summary>
            The value type is undefined.
            </summary>
        </member>
        <member name="F:Cenium.Framework.Component.AppServices.Statistics.GroupQueryPropertyValueType.Integer">
            <summary>
            The property is an integer property
            </summary>
        </member>
        <member name="F:Cenium.Framework.Component.AppServices.Statistics.GroupQueryPropertyValueType.Decimal">
            <summary>
            The property is a decimal property
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.Statistics.PropertyCounter">
            <summary>
            Represents the definition of a statistical counter that is property context specific.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Statistics.PropertyCounter.#ctor(System.Guid,Cenium.Framework.Component.AppServices.Statistics.CounterType,System.String,System.String)">
            <summary>
            Initializes a new instance of the Counter class
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Statistics.PropertyCounter.CreateValue(System.Int64)">
            <summary>
            Creates a new <c>CounterValue</c> instance
            </summary>
            <param name="propertyContext">The property the counter is valid for.</param>
            <returns>A new <c>CounterValue</c> instance.</returns>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Statistics.PropertyCounter.Create(System.Guid,Cenium.Framework.Component.AppServices.Statistics.CounterType,System.String,System.String)">
            <summary>
            Creates a new counter
            </summary>
            <param name="identity">The identity of the counter. This must be a unique Guid for the counter.</param>
            <param name="type">The type of counter</param>
            <param name="displayName">A display-friendly name of the counter.</param>
            <param name="description">A description associated with the counter.</param>
            <returns>a new <c>Counter</c> instance.</returns>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.Statistics.CounterBase">
            <summary>
            Base class for all statistical counters
            </summary>
            <remarks>
            Statistical counters represents a discrete value that can be used to compose calculated values such as KPIs. .
            </remarks>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Statistics.CounterBase.#ctor(System.Guid,Cenium.Framework.Component.AppServices.Statistics.CounterType,System.String,System.String,Cenium.Framework.Component.AppServices.Statistics.CounterOptions)">
            <summary>
            Initializes a new instance of the CounterBase class
            </summary>
            <param name="identity">The identity associated with the counter.</param>
            <param name="type">The counter type.</param>
            <param name="description">The display-friendly name of the counter.</param>
            <param name="displayName">The description associated with the counter.</param>
            <param name="options">The counter options.</param>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Statistics.CounterBase.Identity">
            <summary>
            Gets the identity of the counter
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Statistics.CounterBase.DisplayName">
            <summary>
            Gets the display name of the counter
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Statistics.CounterBase.Description">
            <summary>
            Gets the description of the counter
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Statistics.CounterBase.CounterType">
            <summary>
            Gets the counter type
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Statistics.CounterBase.Options">
            <summary>
            Gets the options this counter was created with
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Statistics.CounterBase.IsPropertyContextSpecific">
            <summary>
            Gets a value indicating whether this instance is property context specific.
            </summary>
            <value><c>true</c> if this instance is property context specific; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Statistics.CounterBase.IsDateSpecific">
            <summary>
            Gets a value indicating whether this instance is date specific.
            </summary>
            <value><c>true</c> if this instance is date specific; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Statistics.CounterBase.IsCustom">
            <summary>
            Gets a value indicating whether this instance is a custom counter.
            </summary>
            <value><c>true</c> if this instance is custom; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.Statistics.CounterContext">
            <summary>
            Represents a combination of counters to store as a single unit of work.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Statistics.CounterContext.#ctor">
            <summary>
            Initializes a new instance of the CounterContext class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Statistics.CounterContext.ContextType">
            <summary>
            Gets the type that defines the context
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Statistics.CounterContext.Add(Cenium.Framework.Component.AppServices.Statistics.CounterValue)">
            <summary>
            Adds a new counter value instance to the context
            </summary>
            <param name="value">The counter value to add</param>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Statistics.CounterContext.Save">
            <summary>
            Saves the counter values that have been added to the context.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Statistics.CounterContext.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Statistics.CounterContext.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="dispose"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Statistics.CounterContext.OnSave(System.Collections.Generic.ICollection{Cenium.Framework.Component.AppServices.Statistics.CounterValue})">
            <summary>
            Called when the save operation is called. Implementers of the <c>CounterContext</c> should override this method
            </summary>
            <param name="counters">The counter values to save</param>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Statistics.CounterContext.GetCounterValuesSummarized">
            <summary>
            Gets the counter values summarized.
            </summary>
            <returns>A collection of <c>CounterValue</c> instanced summarized</returns>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.Statistics.CounterOptions">
            <summary>
            Defines the options for a counter
            </summary>
        </member>
        <member name="F:Cenium.Framework.Component.AppServices.Statistics.CounterOptions.None">
            <summary>
            No options are set
            </summary>
        </member>
        <member name="F:Cenium.Framework.Component.AppServices.Statistics.CounterOptions.IsPropertySpecific">
            <summary>
            The counter is specific to property
            </summary>
        </member>
        <member name="F:Cenium.Framework.Component.AppServices.Statistics.CounterOptions.IsDateSpecific">
            <summary>
            The counter is per date
            </summary>
        </member>
        <member name="F:Cenium.Framework.Component.AppServices.Statistics.CounterOptions.IsDateAndPropertySpecific">
            <summary>
            The counter is property and date specific. This is the same as <c>IsPropertySpecific | IsDateSpecific</c>.
            </summary>
        </member>
        <member name="F:Cenium.Framework.Component.AppServices.Statistics.CounterOptions.IsCustom">
            <summary>
            The counter is a custom counter
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.Statistics.CounterType">
            <summary>
            Specifies how the counter values are stored and used
            </summary>
        </member>
        <member name="F:Cenium.Framework.Component.AppServices.Statistics.CounterType.Count">
            <summary>
            A counter that has a count of items or events
            </summary>
        </member>
        <member name="F:Cenium.Framework.Component.AppServices.Statistics.CounterType.Duration">
            <summary>
            A counter that has a time-duration of an event or operation. Typically used to calculate averages
            </summary>
        </member>
        <member name="F:Cenium.Framework.Component.AppServices.Statistics.CounterType.Value">
            <summary>
            A counter that records a value of an event or operation.
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.Statistics.CounterValue">
            <summary>
            Represents a counter value
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Statistics.CounterValue.#ctor(System.Guid,System.Int64)">
            <summary>
            Initializes a new instance of the CounterValue class
            </summary>
            <param name="identity">The counter identity</param>
            <param name="propertyContextId">The property context identity the counter value is for</param>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Statistics.CounterValue.Identity">
            <summary>
            Gets the identity of the counter
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Statistics.CounterValue.PropertyContextId">
            <summary>
            Gets the property context identifier the counter value is valid for
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.Statistics.CounterValue.Date">
            <summary>
            Gets the counter date.
            </summary>
            <remarks>
            This value is set after the counter is added to a counter context and contains only the date portion. The date is converted according to the property timezone.
            </remarks>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Statistics.CounterValue.Increment(System.Int64)">
            <summary>
            Increments the counter value
            </summary>
            <param name="value">The value to increment by</param>
            <returns>The incremented counter value.</returns>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.Statistics.CounterValue.Decrement(System.Int64)">
            <summary>
            Decrements the counter value
            </summary>
            <param name="value">The value to decrement by</param>
            <returns>The decremented counter value.</returns>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.TaskEngineService">
            <summary>
            Base class for the task engine application service
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.TaskEngineService.TaskReferenceHandler">
            <summary>
            Defines the signature for a task reference handler
            </summary>
            <param name="references">The references to add</param>
            <param name="entitySourceRef">The entity source reference.</param>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.TaskEngineService.RoutingSourceHandler">
            <summary>
            Defines the signature for a routing source handler
            </summary>
            <param name="propertyContextId">The property context the routing is for</param>
            <param name="source">The source reference that should handle the routing</param>
            <returns>A <c>TaskRoutingResult</c> instance containing the routing result</returns>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.TaskEngineService.ContextRoutingSourceHandler">
            <summary>
            Defines the signature for a context routing source handler
            </summary>
            <param name="routingContext">The task routing context the routing is for</param>
            <returns>A <c>TaskRoutingResult</c> instance containing the routing result</returns>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.TaskEngineService.#ctor">
            <summary>
            Initializes a new instance of the TaskEngineService class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.TaskEngineService.TaskTriggerTypes">
            <summary>
            Gets all registered task trigger types
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.TaskEngineService.OnTaskTriggerStatusChanged(System.String,System.Guid,System.String)">
            <summary>
            This method should be called when a status changes for a task trigger entity.
            </summary>
            <param name="entityTypeName">Name of the entity type that status changed</param>
            <param name="taskTriggerInstanceReference">Reference guid to the task trigger instance</param>
            <param name="newStatusName">Name of the new status</param>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.TaskEngineService.OnTaskTriggerDateChanged(System.String,System.Guid,System.DateTime,System.DateTime,System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
            <summary>
            This method should be called when a booking date changes for a task trigger entity.
            </summary>
            <param name="entityTypeName">Name of the entity type that booking date changed</param>
            <param name="taskTriggerInstanceReference">Reference guid to the task trigger instance</param>
            <param name="newStartDate">New booking start date</param>
            <param name="newEndDate">New booking end date</param>
            <param name="newStartTime">New booking start time</param>
            <param name="newEndTime">New booking end time</param>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.TaskEngineService.RegisterTaskReferenceAddedHandler(System.Type,Cenium.Framework.Component.AppServices.TaskEngineService.TaskReferenceHandler)">
            <summary>
            Registers a handler that is invoked when a reference to the object of the specified entity type is being added to the task
            </summary>
            <param name="entityType">The entity type that should trigger the handler</param>
            <param name="handler">The handler to register</param>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.TaskEngineService.RegisterEntityDispatchMapping(Cenium.Framework.Component.AppServices.TaskEngine.TaskDispatchMap)">
            <summary>
            Registers the mapping for an entity used in dispatching
            </summary>
            <param name="map">The task dispatch mapping instance</param>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.TaskEngineService.GetEntityDispatchMap(System.String)">
            <summary>
            Gets the dispatch mapping for a specified entity
            </summary>
            <param name="entityName">Name of the entity to get the mapping for</param>
            <returns>A <c>TaskDispatchMap</c> instance representing the mapping for the specified entity, or null if no mapping has been registered.</returns>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.TaskEngineService.GetTaskReferencesForEntity(Cenium.Framework.Data.EntityKeyReference)">
            <summary>
            Gets a list of tasks that are attached to the specified entity instance
            </summary>
            <param name="entityKeyRef">The entity reference to the entity instance</param>
            <returns>A collection of attached to the specified entity instance</returns>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.TaskEngineService.CopyTaskReferences(Cenium.Framework.Data.EntityKeyReference,Cenium.Framework.Data.EntityKeyReference)">
            <summary>
            Copies the task references from one entity instance to another.
            </summary>
            <param name="copyFrom">The entity instance to copy from</param>
            <param name="copyTo">The entity instance to copy to</param>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.TaskEngineService.DeleteTaskReferences(Cenium.Framework.Data.EntityKeyReference)">
            <summary>
            Removes the task connections for a specified entity instance.
            </summary>
            <param name="entityKeyRef">A reference to the entity instance</param>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.TaskEngineService.ExecuteSourceRouting(System.Int64,Cenium.Framework.Data.EntityKeyReference)">
            <summary>
            Executes a source routing
            </summary>
            <param name="propertyContextId">The property context identifier of the task</param>
            <param name="source">The source that should perform the routing.</param>
            <returns>A <c>TaskRoutingResult</c> instance containing the routing result, or null if no routing source is defined for the entity.</returns>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.TaskEngineService.ExecuteSourceRouting(Cenium.Framework.Component.AppServices.TaskEngine.TaskRoutingContext)">
            <summary>
            Executes a source routing, based on a task routing context
            </summary>
            <param name="routingContext">The task routing context to routing is for</param>
            <returns>A <c>TaskRoutingResult</c> instance containing the routing result, or null if no routing source is defined for the entity.</returns>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.TaskEngineService.RegisterRoutingSource(Cenium.Framework.Component.AppServices.TaskEngine.TaskRoutingSource)">
            <summary>
            Registers a routing source
            </summary>
            <param name="source">The source to register</param>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.TaskEngineService.RegisterRoutingSourceEntity``1(System.String,Cenium.Framework.Component.AppServices.TaskEngineService.RoutingSourceHandler)">
            <summary>
            Registers a routing handler for an entity type
            </summary>
            <typeparam name="T">The entity type</typeparam>
            <param name="routingHandler">The routing handler to register</param>
            <param name="routingSource">The identity for the routing source the entity is associated with</param>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.TaskEngineService.RegisterContextRoutingSourceEntity``1(System.String,Cenium.Framework.Component.AppServices.TaskEngineService.ContextRoutingSourceHandler)">
            <summary>
            Registers a context routing handler for an entity type
            </summary>
            <typeparam name="T">The entity type</typeparam>
            <param name="contextRoutingHandler">The context routing handler to register</param>
            <param name="routingSource">The identity for the routing source the entity is associated with</param>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.TaskEngineService.RegisterRoutingSourceEntity(System.String,System.String,Cenium.Framework.Component.AppServices.TaskEngineService.RoutingSourceHandler)">
            <summary>
            Registers a routing handler for an entity type
            </summary>
            <param name="entityName">The entity type identity</param>
            <param name="routingHandler">The routing handler to register</param>
            <param name="routingSource">The identity for the routing source the entity is associated with</param>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.TaskEngineService.RegisterContextRoutingSourceEntity(System.String,System.String,Cenium.Framework.Component.AppServices.TaskEngineService.ContextRoutingSourceHandler)">
            <summary>
            Registers a context routing handler for an entity type
            </summary>
            <param name="entityName">The entity type identity</param>
            <param name="contextRoutingHandler">The context routing handler to register</param>
            <param name="routingSource">The identity for the routing source the entity is associated with</param>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.TaskEngineService.GetRoutingSourceForEntity(System.String)">
            <summary>
            Gets the routing source for a specified entity
            </summary>
            <param name="entityName">Name of the entity.</param>
            <returns>The <c>TaskRoutingSource</c> associated with the entity, or null if no source is associated.</returns>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.TaskEngineService.GetRoutingSource(System.String)">
            <summary>
            Gets the routing source for the specified identity
            </summary>
            <param name="identity">The identity of the routing source to get.</param>
            <returns>The <c>TaskRoutingSource</c> associated with the specified identity.</returns>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.TaskEngineService.RoutingSources">
            <summary>
            Gets all registered routing sources
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.TaskEngine.ITaskTriggerType">
            <summary>
            Defines the structure of a task trigger type
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.TaskEngine.ITaskTriggerType.Name">
            <summary>
            Gets the name of the task trigger type
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.TaskEngine.ITaskTriggerType.DisplayName">
            <summary>
            Gets the display name for the task trigger type
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.TaskEngine.ITaskTriggerType.EntityTypeName">
            <summary>
            Gets the entity type name the task trigger type belongs to
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.TaskEngine.ITaskTriggerType.EntityTypeDisplayName">
            <summary>
            Gets the entity type display name the task trigger type belongs to
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.TaskEngine.ITaskTriggerType.Description">
            <summary>
            Gets the description for the task trigger type
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.TaskEngine.ITaskTriggerType.Policy">
            <summary>
            Gets the task trigger policy
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.TaskEngine.ITaskTriggerType.OnCreateTaskTriggerInstance">
            <summary>
            Gets the on create task trigger instance method delegate
            Parameters:
                string            = source (entity key),
                string            = Entity type name
                Guid              = TaskTriggerInstanceReference
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.TaskEngine.ITaskTriggerType.GetStatuses">
            <summary>
            Gets the get statuses method delegate.
            This method needs to be set, when task trigger policy is set to Status.
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.TaskEngine.TaskDispatchMap">
            <summary>
            Represents a mapping between entity properties and task dispatch properties
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.TaskEngine.TaskDispatchMap.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the TaskDispatchMap class
            </summary>
            <param name="entityType">The entity type that the map belongs to.</param>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.TaskEngine.TaskDispatchMap.EntityType">
            <summary>
            Gets the entity CLR type
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.TaskEngine.TaskDispatchMap.EntityName">
            <summary>
            Gets the name of the entity.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.TaskEngine.TaskDispatchMap.StartDatePropertyName">
            <summary>
            Gets or sets the entity property name that contains the start date.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.TaskEngine.TaskDispatchMap.EndDatePropertyName">
            <summary>
            Gets or sets the entity property name that contains the end date.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.TaskEngine.TaskDispatchMap.StartTimePropertyName">
            <summary>
            Gets or sets the entity property name that contains the start time.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.TaskEngine.TaskDispatchMap.EndTimePropertyName">
            <summary>
            Gets or sets the entity property name that contains the end time.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.TaskEngine.TaskDispatchMap.PropertyContextPropertyName">
            <summary>
            Gets the entity property name that contains the property context identifier.
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.TaskEngine.TaskEngineManager">
            <summary>
            Contains methods to register task trigger types
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.TaskEngine.TaskEngineManager.RegisterTaskTriggerType(System.String,System.String,System.String,System.String,System.String,Cenium.Framework.Component.AppServices.TaskEngine.TaskTriggerPolicy,System.Action{System.String,System.String,System.Guid},System.Func{System.Collections.Generic.IEnumerable{Cenium.Framework.Component.AppServices.TaskEngine.TaskTriggerPolicyBookingStatus}})">
            <summary>
            Registers a task trigger type
            </summary>
            <param name="name">The name of the task trigger type. This must be a unique name</param>
            <param name="displayName">Display name of the task trigger type</param>
            <param name="description">Description of the task trigger type</param>
            <param name="entityTypeName">Name of the entity type that owns the task trigger type</param>
            <param name="entityTypeDisplayName">Display name of the entity type that owns the task trigger type</param>
            <param name="policy">Task trigger policy</param>
            <param name="onCreateTaskTriggerInstanceMethod">On create task trigger method delegate</param>
            <param name="getStatusesMethod">Get statuses method delegate, which is required when policy = Status</param>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.TaskEngine.TaskEngineManager.GetTaskTriggerTypes">
            <summary>
            Gets information about all registered task trigger types
            </summary>
            <returns>An <c>IEnumerable</c> of <c>ITaskTriggerType</c> instances</returns>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.TaskEngine.TaskInfo">
            <summary>
            Represents basic information about a task.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.TaskEngine.TaskInfo.#ctor">
            <summary>
            Initializes a new instance of the TaskInfo class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.TaskEngine.TaskInfo.Identity">
            <summary>
            Gets or sets the identity of the task.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.TaskEngine.TaskInfo.PropertyContextId">
            <summary>
            Gets or sets the property context id of the task.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.TaskEngine.TaskInfo.Status">
            <summary>
            Gets or sets the status of the task.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.TaskEngine.TaskInfo.IsCompleted">
            <summary>
            Gets or sets if the task is completed.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.TaskEngine.TaskInfo.OwnerUserId">
            <summary>
            Gets or sets the owner user id of the task.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.TaskEngine.TaskInfo.Name">
            <summary>
            Gets or sets the name of the task.
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.TaskEngine.TaskReferences">
            <summary>
            Represents a set of references for a task
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.TaskEngine.TaskReferences.#ctor">
            <summary>
            Initializes a new instance of the TaskReferences class
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.TaskEngine.TaskReferences.AddReference(Cenium.Framework.Data.EntityKeyReference)">
            <summary>
            Adds a new reference to the task.
            </summary>
            <param name="reference">The reference to add</param>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.TaskEngine.TaskReferences.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An enumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.TaskEngine.TaskReferences.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.TaskEngine.TaskRoutingContext">
            <summary>
            Represents a task routing context for source routing of tasks.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.TaskEngine.TaskRoutingContext.#ctor">
            <summary>
            Initializes a new instance of the TaskRoutingContext class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.TaskEngine.TaskRoutingContext.Identity">
            <summary>
            Gets the identity of the task routing
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.TaskEngine.TaskRoutingContext.PropertyContextId">
            <summary>
            Gets the property context id of the task routing
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.TaskEngine.TaskRoutingContext.TaskTypeId">
            <summary>
            Gets the task type id of the task routing
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.TaskEngine.TaskRoutingContext.Source">
            <summary>
            Gets the source reference that should handle the routing
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.TaskEngine.TaskRoutingResult">
            <summary>
            Represents the result of a task routing
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.TaskEngine.TaskRoutingResult.#ctor">
            <summary>
            Initializes a new instance of the TaskRoutingResult class
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.TaskEngine.TaskRoutingSource">
            <summary>
            Represents a source used for routing
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.TaskEngine.TaskRoutingSource.#ctor">
            <summary>
            Initializes a new instance of the TaskRoutingSource class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.TaskEngine.TaskRoutingSource.Identity">
            <summary>
            Gets the identity of the source
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.TaskEngine.TaskRoutingSource.DisplayName">
            <summary>
            Gets the display for the source
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.TaskEngine.TaskRoutingSource.Description">
            <summary>
            Gets the description for the source
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.TaskEngine.TaskRoutingSource.Create(System.String,System.String,System.String)">
            <summary>
            Creates a new <c>TaskRoutingSource</c> instance.
            </summary>
            <param name="identity">The identity of the source. This must be a unique identifier.</param>
            <param name="displayName">The display name of the source.</param>
            <param name="description">The description of the source.</param>
            <returns>A new <c>TaskRoutingSource</c> instance.</returns>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.TaskEngine.TaskTriggerPolicy">
            <summary>
            Defines policy of a task trigger type
            </summary>
        </member>
        <member name="F:Cenium.Framework.Component.AppServices.TaskEngine.TaskTriggerPolicy.DateDriven">
            <summary>
            Task trigger type is based on a date, or a date calculation
            </summary>
        </member>
        <member name="F:Cenium.Framework.Component.AppServices.TaskEngine.TaskTriggerPolicy.Status">
            <summary>
            Task trigger type is based on a status.
            A status change will trigger a dispatch of a task.
            </summary>
        </member>
        <member name="F:Cenium.Framework.Component.AppServices.TaskEngine.TaskTriggerPolicy.DateAndStatus">
            <summary>
            Task trigger type is based on a date calculation and status.
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.TaskEngine.TaskTriggerPolicyBookingStatus">
            <summary>
            Represents information about a booking status associated to a task trigger type
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.AppServices.TaskEngine.TaskTriggerPolicyBookingStatus.#ctor">
            <summary>
            Initializes a new instance of the TaskTriggerPolicyBookingStatus class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.TaskEngine.TaskTriggerPolicyBookingStatus.Name">
            <summary>
            Gets the name of the task trigger policy booking status
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.TaskEngine.TaskTriggerPolicyBookingStatus.DisplayName">
            <summary>
            Gets the display name for the task trigger policy booking status
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.AppServices.TaskEngine.TaskTriggerPolicyBookingStatus.IsCancelledStatus">
            <summary>
            Indicates if the status is a cancelled status
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.AppServices.TaskEngine.TaskTriggerType">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.ComponentManager">
            <summary>
            Provides properties and methods to manage components. All methods in this class are thread-safe
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.ComponentManager.SdkVersion">
            <summary>
            Gets the current SDK version.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.ComponentManager.Inspect(System.Reflection.Assembly)">
            <summary>
            Inspects an component assembly and builds metadata
            </summary>
            <param name="assembly">The Assembly to inspect</param>
        </member>
        <member name="M:Cenium.Framework.Component.ComponentManager.OnStartup">
            <summary>
            Called when the server starts. Runs all component initializer OnStartup methods
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.ComponentManager.AfterStartup">
            <summary>
            Called after the server initialization is completed. Runs all component initializer AfterStartup methods
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.ComponentManager.OnShutdown">
            <summary>
            Called when the server shuts down. Runs all component initializer OnShutdown methods
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.ComponentManager.IsComponentInstalled(System.String)">
            <summary>
            Returns true if a specified component is installed, otherwise false
            </summary>
            <param name="id">The component id</param>
            <returns>true if a specified component is installed, otherwise false</returns>
        </member>
        <member name="M:Cenium.Framework.Component.ComponentManager.IsActivityAvailable(System.String,System.String)">
            <summary>
            Returns true if a specified activity is installed, otherwise false
            </summary>
            <param name="component">The component where the activity is located</param>
            <param name="id">The activity name to check for</param>
            <returns>True if the activity is installed, otherwise false</returns>
        </member>
        <member name="M:Cenium.Framework.Component.ComponentManager.GetActivityType(System.String,System.String)">
            <summary>
            Gets the Type for an activity
            </summary>
            <param name="component">The component where the activity is located</param>
            <param name="id">The activity name to check for</param>
            <returns>The Type for the activity</returns>
        </member>
        <member name="M:Cenium.Framework.Component.ComponentManager.GetComponentDescriptor(System.String)">
            <summary>
            Returns an IComponentDescriptor for a specified component, or null if the component is not installed
            </summary>
            <param name="id">The component id to look for</param>
            <returns>An IComponentDescriptor instance, or null if the component is not installed</returns>
        </member>
        <member name="P:Cenium.Framework.Component.ComponentManager.Components">
            <summary>
            Gets an IEnumerable of all the components installed
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.ComponentManager.Register(Cenium.Framework.Component.IComponentDescriptor)">
            <summary>
            Registers a IComponentDescriptor instance to the ComponentManager.
            </summary>
            <param name="descriptor">The IComponentDescriptor instance to register</param>
        </member>
        <member name="M:Cenium.Framework.Component.ComponentManager.IsEntityAvailable(System.String,System.String)">
            <summary>
            Checks if an entity is available
            </summary>
            <param name="component">The component where the entity is located</param>
            <param name="name">The name of the entity</param>
            <returns>True if the entity is available, otherwise false</returns>
        </member>
        <member name="M:Cenium.Framework.Component.ComponentManager.IsEntityAvailable(System.String)">
            <summary>
            Determines whether an entity is available by its name
            </summary>
            <param name="entityName">Name of the entity.</param>
            <returns><c>true</c> if the entity is installed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Cenium.Framework.Component.ComponentManager.GetEntityType(System.String,System.String)">
            <summary>
            Returns the entity Type if the entity is installed, otherwise null
            </summary>
            <param name="component">The component where the entity is located</param>
            <param name="name">The name of the entity</param>
            <returns>The entity Type, or null if the entity is not installed</returns>
        </member>
        <member name="M:Cenium.Framework.Component.ComponentManager.GetEntityType(System.String)">
            <summary>
            Returns the entity Type if the entity is installed, otherwise null
            </summary>
            <param name="entityName">The full name of the entity (component.entity)</param>
            <returns>The entity Type, or null if the entity is not installed</returns>
        </member>
        <member name="M:Cenium.Framework.Component.ComponentManager.RegisterEntity(System.String,System.Type)">
            <summary>
            Registers a Type as an entity type
            </summary>
            <param name="type">The entity type to register</param>
            <param name="component">The component the entity belongs to</param>
        </member>
        <member name="M:Cenium.Framework.Component.ComponentManager.RegisterEntities(System.String,System.Type[])">
            <summary>
            Registers an array of Type as entity types
            </summary>
            <param name="component">The component the entity types belongs to</param>
            <param name="types">An array of entity Type instances</param>
        </member>
        <member name="T:Cenium.Framework.Component.Event.CallbackEventArgs">
            <summary>
            Provides data for the callback event
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.Event.CallbackEventArgs.#ctor(System.String,Cenium.Framework.Messaging.MessageCallbackInfo)">
            <summary>
            Initializes a new instance of the CallbackEventArgs class
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.Event.CallbackEventStatus">
            <summary>
            Defines the possible event status for a callback event
            </summary>
        </member>
        <member name="F:Cenium.Framework.Component.Event.CallbackEventStatus.Success">
            <summary>
            The source event was successfully processed
            </summary>
        </member>
        <member name="F:Cenium.Framework.Component.Event.CallbackEventStatus.Error">
            <summary>
            The source event failed during processing
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.Event.EventManager">
            <summary>
            Contains methods to add and remove event handlers and raise events
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.Event.EventManager.Inspect(System.Reflection.Assembly)">
            <summary>
            Inspects an assembly and registers all events and event handlers
            </summary>
            <param name="assembly">The assembly to inspect</param>
        </member>
        <member name="P:Cenium.Framework.Component.Event.EventManager.Events">
            <summary>
            Gets an IEnumerable of all registered events
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.Event.EventManager.GetEventInfo(System.String)">
            <summary>
            Gets an <c>EventInfo</c> instance for a specified event
            </summary>
            <param name="eventType">The event type to retrieve an <c>EventInfo</c> instance for </param>
            <returns>an <c>EventInfo</c> instance for a specified event</returns>
        </member>
        <member name="M:Cenium.Framework.Component.Event.EventManager.AddEventHandler(System.String,Cenium.Framework.Component.Event.FrameworkEventHandler)">
            <summary>
            Adds an event handler for a specified event type
            </summary>
            <param name="eventType">The event type to add an event handler for</param>
            <param name="eventHandler">The event handler</param>
        </member>
        <member name="M:Cenium.Framework.Component.Event.EventManager.RemoveEventHandler(System.String,Cenium.Framework.Component.Event.FrameworkEventHandler)">
            <summary>
            Removes an event handler
            </summary>
            <param name="eventType">The event type to remove an event handler for</param>
            <param name="eventHandler">The event handler to remove</param>
        </member>
        <member name="M:Cenium.Framework.Component.Event.EventManager.AddCallbackEventHandler(System.String,Cenium.Framework.Component.Event.CallbackEventHandler)">
            <summary>
            Adds an event handler for a callback event (callbacks are used when an event is handled asynchronously)
            </summary>
            <param name="eventType">The event type to add an event handler for</param>
            <param name="eventHandler">The event handler</param>
        </member>
        <member name="M:Cenium.Framework.Component.Event.EventManager.Notify(System.String,System.Object,System.Object)">
            <summary>
            Notifies all event handlers about an event
            </summary>
            <param name="eventType">The event that was raised</param>
            <param name="source">The source of the event</param>
            <param name="data">The data associated with the event</param>
        </member>
        <member name="M:Cenium.Framework.Component.Event.EventManager.Notify(System.String,System.Object,System.Object,System.String[])">
            <summary>
            Notifies all event handlers about an event
            </summary>
            <param name="eventType">The event that was raised</param>
            <param name="source">The source of the event</param>
            <param name="data">The data associated with the event</param>
            <param name="includeProperties">The child properties to include</param>
        </member>
        <member name="M:Cenium.Framework.Component.Event.EventManager.NotifyAsync(System.String,System.Object,System.String[])">
            <summary>
            Notifies all event handlers asynchronously about an event
            </summary>
            <param name="eventType">The event that was raised</param>
            <param name="data">The data associated with the event</param>
            <param name="includeProperties">The child properties to include</param>
        </member>
        <member name="M:Cenium.Framework.Component.Event.EventManager.RaiseCallbackEvent(Cenium.Framework.Component.Event.CallbackEventArgs)">
            <summary>
            Raises a callback event.
            </summary>
            <param name="args">The <see cref="T:Cenium.Framework.Component.Event.CallbackEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Cenium.Framework.Component.Event.EventInfo">
            <summary>
            Contains information about an event and associated event handlers
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.Event.EventInfo.#ctor(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the FrameworkEvent class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.Event.EventInfo.Component">
            <summary>
            Gets the component the event belongs to
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.Event.EventInfo.Name">
            <summary>
            Gets the name of the event
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.Event.EventInfo.Description">
            <summary>
            Gets the description of the event
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.Event.EventInfo.IsRegistered">
            <summary>
            Gets if the event is registered. Unregistered events are events that have handlers, but no definition
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.Event.EventInfo.IsEmpty">
            <summary>
            Gets if the event has event handlers or not
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.Event.EventInfo.Count">
            <summary>
            Gets the number of handlers associated with this event.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.Event.EventInfo.AddEventHandler(Cenium.Framework.Component.Event.FrameworkEventHandler)">
            <summary>
            Adds an event handler to the event
            </summary>
            <param name="handler">The event handler to add</param>
        </member>
        <member name="M:Cenium.Framework.Component.Event.EventInfo.RemoveEventHandler(Cenium.Framework.Component.Event.FrameworkEventHandler)">
            <summary>
            Removes an event handler from the event
            </summary>
            <param name="handler">The event handler to remove</param>
        </member>
        <member name="P:Cenium.Framework.Component.Event.EventInfo.EventHandlers">
            <summary>
            Gets an IEnumerable containing all event handlers for the event
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.Event.NamespaceDoc">
            <summary>
            Contains classes and delegates related to server events
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.Event.FrameworkEventArgs">
            <summary>
            Contains event data about a server event
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.Event.FrameworkEventArgs.#ctor(System.String,System.Object,System.String[])">
            <summary>
            Initializes a new instance of the ActivityEventArgs class
            </summary>
            <param name="eventType">The event type that was raised</param>
            <param name="data">Gets the data associated with an event</param>
            <param name="includeProperties">The child properties to include in the result</param>
        </member>
        <member name="P:Cenium.Framework.Component.Event.FrameworkEventArgs.EventType">
            <summary>
            Gets the event type
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.Event.FrameworkEventArgs.Data">
            <summary>
            Gets the data associated with the event
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.Event.FrameworkEventArgs.IncludeProperties">
            <summary>
            Gets the child properties to include (child properties are either complex or collection properties)
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.Event.FrameworkEventArgs.Entity">
            <summary>
            Gets the entity associated with the event
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.Event.FrameworkEventHandler">
            <summary>
            Represents the method that will handle a framework event
            </summary>
            <param name="source">The source of the event</param>
            <param name="args">The event data</param>
        </member>
        <member name="T:Cenium.Framework.Component.Event.CallbackEventHandler">
            <summary>
            Represents the method that will handle a callback event
            </summary>
            <param name="args">The <see cref="T:Cenium.Framework.Component.Event.CallbackEventArgs"/>instance containing the event data.</param>
        </member>
        <member name="T:Cenium.Framework.Component.Event.RegisterEventHandlerAttribute">
            <summary>
            Registers an event handler
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.Event.RegisterEventHandlerAttribute.#ctor(System.String,Cenium.Framework.Component.Event.FrameworkEventHandler)">
            <summary>
            Initializes a new instance of the EventHandlerAttribute class
            </summary>
            <param name="eventType">The event type the event handler listens for</param>
            <param name="handler">The event handler to register</param>
        </member>
        <member name="P:Cenium.Framework.Component.Event.RegisterEventHandlerAttribute.EventType">
            <summary>
            Gets the event type the event handler listens for
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.Event.RegisterEventHandlerAttribute.Handler">
            <summary>
            Gets the event handler to register
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.Event.RegisterEventAttribute">
            <summary>
            Registers an event type.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.Event.RegisterEventAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the RegisterEventAttribute class
            </summary>
            <param name="name">The name of the event</param>
            <param name="description">The description of the event</param>
        </member>
        <member name="P:Cenium.Framework.Component.Event.RegisterEventAttribute.Name">
            <summary>
            Gets the name of the event
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.Event.RegisterEventAttribute.Description">
            <summary>
            Gets a description of the event
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.IComponentDescriptor">
            <summary>
            Represents a component version
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.IComponentDescriptor.Id">
            <summary>
            Gets the component identifier
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.IComponentDescriptor.DisplayName">
            <summary>
            Gets the formal name of the component
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.IComponentDescriptor.Description">
            <summary>
            Gets the description of the component
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.IComponentDescriptor.Remarks">
            <summary>
            Gets the remarks of the component
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.IComponentDescriptor.Version">
            <summary>
            Gets the version of the component
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.IComponentDescriptor.VersionDescription">
            <summary>
            Gets the version description of the component
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.IComponentDescriptor.MinSDKVersion">
            <summary>
            Gets the minimum SDK version for the component.
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.Interface.ActivityManager">
            <summary>
            Provides access to activities for a specified component through an IActivityFactor instance
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.Interface.ActivityManager.GetActivityFactory(System.String)">
            <summary>
            Returns an IActivityFactory instance for a given component
            </summary>
            <param name="component">The component to create the factory for</param>
            <returns>an IActivityFactory instance for a given component</returns>
        </member>
        <member name="T:Cenium.Framework.Component.Interface.ActivityProxyGetMethod`1">
            <summary>
            Represents a proxy for a Get activity method
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.Interface.ActivityProxyGetMethod`1.#ctor(Cenium.Framework.Component.Interface.EntityProxyConfiguration,System.String)">
            <summary>
            Initializes a new instance of the ActivityProxyGetMethod class
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.Interface.ActivityProxyInvokeMethod`1">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.Interface.ActivityProxyMethod`1">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.Interface.ActivityProxyMethod`1.#ctor(Cenium.Framework.Component.Interface.EntityProxyConfiguration,System.String)">
            <summary>
            Initializes a new instance of the ActivityProxyMethod class
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.Interface.ActivityProxyMethod.#ctor(Cenium.Framework.Component.Interface.EntityProxyConfiguration,System.String)">
            <summary>
            Initializes a new instance of the ActivityProxyMethod class
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.Interface.ActivityProxyMethodConfiguration">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.Interface.ActivityProxyQueryMethod`1">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.Interface.ActivityProxyQueryMethod`1.#ctor(Cenium.Framework.Component.Interface.EntityProxyConfiguration,System.String)">
            <summary>
            Initializes a new instance of the ActivityProxyQueryMethod class
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.Interface.EntityFeatures">
            <summary>
            This is an internal class and should not be used or referenced by other components.
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.Interface.EntityManager">
            <summary>
            Contains methods to access entities across component boundaries
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.Interface.EntityManager.GetEntityFactory(System.String)">
            <summary>
            Provides access to entities for a specified component through an IEntityFactory instance
            </summary>
            <param name="component">The component to get the IEntityFactory for</param>
            <returns>An IEntityFactory instance for a specified component</returns>
        </member>
        <member name="M:Cenium.Framework.Component.Interface.EntityManager.GetEntityName(System.Object)">
            <summary>
            Gets the entity name from an object
            </summary>
            <param name="obj">The object to get an entity name for</param>
            <returns>An entity name</returns>
        </member>
        <member name="M:Cenium.Framework.Component.Interface.EntityManager.GetProperties(System.Object)">
            <summary>
            Gets the properties for an object
            </summary>
            <param name="obj">The object to get properties for</param>
            <returns>An array of <c>PropertyInfo</c> instances</returns>
        </member>
        <member name="M:Cenium.Framework.Component.Interface.EntityManager.GetComponent(System.Object)">
            <summary>
            Gets the component an object belongs to
            </summary>
            <param name="obj">The object to inspect</param>
            <returns>A component name for the object, or null if it does not have a component</returns>
        </member>
        <member name="T:Cenium.Framework.Component.Interface.EntityProxyBase">
            <summary>
            Base class for creating proxy wrappers
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.Interface.EntityProxyBase.#ctor(Cenium.Framework.Component.Interface.IEntityProxy)">
            <summary>
            Initializes a new instance of the EntityProxyBase class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.Interface.EntityProxyBase.Proxy">
            <summary>
            Gets the underlying proxy instance
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.Interface.EntityProxyBase.SetValue(System.String,System.Object)">
            <summary>
            Sets a property value
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="value">The value to set</param>
        </member>
        <member name="M:Cenium.Framework.Component.Interface.EntityProxyBase.GetValue``1(System.String)">
            <summary>
            Gets a property value
            </summary>
            <typeparam name="T">The property type</typeparam>
            <param name="propertyName">Name of the property.</param>
            <returns>The value of the property</returns>
        </member>
        <member name="T:Cenium.Framework.Component.Interface.EntityProxyCollection`1">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.Interface.EntityProxyCollection`1.#ctor(System.Collections.Generic.ICollection{Cenium.Framework.Component.Interface.IEntityProxy},System.Func{Cenium.Framework.Component.Interface.IEntityProxy,`0})">
            <summary>
            Initializes a new instance of the EntityProxyCollection class
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.Interface.IActivityFactory">
            <summary>
            The IActivityFactory interface provides mechanisms to create activity instances for activities in a specified component
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.Interface.IActivityFactory.Create(System.String)">
            <summary>
            Creates an activity proxy instance
            </summary>
            <param name="name">The name of the activity</param>
            <returns>An IActivityProxy instance</returns>
        </member>
        <member name="M:Cenium.Framework.Component.Interface.IActivityFactory.IsActivityAvailable(System.String)">
            <summary>
            Returns true if a specified activity is installed, otherwise false
            </summary>
            <param name="name">The name of the activity</param>
            <returns>true if a specified activity is installed, otherwise false</returns>
        </member>
        <member name="T:Cenium.Framework.Component.Interface.IActivityProxy">
            <summary>
            Provides the mechanism for accessing an activity located in another component
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.Interface.IActivityProxy.Query(System.String)">
            <summary>
            Invokes a query method on the activity
            </summary>
            <param name="method">The name of the query method to invoke</param>
            <returns>An IEnumerable of IEntityProxy instances</returns>
        </member>
        <member name="M:Cenium.Framework.Component.Interface.IActivityProxy.Query(System.String,Cenium.Framework.Data.IQuery)">
            <summary>
            Invokes a query method on the activity
            </summary>
            <param name="method">The name of the query method to invoke</param>
            <param name="qry">The query to execute</param>
            <returns>An IEnumerable of IEntityProxy instances</returns>
        </member>
        <member name="M:Cenium.Framework.Component.Interface.IActivityProxy.Query(System.String,Cenium.Framework.Data.IQuery,System.String)">
            <summary>
            Invokes a query method on the activity
            </summary>
            <param name="method">The name of the query method to invoke</param>
            <param name="qry">The query to execute</param>
            <param name="searchExpression">The search expression to use</param>
            <returns>An IEnumerable of IEntityProxy instances</returns>
        </member>
        <member name="M:Cenium.Framework.Component.Interface.IActivityProxy.Get(System.String,System.Object[])">
            <summary>
            Invokes a Get method on the activity
            </summary>
            <param name="method">The name of the get method to invoke</param>
            <param name="args">The method arguments</param>
            <returns>An IEntityProxy instance</returns>
        </member>
        <member name="M:Cenium.Framework.Component.Interface.IActivityProxy.Create(System.String,Cenium.Framework.Component.Interface.IEntityProxy)">
            <summary>
            Invokes a Create method on the activity
            </summary>
            <param name="method">The name of the create method to invoke</param>
            <param name="entity">The IEntityProxy instance to add</param>
            <returns>A modified IEntityProxy instance</returns>
        </member>
        <member name="M:Cenium.Framework.Component.Interface.IActivityProxy.Update(System.String,Cenium.Framework.Component.Interface.IEntityProxy)">
            <summary>
            Invokes an Update method on the activity
            </summary>
            <param name="method">The name of the update method to invoke</param>
            <param name="entity">The IEntityProxy instance to update</param>
            <returns>A modified IEntityProxy instance</returns>
        </member>
        <member name="M:Cenium.Framework.Component.Interface.IActivityProxy.Delete(System.String,Cenium.Framework.Component.Interface.IEntityProxy)">
            <summary>
            Invokes a Delete method on the activity
            </summary>
            <param name="method">The name of the delete method to invoke</param>
            <param name="entity">The IEntityProxy instance to delete</param>
        </member>
        <member name="M:Cenium.Framework.Component.Interface.IActivityProxy.Invoke(System.String,System.Object[])">
            <summary>
            Invokes an Invoke method on the activity
            </summary>
            <param name="method">The name of the method to invoke</param>
            <param name="args">The method parameters</param>
            <returns>The result of the invokation</returns>
        </member>
        <member name="M:Cenium.Framework.Component.Interface.IActivityProxy.IsMethodAvailable(System.String)">
            <summary>
            Returns true if a specified method is available for the activity, otherwise false
            </summary>
            <param name="method">The name of the method to check for</param>
            <returns>true if the method is available, otherwise false</returns>
        </member>
        <member name="T:Cenium.Framework.Component.Interface.IEntityFactory">
            <summary>
            The IEntityFactory interface provides mechanisms to create entity instances for a specified component
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.Interface.IEntityFactory.Create(System.String)">
            <summary>
            Creates an entity proxy instance
            </summary>
            <param name="name">The name of the entity</param>
            <returns>An IEntityProxy instance</returns>
        </member>
        <member name="M:Cenium.Framework.Component.Interface.IEntityFactory.IsEntityAvailable(System.String)">
            <summary>
            Returns true if the entity is installed, otherwise false
            </summary>
            <param name="name">The name of the entity</param>
            <returns>true if the entity is installed, otherwise false</returns>
        </member>
        <member name="T:Cenium.Framework.Component.Interface.Internal.NamespaceDoc">
            <summary>
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.Interface.Local.FactoryBase">
            <summary>
            Base class for factory classes
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.Interface.Local.FactoryBase.#ctor(System.String)">
            <summary>
            Initializes a new instance of the FactoryBase class
            </summary>
            <param name="component">The component the factory belongs to</param>
        </member>
        <member name="P:Cenium.Framework.Component.Interface.Local.FactoryBase.Component">
            <summary>
            Gets the component id
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.Interface.Local.LocalActivity">
            <summary>
            Provides a wrapper around a locally installed activity. Note that this class is intended for internal framework use only and should never be used directly outside the framework.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.Interface.Local.LocalActivity.#ctor(System.String)">
            <summary>
            Initializes a new instance of the LocalActivity class
            </summary>
            <param name="activityType">The activity type name</param>
        </member>
        <member name="M:Cenium.Framework.Component.Interface.Local.LocalActivity.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the LocalActivity class
            </summary>
            <param name="activityType">The activity type</param>
        </member>
        <member name="M:Cenium.Framework.Component.Interface.Local.LocalActivity.InvokeQuery(System.String,Cenium.Framework.Data.IQuery)">
            <summary>
            Invokes a Query method
            </summary>
            <param name="method">The method to invoke</param>
            <param name="query">The query expression to apply</param>
            <returns>An IEnumerable of results</returns>
        </member>
        <member name="M:Cenium.Framework.Component.Interface.Local.LocalActivity.InvokeQuery(System.String,System.Object[],Cenium.Framework.Data.IQuery,System.String)">
            <summary>
            Invokes a Query method
            </summary>
            <param name="method">The method to invoke</param>
            <param name="args">The arguments to the query method</param>
            <param name="query">The query expression to apply</param>
            <param name="searchExpression">The search expression to apply</param>
            <returns>An IEnumerable of results</returns>
        </member>
        <member name="M:Cenium.Framework.Component.Interface.Local.LocalActivity.InvokeGet(System.String,System.Object[])">
            <summary>
            Invokes a Get method
            </summary>
            <param name="method">The method to invoke</param>
            <param name="args">The arguments for the method</param>
            <returns>The result of the get method</returns>
        </member>
        <member name="M:Cenium.Framework.Component.Interface.Local.LocalActivity.Invoke(System.String,System.Object[])">
            <summary>
            Invokes a method
            </summary>
            <param name="method">The method to invoke</param>
            <param name="args">The arguments for the method</param>
            <returns>The result of the method invokation</returns>
        </member>
        <member name="M:Cenium.Framework.Component.Interface.Local.LocalActivity.Dispose">
            <summary>
            Releases any managed and unmanaged resources
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.Interface.Local.LocalActivityFactory">
            <summary>
            Provides a factory for locally installed activities
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.Interface.Local.LocalActivityFactory.#ctor(System.String)">
            <summary>
            Initializes a new instance of the LocalActivityProvider class
            </summary>
            <param name="component">The component the activity belongs to</param>
        </member>
        <member name="M:Cenium.Framework.Component.Interface.Local.LocalActivityFactory.Create(System.String)">
            <summary>
            Creates a locally installed activity
            </summary>
            <param name="name">The name of the activity to create</param>
            <returns>a locally installed IActivityProxy instance</returns>
        </member>
        <member name="M:Cenium.Framework.Component.Interface.Local.LocalActivityFactory.IsActivityAvailable(System.String)">
            <summary>
            Returns true if the activity is installed, otherwise false
            </summary>
            <param name="name">The name of the activity to check for</param>
            <returns>true if the activity is installed, otherwise false</returns>
        </member>
        <member name="T:Cenium.Framework.Component.Interface.Local.LocalActivityMethodInfo">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.Interface.Local.LocalActivityMethodInfo.#ctor(System.Reflection.MethodInfo)">
            <summary>
            Initializes a new instance of the LocalActivityMethodInfo class
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.Interface.Local.LocalActivityProxy">
            <summary>
            Provides a proxy implementation for a locally installed activity
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.Interface.Local.LocalActivityProxy.#ctor(System.String,System.String,System.Type)">
            <summary>
            Initializes a new instance of the LocalActivityProxy class
            </summary>
            <param name="activityType">The activity Type</param>
            <param name="component">The component the activity belongs to</param>
            <param name="name">The name of the activity</param>
        </member>
        <member name="M:Cenium.Framework.Component.Interface.Local.LocalActivityProxy.Query(System.String)">
            <summary>
            Invokes a query method on the activity
            </summary>
            <param name="method">The name of the query method to invoke</param>
            <returns>An IEnumerable of IEntityProxy instances</returns>
        </member>
        <member name="M:Cenium.Framework.Component.Interface.Local.LocalActivityProxy.Query(System.String,Cenium.Framework.Data.IQuery)">
            <summary>
            Invokes a query method on the activity
            </summary>
            <param name="method">The name of the query method to invoke</param>
            <param name="qry">The query to execute</param>
            <returns>
            An IEnumerable of IEntityProxy instances
            </returns>
        </member>
        <member name="M:Cenium.Framework.Component.Interface.Local.LocalActivityProxy.Query(System.String,Cenium.Framework.Data.IQuery,System.String)">
            <summary>
            Invokes a query method on the activity
            </summary>
            <param name="method">The name of the query method to invoke</param>
            <param name="qry">The query to execute</param>
            <param name="searchExpression">The search expression to use</param>
            <returns>
            An IEnumerable of IEntityProxy instances
            </returns>
        </member>
        <member name="T:Cenium.Framework.Component.Interface.Local.LocalEntityFactory">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.Interface.Local.LocalEntityFactory.#ctor(System.String)">
            <summary>
            Initializes a new instance of the LocalEntityProvider class
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.Interface.Local.LocalEntityProxy">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.Interface.Local.LocalEntityProxy.#ctor(System.String,System.String,System.Type)">
            <summary>
            Initializes a new instance of the LocalEntityProxy class
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.Interface.Local.LocalEntityProxy.GetValue``1(System.String)">
            <summary>
            Gets a strongly typed value from the proxy entity, if the property is available
            </summary>
            <typeparam name="T">The value type</typeparam>
            <param name="propertyName">The name of the property</param>
            <returns>The value of the property, or default(T) if the property does not exist, is the wrong type or is null</returns>
        </member>
        <member name="M:Cenium.Framework.Component.Interface.Local.LocalEntityProxy.SetValue(System.String,System.Object)">
            <summary>
            Sets a value if the property exists
            </summary>
            <param name="propertyName">The name of the property</param>
            <param name="value">The value to set</param>
        </member>
        <member name="T:Cenium.Framework.Component.Interface.Local.LocalEntityProxyCollection">
            <summary>
            Implements a wrapper collection around an entity navigation property
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.Interface.Local.LocalEntityProxyCollection.#ctor(Cenium.Framework.Component.Interface.Local.LocalEntityProxy,System.Collections.IList)">
            <summary>
            Initializes a new instance of the LocalEntityProxyCollection class
            </summary>
            <param name="parent">The parent entity</param>
            <param name="list">The inner list containing the child entities</param>
        </member>
        <member name="M:Cenium.Framework.Component.Interface.Local.LocalEntityProxyCollection.Add(Cenium.Framework.Component.Interface.IEntityProxy)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
        </member>
        <member name="M:Cenium.Framework.Component.Interface.Local.LocalEntityProxyCollection.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.Interface.Local.LocalEntityProxyCollection.Contains(Cenium.Framework.Component.Interface.IEntityProxy)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>
            true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.
            </returns>
        </member>
        <member name="M:Cenium.Framework.Component.Interface.Local.LocalEntityProxyCollection.CopyTo(Cenium.Framework.Component.Interface.IEntityProxy[],System.Int32)">
            <summary>
            Not implemented
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:Cenium.Framework.Component.Interface.Local.LocalEntityProxyCollection.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
              </returns>
        </member>
        <member name="P:Cenium.Framework.Component.Interface.Local.LocalEntityProxyCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, false.
              </returns>
        </member>
        <member name="M:Cenium.Framework.Component.Interface.Local.LocalEntityProxyCollection.Remove(Cenium.Framework.Component.Interface.IEntityProxy)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>
            true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
        </member>
        <member name="M:Cenium.Framework.Component.Interface.Local.LocalEntityProxyCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Cenium.Framework.Component.Interface.Local.LocalEntityProxyCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:Cenium.Framework.Component.Interface.Local.LocalHelper">
            <summary>
            Contains helper methods for local activities and entity proxies
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.Interface.Local.NamespaceDoc">
            <summary>
            Provides classes for handling locally installed entities and activities
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.Interface.Local.ProxyBase">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.Interface.Local.ProxyBase.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the ProxyBase class
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.Interface.NamespaceDoc">
            <summary>
            The Cenium.Framework.Component.Interface namespace contains classes and interfaces used in cross-component communication
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.Interface.ProxyQuery">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.Interface.ProxyQuery.#ctor">
            <summary>
            Initializes a new instance of the ProxyQuery class
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.Interface.ProxyQueryable">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.Interface.ProxyQueryableImpl`1">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.Interface.ProxyQueryExpressionVisitor">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.Interface.ProxyQueryExpressionVisitor.#ctor">
            <summary>
            Initializes a new instance of the ProxyQueryExpressionVisitor class
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.Interface.ProxyQueryProvider">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.Internal.InternalComponentManager">
            <summary>
            Internal implementation of the component manager
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.Internal.InternalComponentManager.#ctor">
            <summary>
            Initializes a new instance of the InternalComponentManager class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.Internal.InternalComponentManager.Components">
            <summary>
            Gets an array of installed components as an array of IComponentDescriptor instances
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.Internal.InternalComponentManager.IsComponentInstalled(System.String)">
            <summary>
            Returns true if a specified component is installed, otherwise false
            </summary>
            <param name="id">The identifier for the component</param>
            <returns>True if the component is installed, otherwise false</returns>
        </member>
        <member name="M:Cenium.Framework.Component.Internal.InternalComponentManager.GetComponentDescriptor(System.String)">
            <summary>
            Returns an IComponentDescriptor for a specified component, or null if the component is not installed
            </summary>
            <param name="id">The identifier for the component</param>
            <returns>an IComponentDescriptor for a specified component, or null if the component is not installed</returns>
        </member>
        <member name="M:Cenium.Framework.Component.Internal.InternalComponentManager.AddComponent(Cenium.Framework.Component.IComponentDescriptor)">
            <summary>
            Adds a component
            </summary>
            <param name="descriptor">The IComponentDescriptor to add</param>
        </member>
        <member name="M:Cenium.Framework.Component.Internal.InternalComponentManager.IsEntityAvailable(System.String)">
            <summary>
            Returns true if an entity is installed, otherwise null
            </summary>
            <param name="name">The name of the entity</param>
            <returns>true if an entity is installed, otherwise null</returns>
        </member>
        <member name="M:Cenium.Framework.Component.Internal.InternalComponentManager.GetEntityType(System.String)">
            <summary>
            Gets the Type for an entity
            </summary>
            <param name="name">The entity name</param>
            <returns>The entity Type or null if the entity is not installed</returns>
        </member>
        <member name="M:Cenium.Framework.Component.Internal.InternalComponentManager.AddEntity(System.String,System.Type)">
            <summary>
            Adds an entity to the internal index
            </summary>
            <param name="component">The component the entity belongs to</param>
            <param name="type">The entity Type</param>
        </member>
        <member name="M:Cenium.Framework.Component.Internal.InternalComponentManager.IsActivityAvailable(System.String)">
            <summary>
            Returns true if an activity is installed, otherwise null
            </summary>
            <param name="name">The name of the activity</param>
            <returns>true if an activity is installed, otherwise null</returns>
        </member>
        <member name="M:Cenium.Framework.Component.Internal.InternalComponentManager.GetActivityType(System.String)">
            <summary>
            Returns the Type for an activity
            </summary>
            <param name="name">The name of the activity to get the Type for</param>
            <returns>the Type for an activity, or null if the activity is not installed</returns>
        </member>
        <member name="M:Cenium.Framework.Component.Internal.InternalComponentManager.AddActivity(System.String,System.Type)">
            <summary>
            Adds an activity Type to the internal index
            </summary>
            <param name="component">The component to add the activity for</param>
            <param name="type">The activity Type to add</param>
        </member>
        <member name="M:Cenium.Framework.Component.Internal.InternalComponentManager.AddActivities(System.String,System.Type[])">
            <summary>
            Adds multiple activity Types to the internal index
            </summary>
            <param name="component">The component to add the activity for</param>
            <param name="types">An array of the activity Type to add</param>
        </member>
        <member name="T:Cenium.Framework.Component.Internal.ComponentDescriptor">
            <summary>
            Implementation of the IComponentDescriptor
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.Internal.ComponentDescriptor.Id">
            <summary>
            Gets or sets the component identifier
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.Internal.ComponentDescriptor.DisplayName">
            <summary>
            Gets or sets the formal name of the component
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.Internal.ComponentDescriptor.Description">
            <summary>
            Gets or sets the description of the component
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.Internal.ComponentDescriptor.Remarks">
            <summary>
            Gets the remarks of the component
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.Internal.ComponentDescriptor.Version">
            <summary>
            Gets or sets the version of the component
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.Internal.ComponentDescriptor.VersionDescription">
            <summary>
            Gets the version description of the component
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.Internal.ComponentDescriptor.MinSDKVersion">
            <summary>
            Gets the minimum SDK version for the component.
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.NamespaceDoc">
            <summary>
            The Cenium.Framework.Component namespace contains classes for retriving information about components and interaction across component boundaries.
            </summary>
        </member>
    </members>
</doc>
