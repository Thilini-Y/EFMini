<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cenium.Reservations.Activities</name>
    </assembly>
    <members>
        <member name="T:Cenium.Reservations.Activities.NamespaceDoc">
            <summary>
            Contains activity classes that comprise the application processing layer of the component Reservations
            </summary>
        </member>
        <member name="T:Cenium.Reservations.Activities.ReservationActivity">
            <summary>
            The ReservationActivity class is an activity class that exposes data operation methods to the service layer. This class is responsible for applying business logic prior to making
            updates in the data store.
            </summary>
            <seealso cref="T:Cenium.Reservations.Data.Reservation"/>
            <seealso cref="T:Cenium.Reservations.Data.ReservationsEntitiesContext"/>
        </member>
        <member name="M:Cenium.Reservations.Activities.ReservationActivity.#ctor">
            <summary>
            Initializes a new instance of the ReservationActivity class
            </summary>
        </member>
        <member name="M:Cenium.Reservations.Activities.ReservationActivity.#ctor(Cenium.Reservations.Data.ReservationsEntitiesContext)">
            <summary>
            Initializes a new instance of the ReservationActivity class, sharing the context with other activities
            </summary>
            <param name="ctx">The shared context</param>
        </member>
        <member name="M:Cenium.Reservations.Activities.ReservationActivity.Query">
            <summary>
            Activity query method that returns an IEnumerable&lt;Reservation&gt; instance. 
            </summary>
            <returns>A strongly type IEnumerable instance </returns>
        </member>
        <member name="M:Cenium.Reservations.Activities.ReservationActivity.Get(System.Int64)">
            <summary>
            Gets a Reservation instance from the datastore based on Reservation keys.
            </summary>
            <param name="reservationId">The key for Reservation</param>
            <returns>A Reservation instance, or null if there is no entities with the given key</returns>
        </member>
        <member name="M:Cenium.Reservations.Activities.ReservationActivity.Create(Cenium.Reservations.Data.Reservation)">
            <summary>
            Adds a new instance of Reservation to the data store
            </summary>
            <param name="reservation">The instance to add</param>
            <returns>The created instance</returns>
        </member>
        <member name="M:Cenium.Reservations.Activities.ReservationActivity.Update(Cenium.Reservations.Data.Reservation)">
            <summary>
            Updates a Reservation instance in the data store
            </summary>
            <param name="reservation">The instance to update</param>
            <returns>The updated instance</returns>
        </member>
        <member name="M:Cenium.Reservations.Activities.ReservationActivity.Delete(Cenium.Reservations.Data.Reservation)">
            <summary>
            Deletes a Reservation instance from the data store
            </summary>
            <param name="reservation">The instance to delete</param>
        </member>
        <member name="M:Cenium.Reservations.Activities.ReservationActivity.GetFromDatastore(System.Int64)">
            <summary>
            Retrieves a single entity instance from the data store
            </summary>
            <param name="reservationId">The key for Reservation</param>
            <returns>A single Reservation instance, or null if the instance doesn't exist</returns>
        </member>
        <member name="M:Cenium.Reservations.Activities.ReservationActivity.Dispose">
            <summary>
            Releases all resources used by this ReservationActivity instance.
            </summary>
        </member>
    </members>
</doc>
