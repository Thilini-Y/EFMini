<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cenium.Framework.Client.Engine</name>
    </assembly>
    <members>
        <member name="T:Cenium.Framework.Client.AppResources.IComponentResource">
            <summary>
            Represents a component-specific resource
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.IComponentResource.Component">
            <summary>
            Gets or sets the component.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.IComponentResource.Complete">
            <summary>
            Completes the instance with translations
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.AppResources.Metadata.Enumeration">
            <summary>
            Represents an enumeration (key-value pairs).
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.Metadata.Enumeration.#ctor">
            <summary>
            Initializes a new instance of the Enumeration class
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.Metadata.Enumeration.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the Enumeration class
            </summary>
            <param name="id">The identifier associated with the enumeration</param>
            <param name="values">The key-value pairs represented as a string</param>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.Metadata.Enumeration.Values">
            <summary>
            Gets or sets the values for the enumeration
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.Metadata.Enumeration.Items">
            <summary>
            Gets the enumeration as a <c>Dictionary&lt;string,string&gt;</c> instance
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.AppResources.Metadata.MetadataEntity">
            <summary>
            Represents a metadata entity
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.Metadata.MetadataEntity.#ctor">
            <summary>
            Initializes a new instance of the MetadataEntity class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.Metadata.MetadataEntity.Properties">
            <summary>
            Gets or sets the properties associated with the entity
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.Metadata.MetadataEntity.Extensions">
            <summary>
            Gets or sets the extensions associated with the entity
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.AppResources.Metadata.MetadataExtension">
            <summary>
            Represents an extension to an entity
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.Metadata.MetadataExtension.Property">
            <summary>
            Gets or sets the property name of the extension
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.Metadata.MetadataExtension.ExtensionType">
            <summary>
            Gets or sets the extension type
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.Metadata.MetadataExtension.Parameters">
            <summary>
            Gets or sets the parameters associated with the extension
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.Metadata.MetadataExtension.CreateExtension">
            <summary>
            Creates an extension based on the definitions in the <c>MetadataExtension</c> instance
            </summary>
            <returns>An <c>IEntityPropertyExtension</c> instance</returns>
        </member>
        <member name="T:Cenium.Framework.Client.AppResources.Metadata.MetadataManager">
            <summary>
            The MetadataManager class manages metadata application resources
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.Metadata.MetadataManager.#ctor">
            <summary>
            Initializes a new instance of the MetadataManager class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.Metadata.MetadataManager.PropertyExtensions">
            <summary>
            Gets a <c>TypeReferenceCollection</c> instance containing all registered entity property extension types
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.Metadata.MetadataManager.Enumerations">
            <summary>
            Gets a <c>IResourceCollection&lt;Enumeration&gt;</c> instance containing all registered enumerations
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.Metadata.MetadataManager.Entities">
            <summary>
            Gets a <c>ResourceCollection&lt;MetadataEntity&gt;</c> instance containing all registered entity extensions
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.Metadata.MetadataManager.Inspect(System.Reflection.Assembly)">
            <summary>
            Inspects an assembly by locating any property extensions
            </summary>
            <param name="assembly">The assembly to inspect</param>
        </member>
        <member name="T:Cenium.Framework.Client.AppResources.Metadata.NamespaceDoc">
            <summary>
            The Cenium.Framework.Client.Application.ResourceModel.Metadata namespace contains types and interfaces related to metadata application resources.
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.AppResources.Metadata.MetadataResource">
            <summary>
            Represents a metadata application resource file. Note that this class is only intended for internal framework use.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.Metadata.MetadataResource.Entities">
            <summary>
            Gets or sets the <c>MetadataEntity</c> instances associated with the resource file
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.Metadata.MetadataResource.Enumerations">
            <summary>
            Gets or sets the <c>Enumeration</c> instances associated with the resource file
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.AppResources.Metadata.PropertyExtensionParameterFormat">
            <summary>
            Defines additional formatting information for an entity property extension
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.AppResources.Metadata.PropertyExtensionParameterFormat.Default">
            <summary>
            Default formatting
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.AppResources.Metadata.PropertyExtensionParameterFormat.SourceCode">
            <summary>
            The property value is C# source code
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.AppResources.Metadata.PropertyExtensionParameterFormat.KeyValuePairs">
            <summary>
            The property value is in key-value pair format
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.AppResources.Metadata.PropertyExtensionParameterFormat.ValueList">
            <summary>
            The property value is selected from a value list
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.AppResources.Metadata.PropertyExtensionParameterFormat.PropertyName">
            <summary>
            The property value is a property name
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.AppResources.Metadata.PropertyExtensionParameterInfoAttribute">
            <summary>
            Describes meta data about a property extension properties
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.Metadata.PropertyExtensionParameterInfoAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the PropertyExtensionParameterInfoAttribute class. This constructor should be used when using the attribute at assembly level
            </summary>
            <param name="extensionId">The identifier for the </param>
            <param name="propertyName">The property name for the property</param>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.Metadata.PropertyExtensionParameterInfoAttribute.#ctor">
            <summary>
            Initializes a new instance of the PropertyExtensionParameterInfoAttribute class. This constructor should be used when using the attribute at property level
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.Metadata.PropertyExtensionParameterInfoAttribute.ExtensionId">
            <summary>
            The identifier for the extension that the attribute describes
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.Metadata.PropertyExtensionParameterInfoAttribute.PropertyName">
            <summary>
            The property name that the attribute describes
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.Metadata.PropertyExtensionParameterInfoAttribute.Description">
            <summary>
            The descrition of the property that the attribute describes
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.Metadata.PropertyExtensionParameterInfoAttribute.Format">
            <summary>
            Additional formatting information
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.Metadata.PropertyExtensionParameterInfoAttribute.ValueList">
            <summary>
            Valid values for the property value
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.AppResources.Metadata.RegisterEntityPropertyExtensionAttribute">
            <summary>
            Defines a type as a entity property extension.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.Metadata.RegisterEntityPropertyExtensionAttribute.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the EntityPropertyExtensionReferenceAttribute class
            </summary>
            <param name="id">The identifier associated with the type</param>
            <param name="type">The type that implements the property extension</param>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.Metadata.RegisterEntityPropertyExtensionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the EntityPropertyExtensionReferenceAttribute class
            </summary>
            <param name="id">The identifier associated with the type</param>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.Metadata.RegisterEntityPropertyExtensionAttribute.Type">
            <summary>
            The type that implements the property extension
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.Metadata.RegisterEntityPropertyExtensionAttribute.PropertyType">
            <summary>
            Gets or sets the extension return type
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.AppResources.ResourceBase">
            <summary>
            Base class for loaded resource files
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.ResourceBase.IsEmpty">
            <summary>
            Gets a value indicating whether this instance has any resources
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.ResourceBase.Component">
            <summary>
            Gets the component the resources belongs to
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.AppResources.ResourceHelper">
            <summary>
            Contains utility methods for loading application resources from an assembly
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.AppResources.UI.DialogTarget">
            <summary>
            Represents a target for a dialog resource
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.AppResources.UI.DialogTarget.Dialog">
            <summary>
            The target is a modal dialog window
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.AppResources.UI.DialogTarget.ActionPane">
            <summary>
            The target is an action pane
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.AppResources.UI.EntityValueListBaseConfiguration">
            <summary>
            Base item for entity value list configurations
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.AppResources.UI.EntityValueListConfiguration">
            <summary>
            Represents configuration information for a value list
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.UI.EntityValueListConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cenium.Framework.Client.AppResources.UI.EntityValueListConfiguration"/> class.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.EntityValueListConfiguration.CreateMethod">
            <summary>
            Gets or sets the create method for the value list.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.EntityValueListConfiguration.GetDefaultValuesMethod">
            <summary>
            Gets or sets the method to retrieve default values.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.EntityValueListConfiguration.QuickAddLayoutReference">
            <summary>
            Gets or sets the reference to the quick-add layout template.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.UI.EntityValueListConfiguration.GetQuickAddLayoutTemplate">
            <summary>
            Gets the quick-add layout template if one is referenced; otherwise null.
            </summary>
            <returns>The quick-add layout template if one is referenced; otherwise null.</returns>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.EntityValueListVariantConfiguration.CreateMethod">
            <summary>
            Gets or sets the create method for the value list.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.EntityValueListVariantConfiguration.GetDefaultValuesMethod">
            <summary>
            Gets or sets the method to retrieve default values.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.EntityValueListVariantConfiguration.QuickAddLayoutReference">
            <summary>
            Gets or sets the reference to the quick-add layout template.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.UI.EntityValueListVariantConfiguration.GetQuickAddLayoutTemplate">
            <summary>
            Gets the quick-add layout template if one is referenced; otherwise null.
            </summary>
            <returns>The quick-add layout template if one is referenced; otherwise null.</returns>
        </member>
        <member name="T:Cenium.Framework.Client.AppResources.UI.EntityZoomConfiguration">
            <summary>
            Represents a zoom configuration application resource
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.AppResources.UI.IconGroupConfiguration">
            <summary>
            Application resource for icon groups
            </summary>
            <seealso cref="T:Cenium.Framework.Client.AppResources.ResourceItem" />
            <seealso cref="T:Cenium.Framework.Client.AppResources.IComponentResource" />
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.IconGroupConfiguration.Icons">
            <summary>
            Gets or sets the icons.
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.AppResources.UI.IconGroupRef">
            <summary>
            Represents an icon reference in an IconGroupConfiguration
            </summary>
            <seealso cref="T:Cenium.Framework.Client.AppResources.ResourceItem" />
        </member>
        <member name="T:Cenium.Framework.Client.AppResources.UI.LayoutTemplateConfiguration">
            <summary>
            Represents UI configuration for a layout template
            </summary>
            <seealso cref="T:Cenium.Framework.Client.AppResources.UI.UILayoutResourceItem" />
            <seealso cref="T:Cenium.Framework.Client.AppResources.IComponentResource" />
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.LayoutTemplateConfiguration.Columns">
            <summary>
            Gets or sets the number of columns.
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.AppResources.UI.LayoutSections">
            <summary>
            Defines standard names for layout sections
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.AppResources.UI.WidgetConfiguration">
            <summary>
            Represents configuration data for a widget
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.WidgetConfiguration.ColumnSpan">
            <summary>
            Gets or sets the default column span for the widget
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.WidgetConfiguration.MinColumnSpan">
            <summary>
            Gets or sets the minimum column span for the widget
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.WidgetConfiguration.MaxColumnSpan">
            <summary>
            Gets or sets the maximum column span for the widget
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.WidgetConfiguration.RowSpan">
            <summary>
            Gets or sets the default row span for the widget
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.WidgetConfiguration.MinRowSpan">
            <summary>
            Gets or sets the minimum row span for the widget
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.WidgetConfiguration.MaxRowSpan">
            <summary>
            Gets or sets the minimum row span for the widget
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.WidgetConfiguration.Type">
            <summary>
            Gets or sets the type for the page
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.WidgetConfiguration.IsResizable">
            <summary>
            Gets or sets a value indicating whether the widget can be resized
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.WidgetConfiguration.Model">
            <summary>
            Gets or sets the model for the widget
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.WidgetConfiguration.ModelType">
            <summary>
            Gets a TypeReferenceItem instance associated with the Model property
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.WidgetConfiguration.ModelProperties">
            <summary>
            Gets or sets the model properties
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.WidgetConfiguration.WidgetType">
            <summary>
            Gets the TypeReferenceItem instance associated with the Type property
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.UI.WidgetConfiguration.Copy">
            <summary>
            Copies this instance.
            </summary>
            <returns>A new <c>WidgetConfiguration</c> instance</returns>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.WizardConfiguration.Model">
            <summary>
            Gets or sets the model identifier
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.WizardConfiguration.ModelType">
            <summary>
            Gets a TypeReferenceItem instance for the model type (ref. Model property)
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.AppResources.UI.ActionRegionAttribute">
            <summary>
            Defines the metadata attribute used to identify action regions within a page template
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.UI.ActionRegionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ActionRegionAttribute class
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.AppResources.UI.DashletConfiguration">
            <summary>
            Represents the configuration of a dashboard item
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.UI.DashletConfiguration.#ctor">
            <summary>
            Initializes a new instance of the DashboardConfigurationModelInfo class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.DashletConfiguration.Icon">
            <summary>
            Gets or sets the icon for the dashlet
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.DashletConfiguration.Model">
            <summary>
            Gets or sets the model for the dashlet
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.DashletConfiguration.Type">
            <summary>
            Gets or sets the type for the page
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.DashletConfiguration.IsResizable">
            <summary>
            Gets or sets if the dashlet can be resized by the user
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.DashletConfiguration.ModelProperties">
            <summary>
            Gets or sets the model properties
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.DashletConfiguration.ConfigurationProperties">
            <summary>
            Gets or sets the configuration model properties
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.DashletConfiguration.ModelType">
            <summary>
            Gets a TypeReferenceItem instance associated with the Model property
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.DashletConfiguration.DashletType">
            <summary>
            Gets the TypeReferenceItem instance associated with the Type property
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.AppResources.UI.DashletConfigurationPropertyInfo">
            <summary>
            Represents property information in a dashboard configuration model
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.UI.DashletConfigurationPropertyInfo.#ctor">
            <summary>
            Initializes a new instance of the DashboardConfigurationModelPropertyInfo class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.DashletConfigurationPropertyInfo.IsRequired">
            <summary>
            Gets or sets if the value is required
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.DashletConfigurationPropertyInfo.Target">
            <summary>
            Gets or sets the target for the configuration property
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.DashletConfigurationPropertyInfo.TargetProperty">
            <summary>
            Gets or sets the property name that the configuration property is linked to
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.DashletConfigurationPropertyInfo.NullValue">
            <summary>
            Gets or sets the value that will be treated as a null value
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.AppResources.UI.ActionCondition">
            <summary>
            Represents a condition for when an action is available
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.UI.ActionCondition.#ctor">
            <summary>
            Initializes a new instance of the ActionCondition class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.ActionCondition.PropertyName">
            <summary>
            Gets or sets the name of property the condition is tested against
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.ActionCondition.Operator">
            <summary>
            Gets or sets the operator for the condition
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.ActionCondition.Value">
            <summary>
            Gets or sets the value for when the condition is true
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.AppResources.UI.ActionConditionOperator">
            <summary>
            Defines condition operators for action items
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.AppResources.UI.ActionConditionOperator.Equals">
            <summary>
            Value equals operand
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.AppResources.UI.ActionConditionOperator.In">
            <summary>
            Value is in the list of operands
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.AppResources.UI.ActionConditionOperator.IsNull">
            <summary>
            Value is null
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.AppResources.UI.ActionConditionOperator.IsNotNull">
            <summary>
            Value is not null
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.AppResources.UI.ActionItem">
            <summary>
            Represents an action. Actions are UI elements the user can interact with to perform a specific operation
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.UI.ActionItem.#ctor">
            <summary>
            Initializes a new instance of the ActionItem class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.ActionItem.Label">
            <summary>
            Gets or sets the label for the action item
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.ActionItem.Description">
            <summary>
            Gets or sets the description for the action item
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.ActionItem.Type">
            <summary>
            Gets or sets the type that implements the action (i.e. the identifier associated with the action)
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.ActionItem.DisplayType">
            <summary>
            Gets or sets the display type; the display type determines in what region of the page the action is rendered
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.ActionItem.ActionGroup">
            <summary>
            Gets or sets the group the action belongs to; action items that belongs to the same display type and group are rendered together
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.ActionItem.ControlType">
            <summary>
            Gets or set the control type for the action, i.e. the control that renders the action
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.ActionItem.Icon">
            <summary>
            Gets or sets the icon associated with the action
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.ActionItem.Conditions">
            <summary>
            Gets or sets the conditions for when the action is enabled
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.ActionItem.TypeReference">
            <summary>
            Gets the <c>TypeReferenceItem</c> instance associated with the action item
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.AppResources.UI.BindingProperty">
            <summary>
            Defines a data binding
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.UI.BindingProperty.#ctor">
            <summary>
            Initializes a new instance of the BindingProperty class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.BindingProperty.Property">
            <summary>
            Gets or sets the target property name
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.BindingProperty.BindTo">
            <summary>
            Gets or sets the value to bind to
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.BindingProperty.IsReadOnly">
            <summary>
            Gets or sets if the binding is a read-only binding (i.e. read-only = one-way; otherwise two-way)
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.BindingProperty.BindingMode">
            <summary>
            Gets or sets the binding mode.
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.AppResources.UI.DashletConfigurationPropertyTarget">
            <summary>
            Defines the possible target types for a configuration property
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.AppResources.UI.DashletConfigurationPropertyTarget.Model">
            <summary>
            Target is the model
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.AppResources.UI.DashletConfigurationPropertyTarget.QueryParameter">
            <summary>
            Target is the model query parameters
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.AppResources.UI.DashletConfigurationPropertyTarget.Pane">
            <summary>
            Target is the pane
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.AppResources.UI.DialogConfiguration">
            <summary>
            Represents a configuration item for a dialog window
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.DialogConfiguration.Icon">
            <summary>
            Gets or sets the icon for the dialog
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.DialogConfiguration.ShowApplyButton">
            <summary>
            Gets or sets if the dialog should show the Apply button
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.DialogConfiguration.IsReadOnly">
            <summary>
            Gets or sets if the dialog is a read-only dialog
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.DialogConfiguration.ShowHeader">
            <summary>
            Gets or sets if the dialog should show a dialog header
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.DialogConfiguration.ContentPanel">
            <summary>
            Gets or sets the content panel identifier
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.DialogConfiguration.Model">
            <summary>
            Gets or sets the model identifier
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.DialogConfiguration.ModelInstance">
            <summary>
            Gets or sets the ModelInstanceType. This determines how the model is instantiated
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.DialogConfiguration.ContentPaneType">
            <summary>
            Gets a TypeReferenceItem instance for the content pane type (ref. ContentPanel property)
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.DialogConfiguration.ModelType">
            <summary>
            Gets a TypeReferenceItem instance for the model type (ref. Model property)
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.AppResources.UI.DialogDataModelInstanceType">
            <summary>
            Determines how the data model is instantiated
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.AppResources.UI.DialogDataModelInstanceType.New">
            <summary>
            Data model is a new instance
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.AppResources.UI.DialogDataModelInstanceType.Owner">
            <summary>
            Data model is transferred from the dialog owner
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.AppResources.UI.DialogDataModelInstanceType.OwnerCopy">
            <summary>
            Data model is transferred from the dialog owner and copied.
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.AppResources.UI.IActionRegion">
            <summary>
            Represents information about an action region within a page layout template
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.IActionRegion.Id">
            <summary>
            Gets the identifier for the region
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.IActionRegion.DisplayName">
            <summary>
            Gets the display name for the region
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.IActionRegion.Description">
            <summary>
            Gets the description for the region
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.AppResources.UI.IPageLayoutTemplate">
            <summary>
            Represents information about a layout page template
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.IPageLayoutTemplate.ActionRegions">
            <summary>
            Gets the pre-defined regions where actions can be placed
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.AppResources.UI.ILayoutRegion">
            <summary>
            Represents information about a layout region within a layout template
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.ILayoutRegion.Id">
            <summary>
            Gets the identifier for the region
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.ILayoutRegion.DisplayName">
            <summary>
            Gets the display name for the region
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.ILayoutRegion.Description">
            <summary>
            Gets the description for the region
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.ILayoutRegion.ItemType">
            <summary>
            Gets the item types that the region will accept
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.AppResources.UI.ILayoutTemplate">
            <summary>
            Represents information about a layout template (page, pane or dialog types)
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.ILayoutTemplate.Id">
            <summary>
            Gets the identifier for the layout template
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.ILayoutTemplate.DisplayName">
            <summary>
            Gets the display name for the layout template
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.ILayoutTemplate.Description">
            <summary>
            Gets the description associated with the layout template
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.ILayoutTemplate.IsPrivate">
            <summary>
            Gets if the layout template is private, i.e. should not be visible to external tools
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.ILayoutTemplate.SupportCustomRegions">
            <summary>
            Gets whether the layout template supports custom regions or not
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.ILayoutTemplate.CustomRegionItemType">
            <summary>
            Gets the item type that a custom region will accept
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.ILayoutTemplate.Regions">
            <summary>
            Gets the pre-defined regions within a layout template.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.ILayoutTemplate.Properties">
            <summary>
            Gets information about supported properties
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.AppResources.UI.IModelInfo">
            <summary>
            Explain the purpose of the interface here
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.AppResources.UI.IModelPropertyInfo">
            <summary>
            Explain the purpose of the interface here
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.AppResources.UI.ItemAlignment">
            <summary>
            Defines how a layout item is aligned
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.AppResources.UI.ItemAlignment.Default">
            <summary>
            Use the items default alignment
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.AppResources.UI.ItemAlignment.Left">
            <summary>
            Left align
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.AppResources.UI.ItemAlignment.Right">
            <summary>
            Right align
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.AppResources.UI.LayoutRegionAttribute">
            <summary>
            Defines the metadata attribute used to identify layout regions within a layout template class
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.UI.LayoutRegionAttribute.#ctor(System.String,System.String,Cenium.Framework.Client.AppResources.UI.LayoutRegionItemType)">
            <summary>
            Initializes a new instance of the LayoutRegionAttribute class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.LayoutRegionAttribute.ItemType">
            <summary>
            Gets the valid item type for the region
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.AppResources.UI.LayoutRegionItemType">
            <summary>
            Defines valid item types for a layout region
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.AppResources.UI.LayoutRegionItemType.Any">
            <summary>
            The region supports any item type
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.AppResources.UI.LayoutRegionItemType.Column">
            <summary>
            The region only support column controls
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.AppResources.UI.LayoutRegionItemType.Control">
            <summary>
            The region only support controls (item + pane controls)
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.AppResources.UI.LayoutResourceAttribute">
            <summary>
            Base class for registering application resource implementation classes that also implements the layout concept
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.UI.LayoutResourceAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the LayoutResourceAttribute class
            </summary>
            <param name="id">The identifier associated with the resource</param>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.LayoutResourceAttribute.SupportCustomRegions">
            <summary>
            Gets or sets if the page supports custom regions
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.LayoutResourceAttribute.CustomRegionItemType">
            <summary>
            Gets or sets the item type for custom regions
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.LayoutResourceAttribute.IsPrivate">
            <summary>
            Gets or sets if the resource is private or not
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.AppResources.UI.ModelPropertySubType">
            <summary>
            Explain the purpose of the enumeration here
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.AppResources.UI.PageConfiguration">
            <summary>
            Represents the configuration of a page
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.UI.PageConfiguration.#ctor">
            <summary>
            Initializes a new instance of the PageConfiguration class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.PageConfiguration.Icon">
            <summary>
            Gets or sets the icon for the page
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.PageConfiguration.Model">
            <summary>
            Gets or sets the model for the page
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.PageConfiguration.Type">
            <summary>
            Gets or sets the type for the page
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.PageConfiguration.ModelProperties">
            <summary>
            Gets or sets the model properties
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.PageConfiguration.Actions">
            <summary>
            Gets or sets the action items associated with the page
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.PageConfiguration.EditHandler">
            <summary>
            Gets or sets the edit handler associated with the page. The edit handler refers to an action id that will be called by the page on edit.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.PageConfiguration.ModelType">
            <summary>
            Gets a TypeReferenceItem instance associated with the Model property
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.PageConfiguration.PageType">
            <summary>
            Gets the TypeReferenceItem instance associated with the Type property
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.AppResources.UI.LayoutItem">
            <summary>
            Represents a single layout item, usually a UI control
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.UI.LayoutItem.#ctor">
            <summary>
            Initializes a new instance of the PageLayoutItem class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.LayoutItem.Label">
            <summary>
            Gets or sets the label for the UI resource
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.LayoutItem.Type">
            <summary>
            Gets or sets the item type (control identifier)
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.LayoutItem.Width">
            <summary>
            Gets or sets the width of the item
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.LayoutItem.EmptyValue">
            <summary>
            Gets or sets the value to display when the source value is null or empty
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.LayoutItem.ValueList">
            <summary>
            Gets or sets the value list
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.LayoutItem.EnabledWhen">
            <summary>
            Gets or sets an expression for when the item is enabled
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.LayoutItem.IsReadOnly">
            <summary>
            Gets or sets if the item is read-only
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.LayoutItem.Row">
            <summary>
            Gets or sets the row for the item
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.LayoutItem.Column">
            <summary>
            Gets or sets the column for the item
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.LayoutItem.RowSpan">
            <summary>
            Gets or sets the row span for the item
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.LayoutItem.ColumnSpan">
            <summary>
            Gets or sets the column span for the item
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.LayoutItem.LabelVisibility">
            <summary>
            Gets or sets if a label should be shown.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.LayoutItem.BindingType">
            <summary>
            Gets or sets the binding type for the item
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.LayoutItem.Alignment">
            <summary>
            Gets or sets how the item is aligned
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.LayoutItem.Bindings">
            <summary>
            Gets or sets additional data bindings for the item
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.AppResources.UI.LayoutSection">
            <summary>
            Represents a layout section for a UI element
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.UI.LayoutSection.#ctor">
            <summary>
            Initializes a new instance of the LayoutSection class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.LayoutSection.Label">
            <summary>
            Gets or sets the label for the section
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.LayoutSection.IsReadOnly">
            <summary>
            Gets or sets if the section is read-only. Note that a read-only section overrides any items and all items become read-only. Default is false.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.LayoutSection.Items">
            <summary>
            Gets or sets the items for the layout section
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.LayoutSection.IsEmpty">
            <summary>
            Returns true if the section has no items; otherwise false
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.AppResources.UI.PaneConfiguration">
            <summary>
            A PaneConfiguration defines a composite UI element that can be used as if it were a layout control in dialogs and pages.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.UI.PaneConfiguration.#ctor">
            <summary>
            Initializes a new instance of the PaneConfiguration class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.PaneConfiguration.Columns">
            <summary>
            Gets or sets the number of columns to display
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.PaneConfiguration.Rows">
            <summary>
            Gets or sets the number of rows to display
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.PaneConfiguration.Type">
            <summary>
            Gets or sets a type reference
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.PaneConfiguration.TypeReference">
            <summary>
            Gets a type reference for the pane
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.AppResources.UI.RegisterActionTypeAttribute">
            <summary>
            Defines a class as a action type and associates the type with an identifier
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.AppResources.UI.RegisterActionTypeAttribute.DefaultGroup">
            <summary>
            Default category
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.AppResources.UI.RegisterActionTypeAttribute.PropertyGroup">
            <summary>
            Category for actions that change property values
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.AppResources.UI.RegisterActionTypeAttribute.DialogGroup">
            <summary>
            Category for actions that opens dialogs windows
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.AppResources.UI.RegisterActionTypeAttribute.ModelGroup">
            <summary>
            Category for actions that operate on data models
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.UI.RegisterActionTypeAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the RegisterActionTypeAttribute class
            </summary>
            <param name="id">The identifier associated with the action</param>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.RegisterActionTypeAttribute.Category">
            <summary>
            Gets or sets the category the action type belongs to. Category is used by external tools to group action items
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.AppResources.UI.RegisterContentPaneTypeAttribute">
            <summary>
            Register a control as a content pane type
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.UI.RegisterContentPaneTypeAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the RegisterContentPaneType class
            </summary>
            <param name="id">The identifier associated with the content pane</param>
        </member>
        <member name="T:Cenium.Framework.Client.AppResources.UI.RegisterLayoutPaneTypeAttribute">
            <summary>
            Register a control as a layout pane type
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.UI.RegisterLayoutPaneTypeAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the RegisterLayoutPaneTypeAttribute class
            </summary>
            <param name="id">The identifier associated with the layout pane</param>
        </member>
        <member name="T:Cenium.Framework.Client.AppResources.UI.RegisterModelTypeAttribute">
            <summary>
            Registers a class as a model type
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.UI.RegisterModelTypeAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the RegisterModelTypeAttribute class
            </summary>
            <param name="id">The identifier associated with the model type</param>
        </member>
        <member name="T:Cenium.Framework.Client.AppResources.UI.RegisterModelTypePropertyAttribute">
            <summary>
            Registers information about a model type property
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.UI.RegisterModelTypePropertyAttribute.#ctor">
            <summary>
            Initializes a new instance of the RegisterModelTypePropertyAttribute class
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.UI.RegisterModelTypePropertyAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the RegisterModelTypePropertyAttribute class. Use this constructor when setting the attribute on the class definition
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.RegisterModelTypePropertyAttribute.PropertyName">
            <summary>
            Gets or sets the name of the property
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.RegisterModelTypePropertyAttribute.DisplayName">
            <summary>
            Gets or sets a display friendly name for the property
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.RegisterModelTypePropertyAttribute.Description">
            <summary>
            Gets or sets a description for the property
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.RegisterModelTypePropertyAttribute.Category">
            <summary>
            Gets or sets the category
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.RegisterModelTypePropertyAttribute.SubType">
            <summary>
            Gets or sets the sub type for the property
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.AppResources.UI.RegisterPageTypeAttribute">
            <summary>
            Defines a class as a page type and associates the type with an identifier
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.UI.RegisterPageTypeAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the RegisterPageTypeAttribute class
            </summary>
            <param name="id">The identifier associated with the page type</param>
        </member>
        <member name="T:Cenium.Framework.Client.AppResources.UI.UILayoutResourceItem">
            <summary>
            Base class for ui elements that implements a layout section
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.UI.UILayoutResourceItem.#ctor">
            <summary>
            Initializes a new instance of the UILayoutResourceItem class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.UILayoutResourceItem.Name">
            <summary>
            Gets or sets the name of the ui item
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.UILayoutResourceItem.Description">
            <summary>
            Gets or sets the description for the ui item
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.UILayoutResourceItem.IsVisible">
            <summary>
            Gets or sets if the item is visible
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.UILayoutResourceItem.IsInternal">
            <summary>
            Gets or sets a value indicating whether this item is an internal item.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.UILayoutResourceItem.LayoutSections">
            <summary>
            Gets or sets the layout sections for the ui item
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.AppResources.UI.UIPropertyResourceItem">
            <summary>
            Base class for UI resource items that implements properties
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.UI.UIPropertyResourceItem.#ctor">
            <summary>
            Initializes a new instance of the UIResourceItem class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.UIPropertyResourceItem.Properties">
            <summary>
            Gets or sets the properties for the UI element
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.AppResources.UI.UIResource">
            <summary>
            Represents a UI application resource file. Note that this class is only intended for internal framework use.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.UIResource.Dialogs">
            <summary>
            Gets or sets the <c>DialogConfiguration</c> instances associated with the resource file
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.UIResource.Wizards">
            <summary>
            Gets or sets the <c>WizardConfiguration</c> instances associated with the resource file
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.UIResource.Pages">
            <summary>
            Gets or sets the <c>PageConfiguration</c> instances associated with the resource file
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.UIResource.Panes">
            <summary>
            Gets or sets the <c>PaneConfiguration</c> instances associated with the resource file
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.UIResource.Dashlets">
            <summary>
            Gets or sets the <c>DashletConfiguration</c> instances associated with the resource file
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.UIResource.Extensions">
            <summary>
            Gets or sets the <c>LayoutExtensionConfiguration</c> instances associated with the resource file
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.UIResource.ActionExtensions">
            <summary>
            Gets or sets the <c>ActionExtensionConfiguration</c> instances associated with the resource file
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.AppResources.UI.UIResourceManager">
            <summary>
            The UIResourceManager class manages UI application resources
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.UI.UIResourceManager.#ctor">
            <summary>
            Initializes a new instance of the UIResourceManager class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.UIResourceManager.ActionTypes">
            <summary>
            Gets a <c>TypeReferenceCollection</c> instance containing all registered action types
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.UIResourceManager.ModelTypes">
            <summary>
            Gets a <c>TypeReferenceCollection</c> instance containing all registered model types
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.UIResourceManager.ContentPaneTypes">
            <summary>
            Gets a <c>TypeReferenceCollection</c> instance containing all registered content pane types
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.UIResourceManager.LayoutPaneTypes">
            <summary>
            Gets a <c>TypeReferenceCollection</c> instance containing all registered layout pane types
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.UIResourceManager.PageTypes">
            <summary>
            Gets a <c>TypeReferenceCollection</c> instance containing all registered page types
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.UIResourceManager.Pages">
            <summary>
            Gets an <c>IResourceCollection&lt;PageConfiguration&gt;</c> instance containing all registered pages.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.UIResourceManager.Dialogs">
            <summary>
            Gets an <c>IResourceCollection&lt;DialogConfiguration&gt;</c> instance containing all registered dialogs.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.UIResourceManager.Wizards">
            <summary>
            Gets an <c>IResourceCollection&lt;WizardConfiguration&gt;</c> instance containing all registered wizards.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.UIResourceManager.Widgets">
            <summary>
            Gets an <c>IResourceCollection&lt;WidgetConfiguration&gt;</c> instance containing all registered widgets.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.UIResourceManager.LayoutTemplates">
            <summary>
            Gets an <c>IResourceCollection&lt;LayoutTemplateConfiguration&gt;</c> instance containing all registered widgets.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.UIResourceManager.Panes">
            <summary>
            Gets an <c>IResourceCollection&lt;PaneConfiguration&gt;</c> instance containing all registered panes.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.UI.UIResourceManager.Dashlets">
            <summary>
            Gets an <c>IResourceCollection&lt;DashletConfiguration&gt;</c> instance containing all registered dashlets.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.UI.UIResourceManager.GetModelInfo(System.String)">
            <summary>
            Gets metadata about a model type
            </summary>
            <param name="id">The identifier for the model</param>
            <returns>An <c>IModelInfo</c> instance</returns>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.UI.UIResourceManager.GetPageInfo(System.String)">
            <summary>
            Gets metadata about a page type
            </summary>
            <param name="id">The identifier for the page</param>
            <returns>A <c>ILayoutTemplate</c> instance</returns>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.UI.UIResourceManager.GetPaneInfo(System.String)">
            <summary>
            Gets metadata about a pane type
            </summary>
            <param name="id">The identifier for the pane type</param>
            <returns>A <c>ILayoutTemplate</c> instance</returns>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.UI.UIResourceManager.GetContentPaneInfo(System.String)">
            <summary>
            Gets metadata about a content pane type
            </summary>
            <param name="id">The identifier for the content pane type</param>
            <returns>A <c>ILayoutTemplate</c> instance</returns>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.UI.UIResourceManager.Inspect(System.Reflection.Assembly)">
            <summary>
            Called when the application resource mananager loads an assembly
            </summary>
            <param name="assembly">The assembly that was loaded</param>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.UI.UIResourceManager.LoadResource(Cenium.Framework.Client.AppResources.ResourceLoader.ResourceEntry)">
            <summary>
            Called when a resource need to be loaded by the resource manager
            </summary>
            <param name="entry">The resource entry to load</param>
        </member>
        <member name="T:Cenium.Framework.Client.AppResources.UI.ItemBindingType">
            <summary>
            Defines how the control binds to the backing model
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.AppResources.UI.ItemBindingType.Default">
            <summary>
            Use the default binding type for the control
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.AppResources.UI.ItemBindingType.PropertyName">
            <summary>
            Bind to property name
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.AppResources.UI.ItemBindingType.Item">
            <summary>
            Bind to the item
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.AppResources.UI.ItemBindingType.Child">
            <summary>
            Bind to a child item
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.AppResources.UI.ItemBindingType.NoBinding">
            <summary>
            Do not use data binding
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.AppResources.UI.ItemLabelVisibility">
            <summary>
            Defines how labels should be displayed
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.AppResources.UI.ItemLabelVisibility.Default">
            <summary>
            Use default display mode for the item
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.AppResources.UI.ItemLabelVisibility.Visible">
            <summary>
            Label is visible
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.AppResources.UI.ItemLabelVisibility.Hidden">
            <summary>
            Label is hidden
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.AppResources.UI.ItemLabelVisibility.Collapsed">
            <summary>
            Label is hidden. The control will be left-aligned to the space of the label
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.AppResources.ApplicationResourceAttribute">
            <summary>
            Base class for registering application resource implementation classes
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.ApplicationResourceAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ApplicationResourceAttribute class
            </summary>
            <param name="id">The identifier associated with the resource</param>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.ApplicationResourceAttribute.DisplayName">
            <summary>
            Gets or sets the display name for the application resource
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.ApplicationResourceAttribute.Description">
            <summary>
            Gets or sets the description for the application resource
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.AppResources.AppResourceManager">
            <summary>
            This class contains methods to manage and retrieve all application resources
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.AppResourceManager.#ctor">
            <summary>
            Initializes a new instance of the AppResourceManager class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.AppResourceManager.Metadata">
            <summary>
            Gives access to the metadata application resources. This property will always return a value
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.AppResourceManager.Navigator">
            <summary>
            Gives access to the navigator application resources. This property will always return a value
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.AppResourceManager.UIResources">
            <summary>
            Gives access to the ui application resources. This property will always return a value
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.AppResourceManager.Initialize">
            <summary>
            Initialized the AppResourceManager instance by loading resources from all assemblies in the path
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.AppResourceManager.Inspect(Cenium.Framework.Client.AppResources.ResourceManagerBase[],Cenium.Framework.Client.AppResources.ResourceLoader,System.Reflection.Assembly)">
            <summary>
            Inspects an assembly to load application resources from that assembly
            </summary>
            <param name="loader">The resource loader</param>
            <param name="assembly">The assembly to inspect</param>
            <param name="managers">An array of resource manager instances</param>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.AppResourceManager.RegisterValueItemTypeConverters(System.Reflection.Assembly)">
            <summary>
            Registers type converters for use with <c>ValueItem</c> classes
            </summary>
            <param name="assembly">The assembly to inspect</param>
        </member>
        <member name="F:Cenium.Framework.Client.AppResources.AppResourceManager._current">
            <summary>
            Finds an assembly in the sub-directories of the application
            </summary>
            <param name="dirs">The directories to search</param>
            <param name="name">The name of the assembly to look for</param>
            <returns>The path to the assembly, or null if not found</returns>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.AppResourceManager.Current">
            <summary>
            Gets the current <c>AppResourceManager</c> instance.
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.AppResources.IResourceInitializer">
            <summary>
            Defines a mechanism for injecting additional processing during resource initialization
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.AppResources.AppResourceType">
            <summary>
            Defines available application resource types
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.AppResources.AppResourceType.Metadata">
            <summary>
            Metadata application resource
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.AppResources.AppResourceType.Navigator">
            <summary>
            Navigator application resource
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.AppResources.AppResourceType.UI">
            <summary>
            UI application resource
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.AppResources.IndexedResourceCollection`1">
            <summary>
            Contains an indexed collection of resource items. This collection is thread safe
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.IndexedResourceCollection`1.#ctor(System.String,System.Func{System.String,System.Collections.Generic.IReadOnlyCollection{`0}})">
            <summary>
            Initializes a new instance of the ResourceCollection class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.IndexedResourceCollection`1.CollectionName">
            <summary>
            Gets the name of the collection
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.IndexedResourceCollection`1.Find(System.String)">
            <summary>
            Finds a resource item with the associated identifier
            </summary>
            <param name="id">The identifier associated with the resource item</param>
            <returns>The associated resource item, or null if the item does not exist.</returns>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.IndexedResourceCollection`1.Add(`0)">
            <summary>
            Adds a resource item to the collection
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.IndexedResourceCollection`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds a range of items to the collection
            </summary>
            <param name="items">The array of items to add</param>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.IndexedResourceCollection`1.Remove(System.String)">
            <summary>
            Removes the resource item with the specified identifier.
            </summary>
            <param name="id">The identifier of the item to remove</param>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.IndexedResourceCollection`1.Contains(System.String)">
            <summary>
            Returns true if the collection contains an entry with the associated id; otherwise false
            </summary>
            <param name="id">The identifier to check for</param>
            <returns>true if the collection contains an entry with the associated id; otherwise false</returns>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.IndexedResourceCollection`1.Count">
            <summary>
            Gets the number of items in the collection
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.IndexedResourceCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.IndexedResourceCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.IndexedResourceCollection`1.OnItemAdded(`0)">
            <summary>
            Called when an item is added to the collection
            </summary>
            <param name="item">The item that was added</param>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.IndexedResourceCollection`1.OnItemRemoved(`0)">
            <summary>
            Called when an item is removed from the collection
            </summary>
            <param name="item">The item that was removed</param>
        </member>
        <member name="T:Cenium.Framework.Client.AppResources.ResourceLoader">
            <summary>
            Loads application resource files from an assembly
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.ResourceLoader.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ResourceLoader class
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.ResourceLoader.GetResources(System.Reflection.Assembly)">
            <summary>
            Returns all the application resources contained in an assembly
            </summary>
            <param name="assembly">The assembly to get the application resources for</param>
            <returns>An <c>AssemblyResourceCollection</c> instance</returns>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.ResourceLoader.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.AppResources.IResourceCollection`1">
            <summary>
            Defines the interface for a collection of <c>ResourceItem</c> instances
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.IResourceCollection`1.CollectionName">
            <summary>
            Gets the name of the collection
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.IResourceCollection`1.Find(System.String)">
            <summary>
            Finds a resource item with the associated identifier
            </summary>
            <param name="id">The identifier associated with the resource item</param>
            <returns>The associated resource item, or null if the item does not exist.</returns>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.IResourceCollection`1.Add(`0)">
            <summary>
            Adds a resource item to the collection
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.IResourceCollection`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds a range of items to the collection
            </summary>
            <param name="items">The array of items to add</param>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.IResourceCollection`1.Remove(System.String)">
            <summary>
            Removes a resource from the collection
            </summary>
            <param name="id">The identifier of the item to remove</param>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.IResourceCollection`1.Contains(System.String)">
            <summary>
            Returns true if the collection contains an entry with the associated id; otherwise false
            </summary>
            <param name="id">The identifier to check for</param>
            <returns>true if the collection contains an entry with the associated id; otherwise false</returns>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.IResourceCollection`1.Count">
            <summary>
            Gets the number of items in the collection
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.IResourceCollection`1.GetByComponent(System.String)">
            <summary>
            Gets the resources that belongs to a specific component
            </summary>
            <param name="component">The component to get the resources for.</param>
            <returns>A read-only collection of resource items</returns>
        </member>
        <member name="T:Cenium.Framework.Client.AppResources.IResourceItem">
            <summary>
            Defines a basic resource item
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.IResourceItem.Id">
            <summary>
            Gets the identifier for the resource item
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.AppResources.IStaticResourceCollection`1">
            <summary>
            Explain the purpose of the interface here
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.IStaticResourceCollection`1.Find(System.String)">
            <summary>
            Finds a resource item with the associated identifier
            </summary>
            <param name="id">The identifier associated with the resource item</param>
            <returns>The associated resource item, or null if the item does not exist.</returns>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.IStaticResourceCollection`1.Contains(System.String)">
            <summary>
            Returns true if the collection contains an entry with the associated id; otherwise false
            </summary>
            <param name="id">The identifier to check for</param>
            <returns>true if the collection contains an entry with the associated id; otherwise false</returns>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.IStaticResourceCollection`1.Count">
            <summary>
            Gets the number of items in the collection
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.AppResources.NamespaceDoc">
            <summary>
            The Cenium.Framework.Client.Application.ResourceModel namespace contains types and interfaces related to client application resources
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.AppResources.Navigator.NavigatorCategory">
            <summary>
            Represents a navigator category
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.Navigator.NavigatorCategory.#ctor">
            <summary>
            Initializes a new instance of the NavigatorCategory class
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.Navigator.NavigatorCategory.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the NavigatorCategory class
            </summary>
            <param name="id">The identifier for the category</param>
            <param name="name">The name of the category</param>
            <param name="icon">The icon associated with the category</param>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.Navigator.NavigatorCategory.Icon">
            <summary>
            Gets or sets the icon associated with the navigator
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.AppResources.Navigator.NavigatorModelChangedEventHandler">
            <summary>
            Represents the method that handles the ModelChanged event
            </summary>
            <param name="sender">The source of the event</param>
            <param name="args">An <c>NavigatorModelChangedEventArgs</c> that contains the event data</param>
        </member>
        <member name="T:Cenium.Framework.Client.AppResources.Navigator.NavigatorModelChangedEventArgs">
            <summary>
            Provides data for the ModelChanged event
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.Navigator.NavigatorModelChangedEventArgs.#ctor(Cenium.Framework.Client.AppResources.Navigator.NavigationModelChangedAction,Cenium.Framework.Client.AppResources.Navigator.NavigatorItemType,Cenium.Framework.Client.AppResources.Navigator.NavigatorItem)">
            <summary>
            Creates a new instance of the <c>NavigatorModelChangedEventArgs</c> class
            </summary>
            <param name="action">The action that occured</param>
            <param name="itemType">The navigator type</param>
            <param name="item">The item that raised the event</param>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.Navigator.NavigatorModelChangedEventArgs.Action">
            <summary>
            Gets the action that occured
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.Navigator.NavigatorModelChangedEventArgs.Item">
            <summary>
            Gets the item that raised the event
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.Navigator.NavigatorModelChangedEventArgs.ItemType">
            <summary>
            Gets the navigator item type
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.AppResources.Navigator.NavigationModelChangedAction">
            <summary>
            Defines the navigator event actions
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.AppResources.Navigator.NavigationModelChangedAction.Add">
            <summary>
            An item was added to the navigator
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.AppResources.Navigator.NavigationModelChangedAction.Remove">
            <summary>
            An item was removed from the navigator
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.AppResources.Navigator.NavigationModelChangedAction.Refresh">
            <summary>
            Refresh
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.AppResources.Navigator.NavigatorItemType">
            <summary>
            Defines the navigator item types
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.AppResources.Navigator.NavigatorItemType.Entry">
            <summary>
            The item is a standard item
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.AppResources.Navigator.NavigatorItemType.Favorite">
            <summary>
            The item is a favorite item
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.AppResources.Navigator.NavigatorItemType.Dashboard">
            <summary>
            The item is a dashboard item
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.AppResources.Navigator.NavigatorItem">
            <summary>
            Represents a navigator entry
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.Navigator.NavigatorItem.#ctor">
            <summary>
            Initializes a new instance of the NavigatorItem class
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.Navigator.NavigatorItem.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the NavigatorItem class
            </summary>
            <param name="id">The identifier of the entry</param>
            <param name="name">The name of the entry</param>
            <param name="categoryId">The category the entry belongs to</param>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.Navigator.NavigatorItem.CategoryId">
            <summary>
            Gets or sets the category the entry belongs to
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.Navigator.NavigatorItem.Page">
            <summary>
            Gets or sets the page the entry belongs to
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.Navigator.NavigatorItem.Tags">
            <summary>
            Gets or sets a whitspace delimited list of searchable keywords
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.Navigator.NavigatorItem.IsSearchable">
            <summary>
            Gets or sets a value indicating whether this item is searchable
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.Navigator.NavigatorItem.IsUserDefined">
            <summary>
            Gets or sets if the entry is user defined
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.Navigator.NavigatorItem.ParentId">
            <summary>
            Gets the identity of the parent item
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.Navigator.NavigatorItem.IsRoot">
            <summary>
            Gets whether this is a root entry or not.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.Navigator.NavigatorItem.ItemType">
            <summary>
            Gets or sets the item type
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.Navigator.NavigatorItem.Category">
            <summary>
            Gets or sets the category the entry belongs to.
            </summary>
            <remarks>
            Note that changing the category will also affect the CategoryId property
            </remarks>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.Navigator.NavigatorItem.Copy(Cenium.Framework.Client.AppResources.Navigator.NavigatorItemType)">
            <summary>
            Copies a navigator item
            </summary>
            <remarks>
            The Id property will get a new value. IsUserDefined will be set to true
            </remarks>
            <param name="type">The item type to set</param>
            <returns>A new <c>NavigatorItem</c> instance</returns>
        </member>
        <member name="T:Cenium.Framework.Client.AppResources.Navigator.NavigatorManager">
            <summary>
            The NavigatorManager class manages navigator application resources
            </summary>
        </member>
        <member name="E:Cenium.Framework.Client.AppResources.Navigator.NavigatorManager.ModelChanged">
            <summary>
            Triggered when the model changes
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.Navigator.NavigatorManager.#ctor">
            <summary>
            Initializes a new instance of the NavigatorManager class
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.Navigator.NavigatorManager.AddUserItem(Cenium.Framework.Client.AppResources.Navigator.NavigatorItem)">
            <summary>
            Adds a new user-defined navigator item to the collection and saves the item in the user settings
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.Navigator.NavigatorManager.RemoveUserItem(Cenium.Framework.Client.AppResources.Navigator.NavigatorItem)">
            <summary>
            Removes an existing user-defined navigator item and saves the changes to the user settings
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.Navigator.NavigatorManager.RemoveUserItems(Cenium.Framework.Client.AppResources.Navigator.NavigatorItemType)">
            <summary>
            Removes all user-defined items for a specified item type
            </summary>
            <param name="type">The navigator item type to remove items for</param>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.Navigator.NavigatorManager.Categories">
            <summary>
            Gets an <c>IResourceCollection&lt;NavigatorCategory&gt;</c> instance containing all registered categories
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.Navigator.NavigatorManager.FavoriteItems">
            <summary>
            Gets an <c>IResourceCollection&lt;NavigatorItem&gt;</c> instance containing all registered favorite items.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.Navigator.NavigatorManager.CategoryItems">
            <summary>
            Gets an <c>IResourceCollection&lt;NavigatorItem&gt;</c> instance containing all registered category items.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.Navigator.NavigatorManager.LoadResource(Cenium.Framework.Client.AppResources.ResourceLoader.ResourceEntry)">
            <summary>
            Loads a resource from embedded resources
            </summary>
            <param name="entry">The resource loader entry</param>
        </member>
        <member name="T:Cenium.Framework.Client.AppResources.Navigator.NamespaceDoc">
            <summary>
            The Cenium.Framework.Client.Application.ResourceModel.Navigator namespace contains types and interfaces related to navigator application resources.
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.AppResources.Navigator.NavigatorResource">
            <summary>
            Represents a navigator application resource file. Note that this class is only intended for internal framework use.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.Navigator.NavigatorResource.Categories">
            <summary>
            Gets or sets the <c>NavigatorCategory</c> instances associated with the resource file
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.Navigator.NavigatorResource.Favorites">
            <summary>
            Gets or sets the favorite <c>NavigatorItem</c> instances associated with the resource file
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.Navigator.NavigatorResource.Entries">
            <summary>
            Gets or sets the category <c>NavigatorItem</c> instances associated with the resource file
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.Navigator.NavigatorResource.DashboardEntries">
            <summary>
            Gets or sets the dashboard <c>NavigatorItem</c> instances associated with the resource file
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.Navigator.NavigatorResource.Deserialize(System.String)">
            <summary>
            Deserialize an XML string into a <c>NavigatorResource</c> instance
            </summary>
            <param name="text">The XML string to deserialize</param>
            <returns>a new <c>NavigatorResource</c> instance</returns>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.Navigator.NavigatorResource.Serialize(Cenium.Framework.Client.AppResources.Navigator.NavigatorResource)">
            <summary>
            Serializes a NavigatorResource instance into a string value
            </summary>
            <param name="resource">The <c>NavigatorResource</c> instance to serialize</param>
            <returns>The <c>NavigatorResource</c> instance represented as an XML string</returns>
        </member>
        <member name="T:Cenium.Framework.Client.AppResources.Navigator.NavigatorResourceItem">
            <summary>
            Base resource item for navigators
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.Navigator.NavigatorResourceItem.#ctor">
            <summary>
            Initializes a new instance of the NavigatorResourceItem class
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.Navigator.NavigatorResourceItem.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the NavigatorResourceItem class
            </summary>
            <param name="id">The identifier for the item</param>
            <param name="name">The name of the item</param>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.Navigator.NavigatorResourceItem.Name">
            <summary>
            Gets or sets the name of the resource item
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.Navigator.NavigatorResourceItem.Description">
            <summary>
            Gets or sets the description of the resource item
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.Navigator.NavigatorResourceItem.IsVisible">
            <summary>
            Gets or sets if the item is visible
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.AppResources.RegisterValueItemTypeConverterAttribute">
            <summary>
            Registers a TypeConverter to use with a <see cref="T:Cenium.Framework.Client.AppResources.ValueItem"/>
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.RegisterValueItemTypeConverterAttribute.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the RegisterValueItemTypeConverter class
            </summary>
            <param name="id">The identifier associated with the type converter</param>
            <param name="converterType">The type converter type</param>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.RegisterValueItemTypeConverterAttribute.Id">
            <summary>
            Gets the identifier for the type converter
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.RegisterValueItemTypeConverterAttribute.ConverterType">
            <summary>
            Gets the <c>Type</c> that implements the <c>TypeConverter</c>
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.AppResources.ResourceAttribute">
            <summary>
            Base class for resource attributes
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.ResourceAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ResourceAttribute class
            </summary>
            <param name="id">The identifier for the resource</param>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.ResourceAttribute.Id">
            <summary>
            Gets the identifier for the resource
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.ResourceAttribute.IsPublic">
            <summary>
            Determines if the resource is public or not (default is <c>false</c>).
            </summary>
            <remarks>
            This attribute is used to determine if the resource should appear in the list of public resources or not. It does not have any impact on the runtime environment.
            </remarks>
        </member>
        <member name="T:Cenium.Framework.Client.AppResources.ResourceItem">
            <summary>
            Base class for all application resources
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.ResourceItem.#ctor">
            <summary>
            Initializes a new instance of the ResourceItem class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.ResourceItem.Id">
            <summary>
            Get or set the identifier for the resource
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.AppResources.ResourceManagerBase">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.ResourceManagerBase.#ctor">
            <summary>
            Initializes a new instance of the ResourceManagerBase class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.ResourceManagerBase.ResourceType">
            <summary>
            Gets the resource type the manager implements
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.ResourceManagerBase.BeforeResourcesLoaded">
            <summary>
            Called before any resources are loaded
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.ResourceManagerBase.AfterResourcesLoaded">
            <summary>
            Called after all resources have been loaded
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.ResourceManagerBase.LoadResource(Cenium.Framework.Client.AppResources.ResourceLoader.ResourceEntry)">
            <summary>
            Called when a resource need to be loaded by the resource manager
            </summary>
            <param name="entry">The resource entry to load</param>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.ResourceManagerBase.Inspect(System.Reflection.Assembly)">
            <summary>
            Called when the application resource mananager loads an assembly
            </summary>
            <param name="assembly">The assembly that was loaded</param>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.ResourceManagerBase.OnUserItemLoaded(Cenium.Framework.Client.AppResources.ResourceItem)">
            <summary>
            Called when....
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.ResourceManagerBase.AddTypeReference``1(System.Reflection.Assembly,Cenium.Framework.Client.AppResources.TypeReferenceCollection)">
            <summary>
            Helper method to load and register type references in a TypeReferenceCollection
            </summary>
            <typeparam name="TAttribute">The ApplicationResourceAttribute type to load</typeparam>
            <param name="assembly">The assembly to inspect</param>
            <param name="collection">The collection to register the type reference to</param>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.ResourceManagerBase.GetReflectionTypeLoadMessages(System.Reflection.ReflectionTypeLoadException)">
            <summary>
            Gets all the loader exception messages from a ReflectionTypeLoadException instance
            </summary>
            <param name="exception">The ReflectionTypeLoadException instance to get the messages from</param>
            <returns>A string containing all the loader exception messages</returns>
        </member>
        <member name="T:Cenium.Framework.Client.AppResources.TypeReferenceCollection">
            <summary>
            A collection of TypeReferenceItem instances
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.TypeReferenceCollection.#ctor(System.String)">
            <summary>
            Initializes a new instance of the TypeReferenceCollection class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.TypeReferenceCollection.ReferenceType">
            <summary>
            Gets the reference type the collection contains.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.TypeReferenceCollection.Register(System.String,System.Type)">
            <summary>
            Registers a type reference, i.e. making the type available for consumption for other application resources
            </summary>
            <param name="id">The identifier associated with the type</param>
            <param name="type">The type</param>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.TypeReferenceCollection.Register(Cenium.Framework.Client.AppResources.TypeReferenceItem)">
            <summary>
            Registers a type reference, i.e. making the type available for consumption for other application resources
            </summary>
            <param name="item">The <c>TypeReferenceItem</c> instance to register</param>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.TypeReferenceCollection.Unregister(System.String)">
            <summary>
            Unregisters a type reference
            </summary>
            <param name="id">The id to unregister</param>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.TypeReferenceCollection.Find(System.String)">
            <summary>
            Finds a type reference
            </summary>
            <param name="id">The identifier associated with the type reference</param>
            <returns>The <c>TypeReferenceItem</c> instance associated with the identifier, or null if the identifier does not exist.</returns>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.TypeReferenceCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.TypeReferenceCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.TypeReferenceCollection.Validate(Cenium.Framework.Client.AppResources.TypeReferenceItem)">
            <summary>
            Performs additional validation.
            </summary>
            <remarks>
            By default this method does nothing.
            </remarks>
            <param name="item">The item to validate</param>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.TypeReferenceCollection.OnRegister(Cenium.Framework.Client.AppResources.TypeReferenceItem)">
            <summary>
            Called when an item has been registered
            </summary>
            <param name="item">The item that has been registered</param>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.TypeReferenceCollection.OnUnregister(Cenium.Framework.Client.AppResources.TypeReferenceItem)">
            <summary>
            Called when an item has been unregistered
            </summary>
            <param name="item">The item that has been unregistered</param>
        </member>
        <member name="T:Cenium.Framework.Client.AppResources.TypeReferenceItem">
            <summary>
            Represents a reference to a class that implements an application resource
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.TypeReferenceItem.#ctor">
            <summary>
            Initializes a new instance of the TypeReferenceItem class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.TypeReferenceItem.Type">
            <summary>
            Get or set the type of the reference, represented as a string
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.TypeReferenceItem.IsPublic">
            <summary>
            Gets or sets a value indicating whether this is a public reference
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.TypeReferenceItem.Attribute">
            <summary>
            Gets or sets the resource attribute that defined the type reference
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.TypeReferenceItem.GetTypeFromReference">
            <summary>
            Gets the application resource type that the reference represents
            </summary>
            <returns>The application resource type</returns>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.TypeReferenceItem.CreateInstance">
            <summary>
            Creates an instance of the application resource
            </summary>
            <returns>An instance of the application resource</returns>
        </member>
        <member name="T:Cenium.Framework.Client.AppResources.ValueItem">
            <summary>
            Common class for id-value pairs such as properties
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.ValueItem.#ctor">
            <summary>
            Initializes a new instance of the ValueItem class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.ValueItem.Value">
            <summary>
            Gets or sets the value associated with the resource item
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.ValueItem.ValueType">
            <summary>
            Gets or sets the type of value
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppResources.ValueItem.ValueText">
            <summary>
            Gets or sets the value text
            </summary>
            <remarks>
            This property is included for serialization purposes. The value of this property is always the same as the Value property
            </remarks>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.ValueItem.GetValue">
            <summary>
            Returns the value converted to the type specified by the ValueType property
            </summary>
            <returns>An object that represents the value in its native type</returns>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.ValueItem.SetPropertyValue(System.Object)">
            <summary>
            Sets the property value on an object instance according to the values in the ValueItem instance
            </summary>
            <param name="obj">The object to set the property value for</param>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.ValueItem.RegisterConverter(Cenium.Framework.Client.AppResources.RegisterValueItemTypeConverterAttribute)">
            <summary>
            Registers a <c>TypeConverter</c> to use with the ValueItem
            </summary>
            <param name="attr">A RegisterValueItemTypeConverter instance</param>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.ValueItem.GetValueItemType(System.Type)">
            <summary>
            Gets a <c>ValueItemType</c> value based on a <c>Type</c>
            </summary>
            <param name="type">The type to get the <c>ValueItemType</c> for</param>
            <returns>A <c>ValueItemType</c> value</returns>
        </member>
        <member name="M:Cenium.Framework.Client.AppResources.ValueItem.GetTypeFromValueItem(Cenium.Framework.Client.AppResources.ValueItem)">
            <summary>
            Gets a <c>Type</c> based on a ValueItem
            </summary>
            <param name="item">The item to get the Type for</param>
            <returns>a <c>Type</c></returns>
        </member>
        <member name="T:Cenium.Framework.Client.AppResources.ValueItemType">
            <summary>
            Defines the types available for use in the <c>ValueItem</c> class
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.AppResources.ValueItemType.String">
            <summary>
            String type
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.AppResources.ValueItemType.Double">
            <summary>
            Double type
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.AppResources.ValueItemType.Int">
            <summary>
            Integer type
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.AppResources.ValueItemType.Bool">
            <summary>
            Boolean type
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.AppResources.ValueItemType.Short">
            <summary>
            Short type
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.AppResources.ValueItemType.Long">
            <summary>
            Long type
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.AppResources.ValueItemType.Enum">
            <summary>
            Enumeration type
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.AppResources.ValueItemType.ClassRef">
            <summary>
            Class references
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.AppResources.ValueItemType.TypeConverter">
            <summary>
            Type converter
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Data.DataField">
            <summary>
            Represents a field in an import or export stream
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Data.DataField.Name">
            <summary>
            Gets the name of the data field
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Data.DataField.Index">
            <summary>
            Gets the index of the data field
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Data.DataManager">
            <summary>
            Contains functionality to handle data export and import
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Data.DataManager.RegisterImportProvider(Cenium.Framework.Client.Data.Import.DataFileImportProvider)">
            <summary>
            Registers a new file import provider
            </summary>
            <param name="provider">The provider to register.</param>
        </member>
        <member name="P:Cenium.Framework.Client.Data.DataManager.ImportProviders">
            <summary>
            Gets all registered import providers.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Data.DataManager.GetImportProviderByIdentity(System.String)">
            <summary>
            Gets an import provider by its identity
            </summary>
            <param name="identity">The identity of the provider to get.</param>
            <returns>The import provider associated with the identity if the provider exists; otherwise null.</returns>
        </member>
        <member name="T:Cenium.Framework.Client.Data.DataMapField">
            <summary>
            Represents a mapping between an entity field and a file
            </summary>
            <seealso cref="T:Cenium.Framework.ComponentModel.NotifyPropertyChangedBase" />
        </member>
        <member name="T:Cenium.Framework.Client.Data.Import.DataFileImportProvider">
            <summary>
            Base class for all file import providers
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Data.Import.DataFileImportProvider.Identity">
            <summary>
            Gets or sets the provider identity
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Data.Import.DataFileImportProvider.DisplayName">
            <summary>
            Gets or sets the display name.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Data.Import.DataFileImportProvider.Capabilities">
            <summary>
            Gets the capabilities that the provider supports
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Data.Import.DataFileImportProvider.CreateSettings">
            <summary>
            Creates a <c>DataFileImportSettings</c> instance
            </summary>
            <returns>A new <c>DataFileImportSettings</c> instance.</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Data.Import.DataFileImportProvider.SetCapability(Cenium.Framework.Client.Data.Import.DataImportProviderCapabilities)">
            <summary>
            Sets a capability for the provider.
            </summary>
            <param name="capability">The capability the provider supports.</param>
        </member>
        <member name="M:Cenium.Framework.Client.Data.Import.DataFileImportReader.GetValue(System.Type,System.String)">
            <summary>
            Gets the value of a field, converted to the specified type
            </summary>
            <param name="type">The type to convert the value to</param>
            <param name="field">The field name to get the value for</param>
            <returns>The value of the specified field, converted to the specified type.</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Data.Import.DataFileImportReader.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Data.Import.DataFileImportReader.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Cenium.Framework.Client.Data.Import.DataImportProviderCapabilities">
            <summary>
            Defines the optional capabilities for a data import provider
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.Data.Import.DataImportProviderCapabilities.None">
            <summary>
            No optional capabilities
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.Data.Import.DataImportProviderCapabilities.HasSettings">
            <summary>
            The provider supports import settings
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Data.Filter.UserFilterBase">
            <summary>
            Base class for user filters
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Data.Filter.FilterOperator">
            <summary>
            Represents a filter operator
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Data.Filter.FilterOperator.#ctor(System.String,System.String,Cenium.Framework.Data.ServiceQueryOperator)">
            <summary>
            Initializes a new instance of the FilterOperator class
            </summary>
            <param name="name">The operator name</param>
            <param name="displayName">The operator display name</param>
            <param name="operands">The number of operands this operator supports. If the operands == -1, this is a list operator</param>
        </member>
        <member name="P:Cenium.Framework.Client.Data.Filter.FilterOperator.Name">
            <summary>
            Gets the name of the operator
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Data.Filter.FilterOperator.DisplayName">
            <summary>
            Gets the display name of the operator
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Data.Filter.FilterOperator.Operands">
            <summary>
            Gets the number of operands this operator requires.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Cenium.Framework.Client.Data.Filter.FilterOperator.Equals(System.Object)" -->
        <member name="M:Cenium.Framework.Client.Data.Filter.FilterOperator.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Cenium.Framework.Client.Data.Filter.FilterOperator.CreateExpression(Cenium.Framework.Client.Data.Filter.FilterProperty,System.String,System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="T:Cenium.Framework.Client.Data.Filter.FilterOperators">
            <summary>
            Contains methods to define and get filter operators
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.Data.Filter.FilterOperators.OpSearch">
            <summary>
            Gets the system-defined operator for search
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.Data.Filter.FilterOperators.OpEquals">
            <summary>
            Gets the system-defined operator for Equals. This operator checks if two values are equal, (i.e. a == b)
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.Data.Filter.FilterOperators.OpNotEquals">
            <summary>
            Gets the system-defined operator for NotEquals. This operator checks if two values are different, (i.e. a != b)
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.Data.Filter.FilterOperators.OpIsNull">
            <summary>
            Gets the system-defined operator for IsNull. This operator checks if a value is null, (i.e. a == null)
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.Data.Filter.FilterOperators.OpIsNotNull">
            <summary>
            Gets the system-defined operator for IsNotNull.This operator checks if a value is set, (i.e. a != null)
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.Data.Filter.FilterOperators.OpStartsWith">
            <summary>
            Gets the system-defined operator for StartsWith.This operator checks if a text string starts with the specified value, (i.e. a.StartsWith(b))
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.Data.Filter.FilterOperators.OpEndsWith">
            <summary>
            Gets the system-defined operator for EndsWith.This operator checks if a text string ends with the specified value, (i.e. a.EndsWith(b))
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.Data.Filter.FilterOperators.OpContains">
            <summary>
            Gets the system-defined operator for Contains.This operator checks if a text string starts contains the specified value, (i.e. a.Contains(b))
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.Data.Filter.FilterOperators.OpLessThan">
            <summary>
            Gets the system-defined operator for LessThan.This operator checks if a value is less than another value, (i.e. a &lt; b)
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.Data.Filter.FilterOperators.OpLessThanOrEqual">
            <summary>
            Gets the system-defined operator for LessThanOrEqual.This operator checks if a value is less than or equal to another value, (i.e. a &lt;= b)
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.Data.Filter.FilterOperators.OpGreaterThan">
            <summary>
            Gets the system-defined operator for GreaterThan.This operator checks if a value is greater than another value, (i.e. a &gt; b)
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.Data.Filter.FilterOperators.OpGreaterThanOrEqual">
            <summary>
            Gets the system-defined operator for GreaterThanOrEqual.This operator checks if a value is greater than or equal to another value, (i.e. a &gt;= b))
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Cenium.Framework.Client.Data.Filter.FilterOperators.OpRange" -->
        <member name="F:Cenium.Framework.Client.Data.Filter.FilterOperators.OpIn">
            <summary>
            Gets the system-defined operator for In.This operator checks if a value is part of a specified list of values, (i.e. a == Any(b, c, d, e, f, .. , n))
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.Data.Filter.FilterOperators.OpNotIn">
            <summary>
            Gets the system-defined operator for NotIn.This operator checks if a value is not part of a specified list of values, (i.e. a != Any(b, c, d, e, f, .. , n))
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.Data.Filter.FilterOperators.OpAll">
            <summary>
            Gets the system-defined operator for All. This operator checks if a set of values matches all of the operands
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.Data.Filter.FilterOperators.OpAny">
            <summary>
            Gets the system-defined operator for Any. This operator checks if a set of values matches any of the operands
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Data.Filter.FilterOperators.GetFilterOperatorsForType(System.Type,System.Boolean)">
            <summary>
            Gets an <c>IEnumerable</c> of <c>FilterOperator</c> instances that may be used with the specified type
            </summary>
            <param name="type">The type to get the operators for</param>
            <param name="isNullable">Whether the value type can be null or not</param>
            <returns>An <c>IEnumerable</c> of <c>FilterOperator</c> instances</returns>
        </member>
        <member name="P:Cenium.Framework.Client.Data.Filter.FilterOperators.Operators">
            <summary>
            Gets all system-defined filter operators.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Data.Filter.FilterOperators.GetFilterValuesForType(System.Type,System.Boolean)">
            <summary>
            This enumerable will return a discreet list of values for the specified type, e.g. true/false for boolean types.
            </summary>
            <param name="type">The type to get the operators for</param>
            <param name="isNullable">Whether the value type can be null or not</param>
            <returns>An <c>IEnumerable</c> of <c>FilterValueItem</c> instances</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Data.Filter.FilterOperators.GetDefaultOperatorForType(System.Type)">
            <summary>
            Gets the default operator for a specified type
            </summary>
            <param name="type">The type to get the default operator for</param>
            <returns>the default operator for a specified type</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Data.Filter.FilterOperators.GetOperatorByName(System.String)">
            <summary>
            Gets a filter operator identified by its name
            </summary>
            <param name="name">The name of the operator</param>
            <returns>A filter operator with the corresponding name, or null if the operator does not exist.</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Data.Filter.FilterOperators.IsValidForType(Cenium.Framework.Client.Data.Filter.FilterOperator,System.Type,System.Boolean)">
            <summary>
            Determines whether a filter operator is valid for a specific type
            </summary>
            <param name="filterOperator">The filter operator to determine if is valid.</param>
            <param name="type">The data type to use the operator on</param>
            <param name="isNullable">Whether the null value is accepted or not</param>
            <returns>true if the operator is valid; otherwise false</returns>
        </member>
        <member name="T:Cenium.Framework.Client.Data.Filter.FilterOperators.FilterValueItem">
            <summary>
            Represents a possible filter value in a discreet list of values
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Data.Filter.FilterOperators.FilterValueItem.Value">
            <summary>
            Gets the value represented as a string
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Data.Filter.FilterOperators.FilterValueItem.DisplayValue">
            <summary>
            Gets the display text for the value
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Data.Filter.FilterProperty">
            <summary>
            Represents a property that can be used to filter on
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Data.Filter.FilterProperty.Identity">
            <summary>
            Gets the language identity for the property.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Data.Filter.FilterProperty.PropertyName">
            <summary>
            Gets the name of the property
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Data.Filter.FilterProperty.DisplayName">
            <summary>
            Gets the display name of the property
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Data.Filter.FilterProperty.PropertyType">
            <summary>
            Gets the base type of the property
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Data.Filter.FilterProperty.IsNullable">
            <summary>
            Gets if the property value can be null
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Data.Filter.FilterProperty.IsSearchProperty">
            <summary>
            Gets if the property is a search property
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Data.Filter.FilterProperty.IsEnumeration">
            <summary>
            Gets a value indicating if the property is an enumeration property
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Data.Filter.FilterHelper">
            <summary>
            Contains helper methods to create filters
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Data.Filter.FilterHelper.CreateKeyFilter(System.String,System.Object)">
            <summary>
            Creates a user filter from an entity key.
            </summary>
            <param name="entityName">Name of the entity.</param>
            <param name="keyValue">The key value.</param>
            <returns>An <c>IUserFiler</c> instance representing a filter expression</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Data.Filter.FilterHelper.CreateKeyFilterExpression(System.String,System.Object)">
            <summary>
            Creates a filter expression based on an entity key
            </summary>
            <param name="entityName">Name of the entity.</param>
            <param name="keyValue">The key value.</param>
            <returns>A string representation of a key filter expression</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Data.Filter.FilterHelper.CreateFilterFromQuery(System.String)">
            <summary>
            Creates a user filter from a query expression
            </summary>
            <param name="query">The query to create a filter for</param>
            <returns>An <c>IUserFilter</c> instance.</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Data.Filter.FilterHelper.CreateContainsTokenFilter(System.String,System.String)">
            <summary>
            Splits the filter value into multiple tokens (split by word) and creates a contains filter for each token
            </summary>
            <param name="propertyName">The property name to filter on</param>
            <param name="value">The filter value</param>
            <returns>An <c>IFilterExpression</c> instance</returns>
        </member>
        <member name="T:Cenium.Framework.Client.Data.Export.DataExportManager">
            <summary>
            Provides access to registered data export handlers
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Data.Export.DataExportManager.CreateHandlerDelegate">
            <summary>
            Defines a delegate for creating export handler instances
            </summary>
            <returns>An <c>IDataExportHandler</c> instance</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Data.Export.DataExportManager.RegisterExportHandler(System.String,Cenium.Framework.Client.Data.Export.DataExportManager.CreateHandlerDelegate)">
            <summary>
            Registers a delegate for creating new instances of a data export handler
            </summary>
            <param name="id">The identity associated with the handler</param>
            <param name="handlerDelegate">The delegate that creates the data export handler</param>
        </member>
        <member name="M:Cenium.Framework.Client.Data.Export.DataExportManager.CreateExportHandler(System.String)">
            <summary>
            Creates a new data export handler
            </summary>
            <param name="id">The identity of the handler</param>
            <returns>A new <c>IDataExportHandler</c> instance</returns>
        </member>
        <member name="T:Cenium.Framework.Client.Data.Export.DataExportSettings">
            <summary>
            Specifies a set of features to support during a data export
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Data.Export.DataExportSettings.#ctor">
            <summary>
            Initializes a new instance of the DataExportSettings class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Data.Export.DataExportSettings.Name">
            <summary>
            Gets or sets the name of an export
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Data.Export.DataExportSettings.FileName">
            <summary>
            Gets or sets the output filename for an export
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Data.Export.DataExportSettings.ExportProperties">
            <summary>
            Gets or sets the properties to export
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Data.Export.DataExportProperty">
            <summary>
            Defines an exportable data property
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Data.Export.DataExportProperty.#ctor">
            <summary>
            Initializes a new instance of the ExportProperty class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Data.Export.DataExportProperty.Id">
            <summary>
            Gets or set the identity of the property
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Data.Export.DataExportProperty.DisplayName">
            <summary>
            Gets or sets the display name of the property
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Data.Export.DataExportProperty.PropertyType">
            <summary>
            Gets or sets the <c>Type</c> the property implements
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Data.Export.IDataExportHandler">
            <summary>
            Defines a mechanism for handling export of data
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Data.Export.IDataExportHandler.BeginExport(Cenium.Framework.Client.Data.Export.DataExportSettings)">
            <summary>
            Called when the export is about to begin
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Data.Export.IDataExportHandler.Write(System.Collections.Generic.IEnumerable{Cenium.Framework.Client.Model.Record})">
            <summary>
            Performs the export
            </summary>
            <param name="records">An <c>IEnumerable</c> of records to export</param>
        </member>
        <member name="M:Cenium.Framework.Client.Data.Export.IDataExportHandler.CloseExport">
            <summary>
            Called after the export has completed
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Metadata.IntEqualsToBoolPropertyExtension">
            <summary>
            Entity property extension that returns true if a specified record value equals a specific value
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Metadata.IntEqualsToBoolPropertyExtension.PropertyValue">
            <summary>
            Gets or sets the property value to compare to.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Metadata.IntEqualsToBoolPropertyExtension.OnGetValue(Cenium.Framework.Client.Model.Record)">
            <summary>
            Provides the implementation for getting the extension value. Inheritors should override this method
            </summary>
            <param name="record">The record to get the value from</param>
            <returns>
            The extension value
            </returns>
        </member>
        <member name="T:Cenium.Framework.Client.Metadata.IsRecordStateAddedPropertyExtension">
            <summary>
            Entity extension that returns true if the record state is <c>RecordState.Added</c>
            </summary>
            <seealso cref="T:Cenium.Framework.Client.Metadata.IEntityPropertyExtension" />
        </member>
        <member name="T:Cenium.Framework.Client.Metadata.ReverseBoolPropertyExtension">
            <summary>
            Represents an entity property extension reverses a boolean value
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Metadata.BoolToStringPropertyExtension">
            <summary>
            Entity extension that converts a bool value into a display text
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Metadata.BoolToStringPropertyExtension.FalseValue">
            <summary>
            Gets or sets the text value associated with a false value
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Metadata.BoolToStringPropertyExtension.TrueValue">
            <summary>
            Gets or sets the text value associated with a true value
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Metadata.BoolToStringPropertyExtension.NullValue">
            <summary>
            Gets or sets the text value associated with a null value
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Metadata.BoolToStringPropertyExtension.OnGetValue(Cenium.Framework.Client.Model.Record)">
            <summary>
            Provides the implementation for getting the extension value.
            </summary>
            <param name="record">The record to get the value from</param>
            <returns>The extension value</returns>
        </member>
        <member name="T:Cenium.Framework.Client.Metadata.ChildCountPropertyExtension">
            <summary>
            Entity property extension that returns the number of items in a collection property
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Metadata.ChildCountPropertyExtension.OnGetValue(Cenium.Framework.Client.Model.Record)">
            <summary>
            Returns the count from the collection property specified in the PropertyName property.
            </summary>
            <param name="record">The record to get the value from</param>
            <returns>The item count from the collection property.</returns>
        </member>
        <member name="T:Cenium.Framework.Client.Metadata.ClrTypeToDisplayNamePropertyExtension">
            <summary>
            Converts a Clr data type to a display-friendly name
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Metadata.ClrTypeToDisplayNamePropertyExtension.#ctor">
            <summary>
            Initializes a new instance of the ClrTypeToDisplayNamePropertyExtension class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Metadata.ClrTypeToDisplayNamePropertyExtension.ClrTypePropertyName">
            <summary>
            Gets or sets the name of the property that contains the CLR type. This property can either be of type Type or String.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Metadata.ClrTypeToDisplayNamePropertyExtension.Get(Cenium.Framework.Client.Model.Record)">
            <summary>
            Gets the display-friendly name of the CLR type from the record
            </summary>
            <param name="record">The record to get the CLR type from</param>
            <returns>A display-friendly name from the CLR type</returns>
        </member>
        <member name="T:Cenium.Framework.Client.Metadata.CurrentDatePropertyExtension">
            <summary>
            Property extension that returns the current datetime
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Metadata.CurrentPropertyContextPropertyExtension">
            <summary>
            Property extension that returns the display text for the currently selected property context
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Metadata.DateRangePropertyExtension">
            <summary>
            Property extension that creates a display string from a date range. The dates are displayed using the ShortDatePattern.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Metadata.DateRangePropertyExtension.FromDatePropertyName">
            <summary>
            Gets or sets the property name that contains the from date
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Metadata.DateRangePropertyExtension.ToDatePropertyName">
            <summary>
            Gets or sets the property name that contains the to-date
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Metadata.DateRangePropertyExtension.Get(Cenium.Framework.Client.Model.Record)">
            <summary>
            Gets the date range from the specified from- and to-date properties
            </summary>
            <param name="r">The Record instance to extract the dates from</param>
            <returns>A daterange formatted as a string value</returns>
        </member>
        <member name="T:Cenium.Framework.Client.Metadata.DaysBetweenPropertyExtension">
            <summary>
            Entity property extension that calculates days between two dates
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Metadata.DaysBetweenPropertyExtension.FromDatePropertyName">
            <summary>
            Gets or sets the name of from-date property.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Metadata.DaysBetweenPropertyExtension.ToDatePropertyName">
            <summary>
            Gets or sets the name of to-date property.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Metadata.DaysBetweenPropertyExtension.Get(Cenium.Framework.Client.Model.Record)">
            <summary>
            Calculates days between from and to dates
            </summary>
            <param name="record">The record containing the values to calculate days between</param>
            <returns>Days between from and to date, or null if the from or to dates are invalid</returns>
        </member>
        <member name="T:Cenium.Framework.Client.Metadata.EntityPropertyExtensionBase">
            <summary>
            Base class for entity property extensions
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Metadata.EntityPropertyExtensionBase.PropertyName">
            <summary>
            Gets or sets the name of the property to derive a value from
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Metadata.EntityPropertyExtensionBase.Get(Cenium.Framework.Client.Model.Record)">
            <summary>
            Gets the property value
            </summary>
            <param name="r">The Record instance to create an extension property for</param>
            <returns>
            The property value
            </returns>
        </member>
        <member name="M:Cenium.Framework.Client.Metadata.EntityPropertyExtensionBase.OnGetValue(Cenium.Framework.Client.Model.Record)">
            <summary>
            Provides the implementation for getting the extension value. Inheritors should override this method
            </summary>
            <param name="record">The record to get the value from</param>
            <returns>The extension value</returns>
        </member>
        <member name="T:Cenium.Framework.Client.Metadata.EnumerationPropertyExtension">
            <summary>
            Represents an entity property extension that maps a property value to an enumeration display value
            </summary>
            <seealso cref="T:Cenium.Framework.Client.Metadata.IQueryableEntityPropertyExtension" />
        </member>
        <member name="P:Cenium.Framework.Client.Metadata.EnumerationPropertyExtension.PropertyName">
            <summary>
            Gets or sets the name of the property that contains the server value to get the enumeration display value for
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Metadata.EnumerationPropertyExtension.EnumerationId">
            <summary>
            Gets or sets the enumeration identifier.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Metadata.EnumerationPropertyExtension.IsQueryable">
            <summary>
            Gets a value indicating whether this instance is queryable.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Metadata.EnumerationPropertyExtension.PropertyType">
            <summary>
            Gets the Type of the value that the extension returns in the Get method.
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Metadata.FormatDatePropertyExtension">
            <summary>
            Entity property extension that formats a DateTime into a specified format
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Metadata.FormatDatePropertyExtension.#ctor">
            <summary>
            Initializes a new instance of the FormatDatePropertyExtension class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Metadata.FormatDatePropertyExtension.DateFormat">
            <summary>
            Gets or sets the date format string.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Metadata.FormatDatePropertyExtension.OnGetValue(Cenium.Framework.Client.Model.Record)">
            <summary>
            Returns the DateTime instance formatted
            </summary>
            <param name="record">The record to get the DateTime instance from</param>
            <returns>A DateTime formatted as a string</returns>
        </member>
        <member name="T:Cenium.Framework.Client.Metadata.GroupSummaryPropertyExtension">
            <summary>
            Property extension that creates a summary from a set of property values
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Metadata.GroupSummaryPropertyExtension.Properties">
            <summary>
            Gets or sets the properties that are included in the summary. The properties should be on the format "name=default value^name=default value^name^name".
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Metadata.GroupSummaryPropertyExtension.Get(Cenium.Framework.Client.Model.Record)">
            <summary>
            Gets the summary value from a Record instance
            </summary>
            <param name="record">The Record instance to create a summary for</param>
            <returns>The generated summary.</returns>
        </member>
        <member name="T:Cenium.Framework.Client.Metadata.IsExpiredPropertyExtension">
            <summary>
            Entity extension that returns true if a date is earlier than todays date
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Metadata.IsExpiredPropertyExtension.IsDateOnly">
            <summary>
            Gets or sets a value indicating if the date is a date only (false indicates a date/time)
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Metadata.IsExpiredPropertyExtension.OnGetValue(Cenium.Framework.Client.Model.Record)">
            <summary>
            Returns the referenced property value if the value is not null, empty or whitespace; otherwise returns the default value.
            </summary>
            <param name="record">The record to get the property value from</param>
            <returns>The referenced property value if the value is not null, empty or whitespace; otherwise returns the default value.</returns>
        </member>
        <member name="T:Cenium.Framework.Client.Metadata.ParentFieldPropertyExtension">
            <summary>
            Gets a parent property value
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Metadata.StringEqualsToBoolPropertyExtension">
            <summary>
            Entity property extension that returns true if a specified record value equals a specific value
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Metadata.StringEqualsToBoolPropertyExtension.IsCaseSensitive">
            <summary>
            Gets or sets a value indicating whether the comparison should be case sensitive or not
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Metadata.StringEqualsToBoolPropertyExtension.PropertyValue">
            <summary>
            Gets or sets the property value to compare to.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Metadata.StringEqualsToBoolPropertyExtension.OnGetValue(Cenium.Framework.Client.Model.Record)">
            <summary>
            Provides the implementation for getting the extension value. Inheritors should override this method
            </summary>
            <param name="record">The record to get the value from</param>
            <returns>
            The extension value
            </returns>
        </member>
        <member name="T:Cenium.Framework.Client.Metadata.StringToTitleCasePropertyExtension">
            <summary>
            Converts a Clr data type to a display-friendly name
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Metadata.ValueOrDefaultPropertyExtension">
            <summary>
            Property extension that returns a default value if the referenced property value is null or empty
            </summary>
            <seealso cref="T:Cenium.Framework.Client.Metadata.EntityPropertyExtensionBase" />
        </member>
        <member name="P:Cenium.Framework.Client.Metadata.ValueOrDefaultPropertyExtension.DefaultValue">
            <summary>
            Gets or sets the value to return when the property value is null or empty.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Metadata.ValueOrDefaultPropertyExtension.OnGetValue(Cenium.Framework.Client.Model.Record)">
            <summary>
            Returns the referenced property value if the value is not null, empty or whitespace; otherwise returns the default value.
            </summary>
            <param name="record">The record to get the property value from</param>
            <returns>The referenced property value if the value is not null, empty or whitespace; otherwise returns the default value.</returns>
        </member>
        <member name="T:Cenium.Framework.Client.Metadata.FormatStringPropertyExtension">
            <summary>
            Entity property extension that creates a value based on a format string and a set of property values
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Metadata.FormatStringPropertyExtension.FormatString">
            <summary>
            Gets or sets the formatting string
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Metadata.FormatStringPropertyExtension.PropertyNames">
            <summary>
            Gets or sets the property names to use in the format string. Property names can be delimited by comma (,) or semi-colon (;)
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Metadata.FormatStringPropertyExtension.Get(Cenium.Framework.Client.Model.Record)">
            <summary>
            Gets the property value
            </summary>
            <param name="record">The Record instance to create an extension property for</param>
            <returns>The property value</returns>
        </member>
        <member name="T:Cenium.Framework.Client.Metadata.TruncateStringPropertyExtension">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Metadata.TruncateStringPropertyExtension.#ctor">
            <summary>
            Initializes a new instance of the ShortDescriptionPropertyExtension class
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Metadata.SumEntityPropertyExtension">
            <summary>
            Entity property extension that can summarize a numeric property in a child collection.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Metadata.SumEntityPropertyExtension.CollectionPropertyName">
            <summary>
            Gets or sets the name of the child collection
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Metadata.SumEntityPropertyExtension.Summarize(Cenium.Framework.Client.Model.Record)">
            <summary>
            Performs the summarization
            </summary>
            <param name="r">The record to perform the sum on</param>
            <returns>a <c>double</c> value</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Metadata.SumEntityPropertyExtension.OnGetValue(Cenium.Framework.Client.Model.Record)">
            <summary>
            Provides the implementation for getting the extension value.
            </summary>
            <param name="record">The record to get the value from</param>
            <returns>
            The extension value
            </returns>
        </member>
        <member name="T:Cenium.Framework.Client.Metadata.SumIntEntityPropertyExtension">
            <summary>
            Entity property extension that can summarize an int property in a child collection.
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Model.AttachedObjectListViewModel">
            <summary>
            Represents a list based model for attached objects
            </summary>
            <seealso cref="T:Cenium.Framework.Client.Model.ListViewModel" />
            <seealso cref="T:Cenium.Framework.ComponentModel.IAsyncSaveCommand" />
        </member>
        <member name="T:Cenium.Framework.Client.Model.RecordEventArgs">
            <summary>
            Provides event data for <c>Record</c> related events
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="F:Cenium.Framework.Client.Model.RecordEventArgs.EmptyRecordEvent">
            <summary>
            Provides a value to use with events that do not have event data.
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Model.ISelectionModel">
            <summary>
            Defines the contract for models that supports selection
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Model.ISelectionModel.SelectedItem">
            <summary>
            Gets or sets the selected item.
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Model.IWidgetDataViewModel">
            <summary>
            Defines the contract a data model for a widget should implement
            </summary>
            <seealso cref="T:Cenium.Framework.Client.Model.IDataViewModel" />
        </member>
        <member name="P:Cenium.Framework.Client.Model.IWidgetDataViewModel.WidgetConfiguration">
            <summary>
            Gets or sets the widget configuration.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Model.IWidgetDataViewModel.IsWidgetConfigurationValid">
            <summary>
            Gets a value indicating whether the widget configuration is valid
            </summary>
            <remarks>
            A widget configuration should be considered valid if there is enough information to populate the data.
            </remarks>
        </member>
        <member name="P:Cenium.Framework.Client.Model.IWidgetDataViewModel.IsReadPermitted">
            <summary>
            Gets a value indicating whether the user has access to read data from the model instance
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Model.PropertyContextFilterHandler">
            <summary>
            Represents a filter handler for property contexts
            </summary>
            <seealso cref="T:Cenium.Framework.Client.Model.IFilterHandler" />
        </member>
        <member name="E:Cenium.Framework.Client.Model.PropertyContextFilterHandler.FilterChanged">
            <summary>
            Triggered when the filter expression changes
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Model.PropertyContextFilterHandler.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cenium.Framework.Client.Model.PropertyContextFilterHandler"/> class.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Model.PropertyContextFilterHandler.FilterPropertyName">
            <summary>
            Gets or sets the name of the property to filter on
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Model.PropertyContextFilterHandler.FilterExpression">
            <summary>
            Gets or sets the current filter expression
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Model.PropertyContextFilterHandler.IsFilterValid">
            <summary>
            Returns true if the filter is valid; otherwise false
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Model.PropertyContextFilterHandler.IsUserFilter">
            <summary>
            Gets a value indicating whether this instance is user filter.
            </summary>
            <value>The property context filter will always return false</value>
        </member>
        <member name="P:Cenium.Framework.Client.Model.PropertyContextFilterHandler.SearchExpression">
            <summary>
            Gets the current search expression
            </summary>
            <remarks>
            The property context filter will always return null
            </remarks>
        </member>
        <member name="T:Cenium.Framework.Client.Model.ValueListSelectionModel">
            <summary>
            Model used by value lists
            </summary>
            <seealso cref="T:Cenium.Framework.ComponentModel.NotifyPropertyChangedBase" />
        </member>
        <member name="P:Cenium.Framework.Client.Model.ValueListSelectionModel.SelectedItem">
            <summary>
            Gets or sets the selected item.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Model.ValueListSelectionModel.IsSaveEnabled">
            <summary>
            Returns true of the save method can be called, otherwise false.
            </summary>
            <remarks>
            This method will return true if the SelectedItem property has a value; otherwise false.
            </remarks>
        </member>
        <member name="M:Cenium.Framework.Client.Model.ValueListSelectionModel.Save">
            <summary>
            Performs a save operation
            </summary>
            <remarks>
            In this model, the save method does nothing.
            </remarks>
        </member>
        <member name="T:Cenium.Framework.Client.Model.WidgetQuickAddModel">
            <summary>
            Represents a model for adding items in a widget
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Model.WidgetQuickAddModel.Item">
            <summary>
            Gets the <c>Record</c> that contains data to be added
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Model.WidgetQuickAddModel.CreateMethod">
            <summary>
            Gets or sets the service method used to add an item
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Model.WidgetQuickAddModel.IsReadPermitted">
            <summary>
            Gets a value indicating whether the user has access to read data from the model instance
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Model.WidgetQuickAddModel.IsWidgetConfigurationValid">
            <summary>
            Gets a value indicating whether the widget configuration is valid
            </summary>
            <remarks>
            A widget configuration should be considered valid if there is enough information to populate the data.
            </remarks>
        </member>
        <member name="P:Cenium.Framework.Client.Model.WidgetQuickAddModel.WidgetConfiguration">
            <summary>
            Gets or sets the widget configuration.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Model.WidgetQuickAddModel.IsConfigurationRequired">
            <summary>
            Gets or sets a value indicating whether a configuration is required. Default is <c>false</c>.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Model.WidgetQuickAddModel.IsBusy">
            <summary>
            Returns true if the model is busy performing a server operation; otherwise false
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Model.MetadataUtility">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Model.CalendarListViewModel">
            <summary>
            Reprsensets a list model where each entry has a set of calendar items associated with its entry
            </summary>
            <seealso cref="T:Cenium.Framework.Client.Model.ListViewModel" />
        </member>
        <member name="M:Cenium.Framework.Client.Model.CalendarListViewModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cenium.Framework.Client.Model.CalendarListViewModel"/> class.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Model.CalendarListViewModel.StartDate">
            <summary>
            Gets or sets the start date.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Model.CalendarListViewModel.EndDate">
            <summary>
            Gets or sets the end date.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Model.CalendarListViewModel.EntryStartDateMemberPath">
            <summary>
            Gets or sets the path to the start date in the calendar entry
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Model.CalendarListViewModel.EntryEndDateMemberPath">
            <summary>
            Gets or sets the path to the end date in the calendar entry
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Model.CalendarListViewModel.EntryQueryMethod">
            <summary>
            Gets or sets the query method to use to retrieve the calendar entries
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Model.CalendarListViewModel.EntryGetMethod">
            <summary>
            Gets or sets the get method to use to retrieve the calendar entries details
            </summary>
            <remarks>
            This method is used to lazy-load details about an entry
            </remarks>
        </member>
        <member name="M:Cenium.Framework.Client.Model.CalendarListViewModel.CoerceDateTime(System.Nullable{System.DateTime})">
            <summary>
            Coerces the DateTime by making sure only the Date component is set
            </summary>
            <param name="value">The value to coerce</param>
            <returns>The coerced DateTime value</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Model.CalendarListViewModel.ClearCore">
            <summary>
            Executes the logic for Clear
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Model.CalendarListViewModel.OnPageLoaded(System.Collections.Generic.IReadOnlyCollection{Cenium.Framework.Client.Model.RecordItem})">
            <summary>
            Called after a page has been loaded into the collection
            </summary>
            <param name="page">a collection of <c>RecordItem</c>instances that has been loaded into memory</param>
        </member>
        <member name="M:Cenium.Framework.Client.Model.CalendarListViewModel.GetEntriesForDateRange(System.Collections.Generic.IReadOnlyCollection{Cenium.Framework.Client.Model.RecordItem},System.DateTime,System.DateTime)">
            <summary>
            Gets the calendar entries for a specified date range.
            </summary>
            <param name="records">The records to get the calendar entries for</param>
            <param name="dateStart">Date range start</param>
            <param name="dateEnd">Date range end</param>
            <returns>A collection of calendar entries. This method may return null</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Model.CalendarListViewModel.CreateRecordItem">
            <summary>
            Creates a new <c>RecordItem</c> instance
            </summary>
            <returns></returns>
        </member>
        <member name="T:Cenium.Framework.Client.Model.CalendarListViewModelItemEntry">
            <summary>
            Represents a calendar entry in the CalendarListViewModel
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Model.CalendarListViewModelItemEntry.#ctor(Cenium.Framework.Client.Model.Record,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cenium.Framework.Client.Model.CalendarListViewModelItemEntry"/> class.
            </summary>
            <param name="item">The item to wrap</param>
            <param name="startDateMemberPath">The member path to the StartDate</param>
            <param name="endDateMemberPath">The member path to the EndDate</param>
        </member>
        <member name="P:Cenium.Framework.Client.Model.CalendarListViewModelItemEntry.StartDate">
            <summary>
            Gets the start date for the entry
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Model.CalendarListViewModelItemEntry.EndDate">
            <summary>
            Gets the end date for the entry.
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Model.CalendarListViewModelPage">
            <summary>
            Represents a page of loaded items in the CalendarListViewModel class
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Model.CalendarListViewModelPermissionHandler">
            <summary>
            Permission handler for the CalendarListViewModel class
            </summary>
            <seealso cref="T:Cenium.Framework.Client.Model.ListViewModelPermissionHandler" />
        </member>
        <member name="M:Cenium.Framework.Client.Model.CalendarListViewModelPermissionHandler.IsReadPermittedCore(System.Collections.Generic.IEnumerable{Cenium.Framework.Client.AppResources.ValueItem})">
            <summary>
            Core logic for the IsReadPermitted method.
            </summary>
            <param name="modelProperties">The model properties.</param>
            <returns>
            true if the user has read access; otherwise false
            </returns>
            <remarks>
            This method checks the QueryMethod property and verifies that the user has access to the specified property. This method will also return false if the QueryMethod property is null
            or when the specified query service method does not exist.
            </remarks>
        </member>
        <member name="T:Cenium.Framework.Client.Model.CalendarListViewModelRecordItem">
            <summary>
            Represents a record item with associated calendar entries
            </summary>
            <remarks>
            This class is used in the CalendarListViewModel class
            </remarks>
            <seealso cref="T:Cenium.Framework.Client.Model.RecordItem" />
        </member>
        <member name="T:Cenium.Framework.Client.Model.EnumerationModel">
            <summary>
            Represents a model of enumeration items
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Model.EnumerationModelItem">
            <summary>
            Represents an item in the <c>EnumerationModel</c> class
            </summary>
            <seealso cref="T:Cenium.Framework.ComponentModel.NotifyPropertyChangedBase" />
            <seealso cref="T:Cenium.Framework.Client.Model.EnumerationModel" />
        </member>
        <member name="P:Cenium.Framework.Client.Model.EnumerationModelItem.Key">
            <summary>
            Gets the key value.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Model.EnumerationModelItem.Value">
            <summary>
            Gets the original display value.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Model.EnumerationModelItem.DisplayValue">
            <summary>
            Gets the translated display value.
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Model.ListViewModelPermissionHandler">
            <summary>
            Represents a class that checks if a user has access to a ListViewModel
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Model.ListViewModelPermissionHandler.IsReadPermittedCore(System.Collections.Generic.IEnumerable{Cenium.Framework.Client.AppResources.ValueItem})">
            <summary>
            Core logic for the IsReadPermitted method.
            </summary>
            <remarks>
            This method checks the QueryMethod property and verifies that the user has access to the specified property. This method will also return false if the QueryMethod property is null
            or when the specified query service method does not exist.
            </remarks>
            <param name="modelProperties">The model properties.</param>
            <returns>true if the user has read access; otherwise false</returns>
        </member>
        <member name="T:Cenium.Framework.Client.Model.ModelPermissionHandler">
            <summary>
            Represents a class that checks if a user has access to a model or not before the model has been instantiated
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Model.ModelPermissionHandler.IsReadPermitted(System.Collections.Generic.IEnumerable{Cenium.Framework.Client.AppResources.ValueItem})">
            <summary>
            Determines whether the current user has read access to the associated model type, given the specified model properties
            </summary>
            <param name="modelProperties">The model properties</param>
            <returns>true if the user has read access; otherwise false</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Model.ModelPermissionHandler.IsReadPermittedCore(System.Collections.Generic.IEnumerable{Cenium.Framework.Client.AppResources.ValueItem})">
            <summary>
            Core logic for the IsReadPermitted method. Inherited classes should override this method and provide their own logic
            </summary>
            <param name="modelProperties">The model properties.</param>
            <returns>true if the user has read access; otherwise false</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Model.ModelPermissionHandler.GetPropertyByName(System.Collections.Generic.IEnumerable{Cenium.Framework.Client.AppResources.ValueItem},System.String)">
            <summary>
            Helper method to get the value of a specified property
            </summary>
            <param name="modelProperties">The model properties to get the value from</param>
            <param name="name">The name of the property to find</param>
            <returns>The value of the specified property</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Model.ModelPermissionHandler.GetServiceMethod(System.String)">
            <summary>
            Gets a ServiceMethodInfo instance given the specified method name
            </summary>
            <param name="method">The service method name</param>
            <returns>A ServiceMethodInfo instance describing the service method, if the service method exists; otherwise null</returns>
        </member>
        <member name="T:Cenium.Framework.Client.Model.SimpleRecordViewModel">
            <summary>
            Non-saving view model.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Model.SimpleRecordViewModel.#ctor(Cenium.Framework.Client.Model.Record,System.Func{Cenium.Framework.Client.Model.Record,System.Boolean},System.Action{Cenium.Framework.Client.Model.Record})">
            <summary>
            Initializes a new instance of the <see cref="T:Cenium.Framework.Client.Model.SimpleRecordViewModel"/> class.
            </summary>
            <param name="record">The data for the model as a record.</param>
            <param name="saveDelegate">delegate that is executed during save (optional)</param>
            <param name="validateDelegate">delegate that validates the record (optional). </param>
        </member>
        <member name="P:Cenium.Framework.Client.Model.SimpleRecordViewModel.Item">
            <summary>
            Gets the Record instance that contains the data of the model
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Model.SimpleRecordViewModel.IsSaveEnabled">
            <summary>
            Returns true of the save method can be called, otherwise false.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Model.SimpleRecordViewModel.Save">
            <summary>
            Performs a save operation
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Model.SimpleRecordViewModel.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Model.IDataPager">
            <summary>
            Defines the interface for data paging of page templates
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Model.IDataPager.NavigateToFirst">
            <summary>
            Navigate to the first item in the data set
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Model.IDataPager.NavigateToLast">
            <summary>
            Navigate to the last item in the data set
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Model.IDataPager.NavigateToNext">
            <summary>
            Navigate to the next item in the data set
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Model.IDataPager.NavigateToPrevious">
            <summary>
            Navigate to the previous item in the data set
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Model.IDataPager.IsNavigateToFirstEnabled">
            <summary>
            Gets if navigate to first is enabled
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Model.IDataPager.IsNavigateToLastEnabled">
            <summary>
            Gets if navigate to last is enabled
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Model.IDataPager.IsNavigateToNextEnabled">
            <summary>
            Gets if navigate to next is enabled
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Model.IDataPager.IsNavigateToPreviousEnabled">
            <summary>
            Gets if navigate to previous is enabled
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Model.IDataPager.IsDataPagerSupported">
            <summary>
            Gets if the data pager is supported on page
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Model.IFilterHandler">
            <summary>
            Represents an object that can add filter expressions to a model
            </summary>
        </member>
        <member name="E:Cenium.Framework.Client.Model.IFilterHandler.FilterChanged">
            <summary>
            Triggered when the filter expression changes
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Model.IFilterHandler.IsFilterValid">
            <summary>
            Returns true if the filter is valid; otherwise false
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Model.IFilterHandler.FilterExpression">
            <summary>
            Gets the current filter expression
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Model.IFilterHandler.SearchExpression">
            <summary>
            Gets the current search expression
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Model.IPropertyContextModel">
            <summary>
            Defines a model that is property context aware
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Model.IPropertyContextModel.IgnoreUserPropertyContext">
            <summary>
            Gets or sets if the model should ignore the current user property context
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Model.IPropertyContextModel.IsPropertyContextSupported">
            <summary>
            Gets if the model supports property context
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Model.IPropertyContextModel.PropertyContextPropertyName">
            <summary>
            Gets the property name that implements the property context
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Model.IRecordItemModel">
            <summary>
            Explain the purpose of the interface here
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Model.IRecordWrapper">
            <summary>
            Defines a model item that wraps a record. Implementing this interface allows components to access the underlying Record instance, even if the model item itself is unknown.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Model.IRecordWrapper.GetRecord">
            <summary>
            Gets the underlying Record instance
            </summary>
            <returns>A record instance</returns>
        </member>
        <member name="T:Cenium.Framework.Client.Model.IFilterSupport">
            <summary>
            Represents a model that supports filtering
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Model.IFilterSupport.FilterExpression">
            <summary>
            Gets or sets the filter expression
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Model.IFilterSupport.AddHandler(Cenium.Framework.Client.Model.IFilterHandler)">
            <summary>
            Adds a filter handler to the model
            </summary>
            <param name="handler">The handler to add</param>
        </member>
        <member name="M:Cenium.Framework.Client.Model.IFilterSupport.RemoveFilterHandler(Cenium.Framework.Client.Model.IFilterHandler)">
            <summary>
            Removes a filter handler from the model
            </summary>
            <param name="handler">The handler to remove</param>
        </member>
        <member name="T:Cenium.Framework.Client.Model.ListViewModelSearchHandler">
            <summary>
            Search handler that creates a ListViewModel
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Model.ModelManager">
            <summary>
            Contains methods to create and manage data models
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Model.ModelManager.RegisterModelPermissionHandler(System.String,Cenium.Framework.Client.Model.ModelPermissionHandler)">
            <summary>
            Registers a model permission handler and associates the handler with a model identity.
            </summary>
            <param name="modelType">The model identity</param>
            <param name="handler">The model permission handler to associate with the model identity.</param>
        </member>
        <member name="M:Cenium.Framework.Client.Model.ModelManager.CheckUserAccess(System.String,System.Collections.Generic.IEnumerable{Cenium.Framework.Client.AppResources.ValueItem})">
            <summary>
            Checks if the current user has read-access to a specified model with the specified model properties.
            </summary>
            <param name="modelType">The model identity</param>
            <param name="modelProperties">The model properties.</param>
            <returns>True if the user has read access; otherwise false</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Model.ModelManager.CreateDataViewModelFromResource(System.String,Cenium.Framework.Client.AppResources.ValueItem[])">
            <summary>
            Creates a model based on a resource id
            </summary>
            <param name="resourceId">The resource identifier that defines the model to create.</param>
            <param name="properties">Any model properties to set when creating the model. This argument is optional</param>
            <returns>An IDataViewModel instance</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Model.ModelManager.ApplyModelProperties(Cenium.Framework.Client.Model.IDataViewModel,Cenium.Framework.Client.AppResources.ValueItem[])">
            <summary>
            Applies the model properties to the model instance
            </summary>
            <param name="model">The model to apply the properties to</param>
            <param name="properties">The properties to apply</param>
        </member>
        <member name="T:Cenium.Framework.Client.Model.SearchContext">
            <summary>
            Represents a search context, i.e. a grouping of related search handlers
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Model.SearchContext.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cenium.Framework.Client.Model.SearchContext"/> class.
            </summary>
            <param name="id">The identifier for the context.</param>
            <param name="name">The display-friendly name.</param>
        </member>
        <member name="P:Cenium.Framework.Client.Model.SearchContext.Id">
            <summary>
            Gets the identity of the context.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Model.SearchContext.Name">
            <summary>
            Gets the display-friendly name of the context.
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Model.SearchHandler">
            <summary>
            Base class for handling application search
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Model.SearchHandler.#ctor(System.String,System.String,Cenium.Framework.Client.Model.SearchContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Cenium.Framework.Client.Model.SearchHandler"/> class.
            </summary>
            <param name="id">The identifier for the search handler</param>
            <param name="name">The name of the search handler</param>
        </member>
        <member name="P:Cenium.Framework.Client.Model.SearchHandler.Id">
            <summary>
            Gets the identifier for the search handler
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Model.SearchHandler.Name">
            <summary>
            Gets the display friendly name of the search handler.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Model.SearchHandler.Context">
            <summary>
            Gets the context the handler belongs to
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Model.SearchHandler.ResultPageId">
            <summary>
            Gets or sets a page identifier for a page that displays all search results
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Model.SearchHandler.ItemPageId">
            <summary>
            Gets or sets a page identifier for a page that displays the currently selected item
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Model.SearchHandler.CreateModel">
            <summary>
            Creates the model to be used for searches
            </summary>
            <remarks>
            If the model is not ready to be populated (e.g. due to missing or not set properties, or invalid server methods) this method should return null
            </remarks>
            <returns>an <c>IListViewModel</c> instance</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Model.SearchHandler.Execute(Cenium.Framework.Client.Model.IListViewModel,System.String)">
            <summary>
            Executes a search on the model using the search expression.
            </summary>
            <param name="model">The model to execute a search on</param>
            <param name="searchExpression">The search expression to apply to the model</param>
        </member>
        <member name="T:Cenium.Framework.Client.Model.SearchManager">
            <summary>
            Handles registration and management of application search
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Model.SearchManager.TryAddContext(Cenium.Framework.Client.Model.SearchContext)">
            <summary>
            Tries the add the search context.
            </summary>
            <param name="context">The search context to try to add.</param>
            <returns>if the context is successfully added, the context argument is return; otherwise the existing context is returned.</returns>
        </member>
        <member name="P:Cenium.Framework.Client.Model.SearchManager.Contexts">
            <summary>
            Returns a read-only collection of the search contexts
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Model.SearchManager.AddSearchHandler(Cenium.Framework.Client.Model.SearchHandler)">
            <summary>
            Adds a SearchHandler to the search manager
            </summary>
            <param name="handler">The handler to add</param>
        </member>
        <member name="T:Cenium.Framework.Client.Model.StreamingListEnumerable">
            <summary>
            Defines a list view model that streams the data. This model is read-only
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Model.StreamingListEnumerable.#ctor">
            <summary>
            Initializes a new instance of the StreamingListViewModel class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Model.StreamingListEnumerable.QueryMethod">
            <summary>
            Gets or sets the query method to use
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Model.StreamingListEnumerable.MaxRecords">
            <summary>
            Gets or sets max number of records to retrieve
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Model.StreamingListEnumerable.FilterExpression">
            <summary>
            Gets or sets the filter expression
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Model.StreamingListEnumerable.SearchExpression">
            <summary>
            Gets or sets the search expression to use
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Model.StreamingListEnumerable.Parameters">
            <summary>
            Gets or sets any parameters used by the query method
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Model.StreamingListEnumerable.SortOrder">
            <summary>
            Gets or sets the sort order used by the query method
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Model.StreamingListEnumerable.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Cenium.Framework.Client.Model.StreamingListEnumerable.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:Cenium.Framework.Client.Model.IListViewModel">
            <summary>
            Defines a list model, i.e. a model with multiple items
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Model.IListViewModel.Count">
            <summary>
            Gets the number of items in the model
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Model.IListViewModel.IsEmpty">
            <summary>
            Returns true if the model is empty; otherwise false
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Model.ISearchable">
            <summary>
            Defines a searchable model
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Model.ItemModel">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Model.ItemModel.#ctor">
            <summary>
            Initializes a new instance of the ItemModel class
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Model.ItemModelWrapper">
            <summary>
            Base class for creating strongly typed models backed by a Record
            </summary>
        </member>
        <member name="E:Cenium.Framework.Client.Model.ItemModelWrapper.SaveCompleted">
            <summary>
            Occurs when the save operation has completed
            </summary>
        </member>
        <member name="E:Cenium.Framework.Client.Model.ItemModelWrapper.ItemLoaded">
            <summary>
            Occurs when the items have been loaded
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Model.ItemModelWrapper.#ctor">
            <summary>
            Initializes a new instance of the ItemModelWrapper class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Model.ItemModelWrapper.IsLoading">
            <summary>
            Gets if the model is loading
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Model.ItemModelWrapper.IsSaving">
            <summary>
            Gets if the model is saving
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Model.ItemModelWrapper.Load(System.Object[])">
            <summary>
            Loads the model from the server
            </summary>
            <param name="keys">The keys for the item to load</param>
        </member>
        <member name="M:Cenium.Framework.Client.Model.ItemModelWrapper.Save">
            <summary>
            Performs a save operation
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Model.ItemModelWrapper.Copy">
            <summary>
            Creates a copy of the model wrapper
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cenium.Framework.Client.Model.ItemModelWrapper.Merge(Cenium.Framework.Client.Model.ItemModelWrapper)">
            <summary>
            Merges another ItemModelWrapper with this model
            </summary>
            <param name="model">The model to merge into this one</param>
        </member>
        <member name="P:Cenium.Framework.Client.Model.ItemModelWrapper.IsSaveEnabled">
            <summary>
            Returns true of the save method can be called, otherwise false.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Model.ItemModelWrapper.GetMethod">
            <summary>
            Gets or sets the get method
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Model.ItemModelWrapper.CreateMethod">
            <summary>
            Gets or sets the Create method
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Model.ItemModelWrapper.UpdateMethod">
            <summary>
            Gets or sets the Update method
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Model.ItemModelWrapper.NotifyAllPropertiesChanged">
            <summary>
            Notifies that all properties have changed
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Model.ItemModelWrapper.IsEmpty">
            <summary>
            Gets if the model is empty
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Model.ItemModelWrapper.SetItemValue(System.String,System.Object)">
            <summary>
            Sets the item value in the underlying record
            </summary>
            <param name="name">The name of the property to set</param>
            <param name="value">The value to set</param>
        </member>
        <member name="M:Cenium.Framework.Client.Model.ItemModelWrapper.GetItemValue``1(System.String)">
            <summary>
            Gets the item value in the underlying record
            </summary>
            <typeparam name="T">The type of the value to get</typeparam>
            <param name="name">The name of the property to set</param>
            <returns>The item value</returns>
        </member>
        <member name="T:Cenium.Framework.Client.Model.ListViewModel">
            <summary>
            Default list view model
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Model.ListViewModel.#ctor">
            <summary>
            Initializes a new instance of the ListViewModel class
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Model.ListViewModel.AddHandler(Cenium.Framework.Client.Model.IFilterHandler)">
            <summary>
            Adds a filter handler to the model
            </summary>
            <param name="handler">The handler to add</param>
        </member>
        <member name="M:Cenium.Framework.Client.Model.ListViewModel.RemoveFilterHandler(Cenium.Framework.Client.Model.IFilterHandler)">
            <summary>
            Removes a filter handler from the model
            </summary>
            <param name="handler">The handler to remove</param>
        </member>
        <member name="P:Cenium.Framework.Client.Model.ListViewModel.FilterExpression">
            <summary>
            Gets or sets the filter expression
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Model.ListViewModel.IsRefreshEnabled">
            <summary>
            Returns true if the dataset can be refreshed, otherwise false
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Model.ListViewModel.Refresh">
            <summary>
            Performs the refresh operation
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Model.ListViewModel.IsClearEnabled">
            <summary>
            Returns true if the implementing class can be cleared, otherwise false
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Model.ListViewModel.IsSaveEnabled">
            <summary>
            Returns true of the save method can be called, otherwise false.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Model.ListViewModel.IsPropertyContextSupported">
            <summary>
            Gets if the model supports property context
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Model.ListViewModel.PropertyContextPropertyName">
            <summary>
            Gets the property name that implements the property context
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Model.ListViewModel.Save">
            <summary>
            Performs a save operation
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Model.ListViewModel.IsPropertyContextSupportedCore">
            <summary>
            Returns true if the model supports property context; otherwise false
            </summary>
            <returns>true if the model supports property context; otherwise false</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Model.ListViewModel.PropertyContextPropertyNameCore">
            <summary>
            Returns the model property name that contains the property context value.
            </summary>
            <returns>The model property name that contains the property context value</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Model.ListViewModel.IsClearEnabledCore">
            <summary>
            Returns true if the dataset can be cleared, otherwise false
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Model.ListViewModel.IsSaveEnabledCore">
            <summary>
            Returns true if the dataset in the model is dirty and can be saved; otherwise false
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cenium.Framework.Client.Model.ListViewModel.IsRefreshEnabledCore">
            <summary>
            Returns true if the dataset can be refreshed; otherwise false
            </summary>
            <returns>True if the dataset can be refreshed; otherwise false</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Model.ListViewModel.OnPropertyChanged(System.String)">
            <summary>
            Raises the PropertyChanged event for a specified property name. Note that the property is not raised if the event is disabled, or if no event handler is attached.
            </summary>
            <param name="propertyName">The name of the property that changed</param>
        </member>
        <member name="M:Cenium.Framework.Client.Model.ListViewModel.SaveCore">
            <summary>
            Executes the save functionality
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Model.ListViewModel.RefreshCore">
            <summary>
            Executes the refresh operation
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Model.ListViewModel.OnDispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Called by the Dispose method.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Model.ListViewModel.GetFilterExpression">
            <summary>
            Composes and returns the filter expression. This method is called when a refresh is performed
            </summary>
            <returns>Composes and returns the filter expression</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Model.ListViewModel.GetIsFilterValid">
            <summary>
            Returns true if the filters are valid; otherwise false
            </summary>
            <returns>true if the filters are valid; otherwise false</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Model.ListViewModel.GetSearchExpression">
            <summary>
            Composes and returns the search expression. This method is called when a refresh is performed
            </summary>
            <returns>A valid search expression</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Model.ListViewModel.NotifyFilterChanged">
            <summary>
            Notifies the model that the filter has changed.
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Model.ModelHelper">
            <summary>
            Contains methods to assist with data models
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Model.ModelHelper.IsRecordValid(Cenium.Framework.Client.Model.Record)">
            <summary>
            Checks if a record is valid or not
            </summary>
            <remarks>
            This method checks if all required fields have a value
            </remarks>
            <param name="record">The record to validate</param>
            <returns>true if the record is valid, otherwise false</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Model.ModelHelper.GetRecordType(System.Object)">
            <summary>
            Gets the record type from the data context. The data context must have a value and be of type Record or RecordItem
            </summary>
            <param name="datacontext">The data context to get the record type from</param>
            <returns>The record type associated with the data context</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Model.ModelHelper.GetRecordFromContext(System.Object)">
            <summary>
            Gets the current record from a datacontext object
            </summary>
            <param name="datacontext">The data context instance to get a record from</param>
            <returns>A record instance</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Model.ModelHelper.GetGetMethodFromModel(System.Object)">
            <summary>
            Gets the service get method from a model instance.
            </summary>
            <param name="model">The model to get the method from</param>
            <returns>A get method if the model supports it; otherwise null</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Model.ModelHelper.GetReferenceProperty(Cenium.Framework.Service.Metadata.EntityPropertyInfo)">
            <summary>
            Gets the entity reference property for a specified foreign key property
            </summary>
            <param name="foreignKeyProperty">The foreign key property</param>
            <returns>An <c>EntityPropertyInfo</c> instance, representing the reference property</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Model.ModelHelper.GetEntityPropertyInfo(Cenium.Framework.Client.Model.Record,System.String)">
            <summary>
            Gets the property info for a specified record and property name
            </summary>
            <param name="record">The record that contains the property</param>
            <param name="propertyName">The name of the property to get the information for</param>
            <returns>An <c>EntityPropertyInfo</c> instance if the property exists for the specified record; otherwise null</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Model.ModelHelper.GetEntityPropertyInfo(Cenium.Framework.Service.Metadata.EntityInfo,System.String)">
            <summary>
            Gets the property info for a specified entity and property name
            </summary>
            <param name="entityInfo">The entity that contains the property</param>
            <param name="propertyName">The name of the property to get the information for</param>
            <returns>An <c>EntityPropertyInfo</c> instance if the property exists for the specified entity; otherwise null</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Model.ModelHelper.GetEntityPropertyLabel(Cenium.Framework.Service.Metadata.EntityPropertyInfo)">
            <summary>
            Gets a label for the specified property
            </summary>
            <param name="property">The property to get the label for</param>
            <returns>A label text for the specified property</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Model.ModelHelper.GetDefaultQueryMethod(System.String)">
            <summary>
            Gets the default query method for a specified record type
            </summary>
            <param name="recordType">The record type to get the default query method for</param>
            <returns>The default query method for the specified record type. If the record type does not exist, or no default method is defined the return value is null.</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Model.ModelHelper.GetCreateMethodOrDefault(System.String,System.String)">
            <summary>
            Gets the ServiceMethodInfo for the specified create method, or if the create method is not specified, get the default create method for the record type
            </summary>
            <param name="recordType">Type of the record to get the method for.</param>
            <param name="createMethod">The method identifier for the create method.</param>
            <returns>The <c>ServiceMethodInfo</c> for the specified create method, or if the create method is not specified, get the default <c>ServiceMethodInfo</c> for the record typ</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Model.ModelHelper.CreateViewModel(System.Object)">
            <summary>
            Creates a IDataViewModel instance based on a data source.
            </summary>
            <remarks>
            Supported source types are <c>RecordChildList</c>, <c>Record</c> and <c>RecordItem</c>
            </remarks>
            <param name="source">The source to create a model from</param>
            <returns>an IDataViewModel instance</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Model.ModelHelper.GetValueListProperties(System.String)">
            <summary>
            Gets the properties to display in a value list for a specified record type
            </summary>
            <param name="recordType">The record type to get the value list properties for</param>
            <returns>An <c>IEnumerable</c> of string instances</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Model.ModelHelper.ToRecordEnumerable(System.Collections.Generic.IEnumerable{Cenium.Framework.Client.Model.RecordItem})">
            <summary>
            Converts an enumerable of RecordItem instances into an enumerable of Record items
            </summary>
            <param name="items">The enumerable to convert</param>
            <returns>an enumerable of Record items</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Model.ModelHelper.IsSearchable(System.Object)">
            <summary>
            Returns true if a model is searchable; otherwise false
            </summary>
            <param name="model">The model to check</param>
            <returns>true if a model is searchable; otherwise false</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Model.ModelHelper.SetSearchExpression(System.Object,System.String)">
            <summary>
            Sets the search expression if the model implements ISearchable
            </summary>
            <param name="model">The model to set the search expression on</param>
            <param name="expression">The search expression to set</param>
        </member>
        <member name="M:Cenium.Framework.Client.Model.ModelHelper.IsFilterable(System.Object)">
            <summary>
            Returns true if the model supports the <c>IFilterSupport</c> interface
            </summary>
            <param name="model">The model to check</param>
            <returns>true if the model supports the <c>IFilterSupport</c> interface; otherwise false</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Model.ModelHelper.IsPropertyContextSupported(System.Object)">
            <summary>
            Returns true if the model implements the <c>IPropertyContextModel</c> and the <c>IsPropertyContextSupported</c> property is true
            </summary>
            <param name="model">The model to check</param>
            <returns>true if the model implements the <c>IPropertyContextModel</c> and the <c>IsPropertyContextSupported</c> property is true; otherwise false</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Model.ModelHelper.GetPropertyContextPropertyName(Cenium.Framework.Service.Metadata.EntityInfo)">
            <summary>
            Gets the property name for the Property Context identifies of a specified entity
            </summary>
            <param name="entity">The entity to get the property name for</param>
            <returns>The name of the property that contains the property context identifier, or null if the entity is not property context specific</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Model.ModelHelper.GetPropertyContextFromRecord(Cenium.Framework.Client.Model.Record)">
            <summary>
            Gets the property context identifier from a record.
            </summary>
            <param name="record">The record that may contain a property context identifier</param>
            <returns>The property context identifier; or null if the record does not have a property context identifier</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Model.ModelHelper.IsAddEnabled(System.Object)">
            <summary>
            Gets a value that indicates whether a new item can be added to a model
            </summary>
            <value><c>true</c> if a new item can be added to the model; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Cenium.Framework.Client.Model.ModelHelper.IsEditEnabled(System.Object)">
            <summary>
            Gets a value that indicates whether an item can be edited
            </summary>
            <value><c>true</c> if an item can be edited; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Cenium.Framework.Client.Model.ModelHelper.IsRemoveEnabled(System.Object)">
            <summary>
            Gets a value that indicates whether an item can be removed from the model
            </summary>
            <value><c>true</c> if an item can be removed from the model; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Cenium.Framework.Client.Model.ModelHelper.Clear(System.Object)">
            <summary>
            Performs a model clear command if the model implements the IClearCommand interface
            </summary>
            <param name="model">The model to perform clear on</param>
        </member>
        <member name="M:Cenium.Framework.Client.Model.ModelHelper.RefreshItem(System.String,System.Object,System.Boolean,System.Action{System.Exception})">
            <summary>
            Refreshes a specific item using the specified get method.
            </summary>
            <param name="getMethod">The get method to use</param>
            <param name="item">The item to refresh</param>
            <param name="ignorePropertyContext">if set to <c>true</c>, the current user property context is ignored.</param>
            <param name="_errorHandler">An error handler action. If not specified, all errors are silently ignored.</param>
        </member>
        <member name="M:Cenium.Framework.Client.Model.ModelHelper.GetRecordDefaultsFromServer(System.String,Cenium.Framework.Client.Model.Record)">
            <summary>
            Invokes a method that returns default values using the specified method
            </summary>
            <param name="methodName">Name of the server method to invoke</param>
            <returns>An awaitable task</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Model.ModelHelper.GetEntityForServiceMethod(System.String)">
            <summary>
            Gets the EntityInfo associated with the return value of a service method
            </summary>
            <param name="serviceMethod">The service method to get the entity for</param>
            <returns>The <c>EntityInfo</c> instance associated with the service method, or null if the service method is invalid or doesn't return an entity.</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Model.ModelHelper.AddFilterHandler(System.Object,Cenium.Framework.Client.Model.IFilterHandler)">
            <summary>
            Adds a filter handler to a model, if the model implements the <c>IFilterSupport</c> interface.
            </summary>
            <param name="model">The model to add the handler to.</param>
            <param name="handler">The handler to add</param>
        </member>
        <member name="M:Cenium.Framework.Client.Model.ModelHelper.RemoveFilterHandler(System.Object,Cenium.Framework.Client.Model.IFilterHandler)">
            <summary>
            Removes a filter handler from a model, if the model implements the <c>IFilterSupport</c> interface.
            </summary>
            <param name="model">The model to remove the handler from.</param>
            <param name="handler">The handler to remove.</param>
        </member>
        <member name="T:Cenium.Framework.Client.Model.RecordItemListModel">
            <summary>
            Represents a dynamic data collection of RecordItem instances that provides notifications when items get added, removed, or when the whole list is refreshed
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Model.RecordItemListModel.#ctor(System.String,System.Collections.Generic.IEnumerable{Cenium.Framework.Client.Model.Record})">
            <summary>
            Initializes a new instance of the RecordItemListModel class that contains the elements copied from the specified collection
            </summary>
            <param name="records">The collection whose elements are copied to the new RecordItemListModel</param>
        </member>
        <member name="M:Cenium.Framework.Client.Model.RecordItemListModel.OnPropertyChanged(System.String)">
            <summary>
            Raises the PropertyChanged event for a specified property name. Note that the property is not raised if the event is disabled, or if no event handler is attached.
            </summary>
            <param name="propertyName">The name of the property that changed</param>
        </member>
        <member name="M:Cenium.Framework.Client.Model.RecordItemListModel.SetAndNotifyPropertyChanged``1(System.String,``0@,``0,System.String[])">
            <summary>
            Assigns a value to a property and raises the PropertyChanged event. This method will return without raising an event if the old and new values are the same.
            </summary>
            <typeparam name="T">The type of the property</typeparam>
            <param name="propertyName">The name of the property</param>
            <param name="property">The property variable reference</param>
            <param name="value">The new value</param>
            <param name="dependants">Any dependant properties that should have a PropertyChanged event triggered</param>
            <returns>True if the property value has changed, otherwise false</returns>
        </member>
        <member name="T:Cenium.Framework.Client.Model.IDataViewModel">
            <summary>
            Explain the purpose of the interface here
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Model.IDialogViewModel">
            <summary>
            Defines the contract that all dialog models must implement
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Model.IViewModel">
            <summary>
            Defines the contract that all models must implement
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Model.IWindowViewModel">
            <summary>
            Defines the basic contract for window view models
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Model.IWindowViewModel.Data">
            <summary>
            Gets the data for the view model
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.Actions.CreateItemDialogActionHandler">
            <summary>
            Represents an action handler for creating a new item, using a dialog
            </summary>
            <seealso cref="T:Cenium.Framework.Client.Windows.Actions.DialogActionHandlerBase" />
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Actions.CreateItemDialogActionHandler.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cenium.Framework.Client.Windows.Actions.CreateItemDialogActionHandler"/> class.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.Actions.CreateItemDialogActionHandler.ActionMethod">
            <summary>
            Gets or sets the action method to use when adding the item.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Actions.CreateItemDialogActionHandler.EvaluateConditions">
            <summary>
            Evaluates the conditions.
            </summary>
            <returns>true if the action is enabled; otherwise false</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Actions.CreateItemDialogActionHandler.CreateModel">
            <summary>
            Creates the model.
            </summary>
            <returns>An <c>ItemModel</c> instance</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Actions.CreateItemDialogActionHandler.OnDialogClosed(Cenium.Framework.Client.Windows.IDialogWindow,System.Boolean)">
            <summary>
            Called when the dialog closes
            </summary>
            <param name="dialog">The dialog</param>
            <param name="result">true if the dialog succeeded; otherwise false.</param>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.Actions.DataFileImportActionHandler">
            <summary>
            Action handler for data file import
            </summary>
            <seealso cref="T:Cenium.Framework.Client.Windows.Actions.DialogActionHandlerBase" />
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Actions.DataFileImportActionHandler.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cenium.Framework.Client.Windows.Actions.DataFileImportActionHandler"/> class.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.Actions.DataFileImportActionHandler.ImportMethod">
            <summary>
            Gets or sets the import method.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.Actions.DataFileImportActionHandler.ImportItemsPropertyName">
            <summary>
            Gets or sets the property name that contains the import items
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.Actions.DataFileImportActionHandler.ImportPaneId">
            <summary>
            Gets or sets the pane that contains the UI for the import record
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.Actions.DataFileImportActionHandler.ResultMessageTextPropertyName">
            <summary>
            Gets or sets the name of the property that contains the result message
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.Actions.DataFileImportActionHandler.Parameters">
            <summary>
            Gets or sets the parameters to transfer from the selected item on the page. Parameters are specified as key-value pairs
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.Actions.DataFileImportActionHandler.RefreshPageOnClose">
            <summary>
            Gets or sets if the page should be refreshed when the action close.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.Actions.DataFileImportActionHandler.RefreshItemOnClose">
            <summary>
            Gets or sets if the action item should be refreshed when the action close.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Actions.DataFileImportActionHandler.EvaluateConditions">
            <summary>
            Evaluates if the action is enabled or not
            </summary>
            <returns>True if the action is enabled; otherwise false</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Actions.DataFileImportActionHandler.CreateModel">
            <summary>
            Creates the model for the dialog
            </summary>
            <returns>An <c>IDataViewModel</c> instance for the dialog</returns>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.Actions.OpenWizardAction">
            <summary>
            Action that opens a wizard pane
            </summary>
            <seealso cref="T:Cenium.Framework.Client.Windows.Actions.ActionHandlerBase" />
        </member>
        <member name="P:Cenium.Framework.Client.Windows.Actions.OpenWizardAction.WizardId">
            <summary>
            Gets or sets the wizard identifier.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Actions.OpenWizardAction.OnExecute">
            <summary>
            Called when the Execute method is invoked
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Actions.OpenWizardAction.OnWizardCompleted(Cenium.Framework.Client.Windows.ActionResult)">
            <summary>
            Called when the wizard has been completed or cancelled
            </summary>
            <param name="result">The wizard result</param>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.Actions.ActionHandlerBase">
            <summary>
            Base class for implementing action handlers
            </summary>
        </member>
        <member name="E:Cenium.Framework.Client.Windows.Actions.ActionHandlerBase.CanExecuteChanged">
            <summary>
            Occurs when changes occur that affect whether or not the command should execute.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Actions.ActionHandlerBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cenium.Framework.Client.Windows.Actions.ActionHandlerBase"/> class.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.Actions.ActionHandlerBase.Id">
            <summary>
            Gets or sets the action handler identifier
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.Actions.ActionHandlerBase.Name">
            <summary>
            Get or sets the name of the action handler
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.Actions.ActionHandlerBase.Description">
            <summary>
            Get or set the description of the action handler
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.Actions.ActionHandlerBase.Owner">
            <summary>
            Gets or sets the owner page of the action handler
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.Actions.ActionHandlerBase.DisplayType">
            <summary>
            Gets or sets where the action will be displayed in the UI
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.Actions.ActionHandlerBase.ControlType">
            <summary>
            Gets or sets the control type for the action
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.Actions.ActionHandlerBase.Icon">
            <summary>
            Gets or sets the icon for the action
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.Actions.ActionHandlerBase.Group">
            <summary>
            Gets or sets the group the action belongs to. The group determines the grouping of action items
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.Actions.ActionHandlerBase.IsActionItemRequired">
            <summary>
            Gets or sets a value indicating whether this instance is action item required.
            </summary>
            <value>
            <c>true</c> if this instance is action item required; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Actions.ActionHandlerBase.AddConditions(Cenium.Framework.Client.AppResources.UI.ActionCondition[])">
            <summary>
            Adds the conditions.
            </summary>
            <param name="conditions">The conditions.</param>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.Actions.ActionHandlerBase.IsActionEnabled">
            <summary>
            Gets if the action is enabled or not
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.Actions.ActionHandlerBase.ActionItem">
            <summary>
            Gets or sets the object to execute an action on
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Actions.ActionHandlerBase.Execute">
            <summary>
            Executes the action
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Actions.ActionHandlerBase.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Actions.ActionHandlerBase.CanExecute(System.Object)">
            <summary>
            Defines the method that determines whether the command can execute in its current state.
            </summary>
            <param name="parameter">Data used by the command.  If the command does not require data to be passed, this object can be set to null.</param>
            <returns>
            true if this command can be executed; otherwise, false.
            </returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Actions.ActionHandlerBase.Execute(System.Object)">
            <summary>
            Defines the method to be called when the command is invoked.
            </summary>
            <param name="parameter">Data used by the command.  If the command does not require data to be passed, this object can be set to null.</param>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Actions.ActionHandlerBase.OnExecute">
            <summary>
            Called when the Execute method is invoked
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Actions.ActionHandlerBase.Invalidate">
            <summary>
            Forces the action to re-evaluate all conditions
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Actions.ActionHandlerBase.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Actions.ActionHandlerBase.EvaluateConditions">
            <summary>
            Evaluates the conditions.
            </summary>
            <returns>True if the action can execute; otherwise false</returns>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.Actions.ActionHandlerBase.Conditions">
            <summary>
            Gets the conditions associated with action handler
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Actions.ActionHandlerBase.OnActionItemChanged(System.Object,System.Object)">
            <summary>
            Called when the ActionItem property changes.
            </summary>
            <remarks>
            Use this method to attach/detach any item event handlers
            </remarks>
            <param name="oldValue">The old ActionItem value</param>
            <param name="newValue">The new ActionItem value</param>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Actions.ActionHandlerBase.OnPropertyChanged(System.String)">
            <summary>
            Raises the PropertyChanged event for a specified property name. Note that the property is not raised if the event is disabled, or if no event handler is attached.
            </summary>
            <param name="propertyName">The name of the property that changed</param>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Actions.ActionHandlerBase.GetPropertyValue(System.String)">
            <summary>
            Gets the value of a specified property from the ActionItem
            </summary>
            <param name="propertyName">The name of the property to get the value for</param>
            <returns>The value of the specified property</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Actions.ActionHandlerBase.SetAndInvalidate``1(System.String,``0@,``0,System.String[])">
            <summary>
            Assigns a value to a property, raises the PropertyChanged event and then invalidates the action handler by calling <c>Invalidate</c> . This method will return without raising an event if the old and new values are the same.
            </summary>
            <typeparam name="T">The type of the property</typeparam>
            <param name="propertyName">The name of the property</param>
            <param name="property">The property variable reference</param>
            <param name="value">The new value</param>
            <param name="dependants">Any dependant properties that should have a PropertyChanged event triggered</param>
            <returns>True if the property value has changed, otherwise false</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Actions.ActionHandlerBase.OnOwnerChanged">
            <summary>
            Called when the Owner property changes
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Actions.ActionHandlerBase.GetIconCore">
            <summary>
            Called when getting the icon. Implementers should override this method to add custom logic in retriving the icon
            </summary>
            <returns>An icon instance</returns>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.Actions.ActionHandlerCollection">
            <summary>
            Represents a collection of action handlers
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Actions.ActionHandlerCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cenium.Framework.Client.Windows.Actions.ActionHandlerCollection"/> class.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.Actions.ActionHandlerCollection.Owner">
            <summary>
            Gets or sets the action owner.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Actions.ActionHandlerCollection.Initialize(System.Collections.Generic.IEnumerable{Cenium.Framework.Client.AppResources.UI.ActionItem})">
            <summary>
            Initializes the specified action collection.
            </summary>
            <param name="actions">The actions to create</param>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Actions.ActionHandlerCollection.GetAction(System.String)">
            <summary>
            Gets the action handler for the specified id
            </summary>
            <param name="actionId">The action identifier.</param>
            <returns>An <c>IActionHandler</c> instance, or null if the action handler does not exist.</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Actions.ActionHandlerCollection.GetActionsByDisplayType(System.String)">
            <summary>
            Gets an enumerable of action handlers that has the specified display type
            </summary>
            <param name="displayType">The display type to get the handlers for</param>
            <returns>an IEnumerable of action handler instances</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Actions.ActionHandlerCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Actions.ActionHandlerCollection.GetCommandForAction(Cenium.Framework.Client.Windows.Actions.IActionHandler)">
            <summary>
            Gets the command for for an action handler
            </summary>
            <param name="handler">The handler to get the command for</param>
            <returns>An <c>ICommand</c> instance representing the action handler</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Actions.ActionHandlerCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Actions.ActionHandlerCollection.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.Actions.AttachedObjectActionHandlerBase">
            <summary>
            Base class for handling attached objects
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Actions.AttachedObjectActionHandlerBase.#ctor">
            <summary>
            Initializes a new instance of the AttachedObjectActionHandler class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.Actions.AttachedObjectActionHandlerBase.IsAttachedObjectAvailable">
            <summary>
            Gets or sets a value indicating whether this instance is attached object available.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Actions.AttachedObjectActionHandlerBase.EvaluateConditions">
            <summary>
            Evaluates all conditions to see whether the action should be enabled or not
            </summary>
            <returns>true if the action is enabled; otherwise false</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Actions.AttachedObjectActionHandlerBase.CreateModel">
            <summary>
            Creates the model used in the attached object dialog.
            </summary>
            <returns>A list model instance</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Actions.AttachedObjectActionHandlerBase.OnActionItemChanged(System.Object,System.Object)">
            <summary>
            Called when the ActionItem property changes.
            </summary>
            <param name="oldValue">The old ActionItem value</param>
            <param name="newValue">The new ActionItem value</param>
            <remarks>
            Use this method to attach/detach any item event handlers
            </remarks>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Actions.AttachedObjectActionHandlerBase.OnCreateModel(Cenium.Framework.Client.Model.ListViewModel)">
            <summary>
            Called when the dialog model is created. Implementers should override this method to supply additional model properties
            </summary>
            <param name="model">The model that was created</param>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.Actions.AttachedReportsActionHandlerBase">
            <summary>
            Base class for handling attached reports
            </summary>
            <seealso cref="T:Cenium.Framework.Client.Windows.Actions.AttachedObjectActionHandlerBase" />
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Actions.ModelActionHandlerBase.OnModelPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called when the Model property changes
            </summary>
            <param name="sender">The source of the event</param>
            <param name="e">The event data</param>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.Actions.NavigateToPageActionHandler">
            <summary>
            Action handler for navigating to another page
            </summary>
            <seealso cref="T:Cenium.Framework.Client.Windows.Actions.ActionHandlerBase" />
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Actions.NavigateToPageActionHandler.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cenium.Framework.Client.Windows.Actions.NavigateToPageActionHandler"/> class.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.Actions.NavigateToPageActionHandler.PageId">
            <summary>
            Gets or sets the page to navigate to.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.Actions.NavigateToPageActionHandler.PageNavigationOption">
            <summary>
            Gets or sets the page navigation option.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.Actions.NavigateToPageActionHandler.IconSize">
            <summary>
            Gets or sets the size of the icon for the action.
            </summary>
            <remarks>
            The IconSize property is only used when the icon from the page is being used
            </remarks>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.Actions.NavigateToPageActionHandler.FilterQuery">
            <summary>
            Gets or sets the filter query to use.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.Actions.NavigateToPageActionHandler.FilterQueryPropertyParameters">
            <summary>
            Gets or sets the query parameters to get from the page
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.Actions.NavigateToPageActionHandler.FilterPropertyNames">
            <summary>
            Gets an array of the filter property names.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Actions.NavigateToPageActionHandler.EvaluateConditions">
            <summary>
            Evaluates the conditions.
            </summary>
            <returns>true if the conditions to execute succeeds; otherwise false</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Actions.NavigateToPageActionHandler.OnExecute">
            <summary>
            Called when the action is executed
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.Actions.NavigateToPageActionHandler.IsPageAvailable">
            <summary>
            Gets a value indicating whether the page this action handler refers to is available
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Actions.NavigateToPageActionHandler.GetIconCore">
            <summary>
            if the Icon property has value; returns the icon, otherwise returns the icon from the page
            </summary>
            <returns>An icon instance</returns>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.Actions.ReportActionHandlerBase">
            <summary>
            Base class for action handlers that can create a report
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.Actions.ReportActionHandlerBase.SendOnMail">
            <summary>
            Gets or sets a value indicating whether the report should be sent on mail
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.Actions.ReportActionHandlerBase.ReportName">
            <summary>
            Gets or sets the report name
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.Actions.ReportActionHandlerBase.ReportParameters">
            <summary>
            Gets or sets the report parameters, by indicating a value list of report parameter names and record properties.
            [Report Parameter Name] = [Record Property Name]^[][]...
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.Actions.ReportPreviewActionHandler">
            <summary>
            Action handler for showing the report preview dialog.
            </summary>
            <remarks>This is an infrastructure handler and should not be used outside of internal framework code.</remarks>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.Actions.ViewChangeTrackingLogActionHandlerBase">
            <summary>
            Base class for action handlers that display a change tracking summary dialog
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.Actions.ViewChangeTrackingLogActionHandlerBase.IsItemMode">
            <summary>
            Gets or sets a value indicating the the dialog should show change log for all items on a page (IsItemMode = false) or just the selected item (IsItemMode = true).
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Actions.ViewChangeTrackingLogActionHandlerBase.EvaluateConditions">
            <summary>
            Evaluates the conditions.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Actions.ViewChangeTrackingLogActionHandlerBase.OnOwnerChanged">
            <summary>
            Called when the Owner property changes
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Actions.ViewChangeTrackingLogActionHandlerBase.CreateModel">
            <summary>
            Creates the model.
            </summary>
            <returns>An IDataViewModel to use in the dialog</returns>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.Actions.ActionManager">
            <summary>
            Manages the creation of action and action controls
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.Windows.Actions.ActionManager.IconAdd">
            <summary>
            Identifier for add action icon
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.Windows.Actions.ActionManager.IconDialog">
            <summary>
            Identifier for dialog action icon
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Actions.ActionManager.CreateActionHandler(Cenium.Framework.Client.AppResources.UI.ActionItem,System.Object)">
            <summary>
            Creates a new action handler instance based on an ActionItem configuration
            </summary>
            <param name="actionItem">The action configuration to create an instance for</param>
            <param name="owner">The owner page of the action</param>
            <returns>An <c>IActionHandler</c> instance</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Actions.ActionManager.CreateActionCommand(Cenium.Framework.Client.Windows.Actions.IActionHandler)">
            <summary>
            Creates an <c>ICommand</c> instance for an action handler
            </summary>
            <param name="handler">The handler to create an <c>ICommand</c> instance for</param>
            <returns>An <c>ICommand</c> instance for an action handler</returns>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.Actions.ActionSelectionChangedEventHandler">
            <summary>
            Represents the method that will handle the ActionSelectionChanged event
            </summary>
            <param name="sender">The source of the event</param>
            <param name="args">The event data</param>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.Actions.ActionEventArgs">
            <summary>
            Provides data for the <c>SelectionChanged</c> event
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Actions.ActionEventArgs.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the Events class
            </summary>
            <param name="actionItem">The action item associated with the event</param>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.Actions.ActionEventArgs.ActionItem">
            <summary>
            The action item instance associated with the event
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.Actions.IActionHandler">
            <summary>
            All page actions must implement the IActionHandler interface
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.Actions.IActionHandler.Id">
            <summary>
            Gets or sets the action handler identifier
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.Actions.IActionHandler.Name">
            <summary>
            Get or sets the name of the action handler
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.Actions.IActionHandler.Description">
            <summary>
            Get or set the description of the action handler
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.Actions.IActionHandler.Owner">
            <summary>
            Gets or sets the owner page of the action handler
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.Actions.IActionHandler.DisplayType">
            <summary>
            Gets or sets where the action will be displayed in the UI
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.Actions.IActionHandler.ControlType">
            <summary>
            Gets or sets the control type for the action
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.Actions.IActionHandler.Icon">
            <summary>
            Gets or sets the icon for the action
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.Actions.IActionHandler.Group">
            <summary>
            Gets or sets the group the action belongs to. The group determines the grouping of action items
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Actions.IActionHandler.AddConditions(Cenium.Framework.Client.AppResources.UI.ActionCondition[])">
            <summary>
            Adds one or more conditions to the action handler. Conditions tells the action handler when the action is enabled
            </summary>
            <param name="condition">The ActionCondition instance(s) to add</param>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.Actions.IActionHandler.IsActionEnabled">
            <summary>
            Gets if the action is enabled or not
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.Actions.IActionHandler.ActionItem">
            <summary>
            Gets or sets the object to execute an action on
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Actions.IActionHandler.Execute">
            <summary>
            Executes the action
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.Actions.ISelectionChangeActionHandler">
            <summary>
            Defines an action that can make the page selection change
            </summary>
        </member>
        <member name="E:Cenium.Framework.Client.Windows.Actions.ISelectionChangeActionHandler.ActionSelectionChanged">
            <summary>
            Triggered when the action performs a ActiobSelectionChanged event
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.Cell">
            <summary>
            Represents a cell in a grid
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Cell.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the Cell class
            </summary>
            <param name="col">The column in a grid the cell represents.</param>
            <param name="row">The row in a grid the cell represents.</param>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.Cell.Column">
            <summary>
            Gets the column in the grid
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.Cell.Row">
            <summary>
            Gets the row in the grid
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Cell.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Cell.Equals(Cenium.Framework.Client.Windows.Cell)">
            <summary>
            Determines whether the specified Cell, is equal to this instance.
            </summary>
            <param name="cell">The Cell instance to compare with this instance.</param>
            <returns><c>true</c> if the specified Cell instance is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Cell.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Cell.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Cell.GetCellRange(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the cells that cover a for a cell position and cell span
            </summary>
            <param name="row">The row.</param>
            <param name="col">The col.</param>
            <param name="rowspan">The number of rows the cell span.</param>
            <param name="colspan">The number of columns the cell span.</param>
            <returns>An array of cell objects that covers the cell span</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Cell.op_Equality(Cenium.Framework.Client.Windows.Cell,Cenium.Framework.Client.Windows.Cell)">
            <summary>
            Tests whether two Cell objects are identical
            </summary>
            <param name="c1">The first Cell object to compare.</param>
            <param name="c2">The second Cell object to compare.</param>
            <returns>True if the objects are identical; otherwise false</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Cell.op_Inequality(Cenium.Framework.Client.Windows.Cell,Cenium.Framework.Client.Windows.Cell)">
            <summary>
            Tests whether two Cell objects are different
            </summary>
            <param name="c1">The first Cell object to compare.</param>
            <param name="c2">The second Cell object to compare.</param>
            <returns>True if the objects are different; otherwise false</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Cell.Equals(Cenium.Framework.Client.Windows.Cell,Cenium.Framework.Client.Windows.Cell)">
            <summary>
            Checks if two Cell instances are identical
            </summary>
            <param name="c1">The first Cell instance to compare</param>
            <param name="c2">The second Cell instance to compare</param>
            <returns></returns>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.CellMap">
            <summary>
            Creates a map of all occupied cells in a grid
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.CellMap.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cenium.Framework.Client.Windows.CellMap"/> class.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.CellMap.#ctor(System.Collections.Generic.IEnumerable{Cenium.Framework.Client.Windows.CellRange})">
            <summary>
            Initializes a new instance of the <see cref="T:Cenium.Framework.Client.Windows.CellMap"/> class and initialize the map.
            </summary>
            <param name="cells">The cells that are occupied.</param>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.CellMap.#ctor(System.Collections.Generic.IEnumerable{Cenium.Framework.Client.Windows.Cell})">
            <summary>
            Initializes a new instance of the <see cref="T:Cenium.Framework.Client.Windows.CellMap"/> class and initialize the map.
            </summary>
            <param name="cells">The cells that are occupied.</param>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.CellMap.Add(Cenium.Framework.Client.Windows.Cell)">
            <summary>
            Marks a cell as occupied
            </summary>
            <param name="cell">The cell that is occupied.</param>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.CellMap.Add(Cenium.Framework.Client.Windows.CellRange)">
            <summary>
            Marks a cell range as occupied.
            </summary>
            <param name="range">The range to mark as occupied</param>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.CellMap.IsEmpty">
            <summary>
            Gets a value indicating whether the <c>CellMap</c> is empty
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.CellMap.IsRangeOccupied(Cenium.Framework.Client.Windows.CellRange)">
            <summary>
            Determines whether one or more cells in a cell range is occupied
            </summary>
            <param name="range">The range to determine</param>
            <returns><c>true</c> if one or more cells in the range is occupied; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.CellMap.IsRangeOccupied(Cenium.Framework.Client.Windows.Cell[])">
            <summary>
            Determines whether one or more cells in a cell range is occupied
            </summary>
            <param name="cells">The range to determine</param>
            <returns><c>true</c> if one or more cells in the range is occupied; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.CellMap.IsOccupied(Cenium.Framework.Client.Windows.Cell)">
            <summary>
            Determines whether the specified cell is occupied.
            </summary>
            <param name="cell">The cell to check if occupied</param>
            <returns><c>true</c> if the specified cell is occupied; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.CellMap.FindFirstAvailableCellRange(System.Int32,System.Int32,System.Int32)">
            <summary>
            Finds the next available cell for a cell range
            </summary>
            <param name="rowSpan">The number of rows that must be available</param>
            <param name="columnSpan">The number of columns that must be available</param>
            <param name="maxColumns">The max number of columns to consider before checking a new row.</param>
            <returns>A <c>Cell</c> reference to the first available space.</returns>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.CellSpan">
            <summary>
            Represents the size of a cell, expressed in column and row span.
            </summary>
            <remarks>
            The minimum size is [1,1] (i.e. column span = row span = 1).
            </remarks>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.CellSpan.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the CellSize class
            </summary>
            <param name="columnSpan">The number of columns the cell span.</param>
            <param name="rowSpan">The number of rows the cell span.</param>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.CellSpan.ColumnSpan">
            <summary>
            Gets the number of columns the cell span.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.CellSpan.RowSpan">
            <summary>
            Gets the number of rows the cell span
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.CellSpan.Equals(Cenium.Framework.Client.Windows.CellSpan)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.CellSpan.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.CellSpan.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.CellSpan.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.CellSpan.op_Equality(Cenium.Framework.Client.Windows.CellSpan,Cenium.Framework.Client.Windows.CellSpan)">
            <summary>
            Tests whether two CellSpan objects are identical
            </summary>
            <param name="sz1">The first CellSpan object to compare.</param>
            <param name="sz2">The second CellSpan object to compare.</param>
            <returns>True if the objects are identical; otherwise false</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.CellSpan.op_Inequality(Cenium.Framework.Client.Windows.CellSpan,Cenium.Framework.Client.Windows.CellSpan)">
            <summary>
            Tests whether two CellSpan objects are different
            </summary>
            <param name="sz1">The first CellSpan object to compare.</param>
            <param name="sz2">The second CellSpan object to compare.</param>
            <returns>True if the objects are different; otherwise false</returns>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.Controls.BindableProperty">
            <summary>
            Represents a bindable property
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Controls.BindableProperty.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Cenium.Framework.Client.Windows.Controls.BindableProperty"/> class.
            </summary>
            <param name="name">The property name</param>
            <param name="bindable">The object the binding occurs against.</param>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.Controls.BindableProperty.PropertyName">
            <summary>
            Gets the name of the property.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.Controls.BindableProperty.Bindable">
            <summary>
            Gets the object the binding occurs against.
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.Controls.Data.QuickAddConfiguration">
            <summary>
            Represents a quick add configuration
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.Controls.Data.QuickAddConfiguration.CreateMethod">
            <summary>
            Gets the create service method to use
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.Controls.Data.QuickAddConfiguration.DefaultValueMethod">
            <summary>
            Gets the default value service method to use to get default values
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.Controls.Data.QuickAddConfiguration.HasDefaultValueMethod">
            <summary>
            Returns <c>true</c> if the quick add configuration use a service method for default values
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.Controls.Data.QuickAddConfiguration.IsValid">
            <summary>
            Checks if the configuration is valid, and that the user have access to the service methods.
            </summary>
            <returns><c>true</c> if the configuration is valid and the user has access to the service methods; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.Controls.Data.QuickAddConfiguration.EditTemplate">
            <summary>
            Gets the edit layout template
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.Controls.Data.DataControlUtility">
            <summary>
            Contains helper methods for data controls
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Controls.Data.DataControlUtility.GetQuickAddConfiguration(System.String,System.String)">
            <summary>
            Gets the quick-add configuration to use for an entity.
            </summary>
            <remarks>
            This method will always return a value, even if the entity name is null or invalid.
            </remarks>
            <param name="entityName">Name of the entity.</param>
            <returns>A <c>QuickAddConfiguration</c> instance for the specified entity.</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Controls.Data.DataControlUtility.GetQuickAddConfiguration(Cenium.Framework.Service.Metadata.EntityInfo,System.String)">
            <summary>
            Gets the quick-add configuration to use for an entity.
            </summary>
            <remarks>
            This method will always return a value, even if the entity is null or invalid.
            </remarks>
            <param name="entity">The entity to get the quick-add configuration for.</param>
            <returns>A <c>QuickAddConfiguration</c> instance for the specified entity.</returns>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.Controls.LabelStyle">
            <summary>
            Pre-defined styles for a label
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.Windows.Controls.LabelStyle.Default">
            <summary>
            The default label style
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.Windows.Controls.LabelStyle.InfoHeader">
            <summary>
            Style used with information panels
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.Controls.ProgressState">
            <summary>
            Defines states for a progress control
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.Windows.Controls.ProgressState.Undefined">
            <summary>
            Operation state is undefined
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.Windows.Controls.ProgressState.Busy">
            <summary>
            Operation is in progress
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.Windows.Controls.ProgressState.Completed">
            <summary>
            Operation is successfully completed
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.Windows.Controls.ProgressState.Error">
            <summary>
            Operation is completed with error(s)
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.Windows.Controls.ProgressState.Warning">
            <summary>
            Operation is completed with warning(s)
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.Controls.PropertyContextSelection">
            <summary>
            Represents a selection of property contexts
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.Controls.PropertyContextSelectionMode">
            <summary>
            Represents the selection mode for a property context selection
            </summary>
            <seealso cref="T:Cenium.Framework.Client.Windows.Controls.PropertyContextSelection"/>
        </member>
        <member name="F:Cenium.Framework.Client.Windows.Controls.PropertyContextSelectionMode.All">
            <summary>
            All properties have been selected
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.Windows.Controls.PropertyContextSelectionMode.None">
            <summary>
            No properties have been selected
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.Windows.Controls.PropertyContextSelectionMode.Selection">
            <summary>
            One or more properties have been selected
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.Controls.ShowHideDisplayMode">
            <summary>
            Represents a toggle display mode
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.Windows.Controls.ShowHideDisplayMode.None">
            <summary>
            No options are available
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.Windows.Controls.ShowHideDisplayMode.Show">
            <summary>
            Show items
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.Windows.Controls.ShowHideDisplayMode.Hide">
            <summary>
            Hide items
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.Controls.IconDisplayMode">
            <summary>
            Defines how an icon is displayed in a control
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.Windows.Controls.IconDisplayMode.Normal">
            <summary>
            The normal (default) display mode
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.Windows.Controls.IconDisplayMode.Watermark">
            <summary>
            Icon is displayed as a watermark
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.Controls.AttachedObjectView">
            <summary>
            Represents information about an attached object
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.Controls.AttachedObjectView.Name">
            <summary>
            Gets the name of the attached object.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.Controls.AttachedObjectView.Description">
            <summary>
            Gets the description of the attached object.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.Controls.AttachedObjectView.QueryMethod">
            <summary>
            Gets the query method associated with the attached object.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.Controls.AttachedObjectView.PaneId">
            <summary>
            Gets the pane identifier of the pane that is used to display the attached object information
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.Controls.DataItemState">
            <summary>
            Represents the state of a data item
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.Windows.Controls.DataItemState.Unknown">
            <summary>
            The state is unknown
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.Windows.Controls.DataItemState.Queried">
            <summary>
            The item comes from the server
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.Windows.Controls.DataItemState.New">
            <summary>
            The item is new
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.Controls.IControl">
            <summary>
            Defines standard methods for a control
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Controls.IControl.ParentClosed">
            <summary>
            Called when a parent is closed and the control is no longer needed.
            </summary>
            <remarks>
            Use this method to
            </remarks>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.Controls.IDataItemControl">
            <summary>
            Represents a control that supports the record model
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.Controls.IDataItemControl.IsReadOnly">
            <summary>
            The item is read only
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.Controls.IDataItemControl.IsUpdateable">
            <summary>
            The item is updateable
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.Controls.IBindableListControl">
            <summary>
            Defines a control that implements a list with selectable items
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.Controls.IBindableListControl.SelectedItemBindingProperty">
            <summary>
            Gets the binding property for the bindable list control
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.Controls.IListControl">
            <summary>
            Defines a control that implements a list with selectable items
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.Controls.IListControl.SelectedItem">
            <summary>
            Gets the current selected item in the list
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.Controls.IReportViewer">
            <summary>
            Defines a control for displaying a report
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Controls.IReportViewer.SetSource(System.IO.Stream)">
            <summary>
            Sets the source data for the report.
            </summary>
            <param name="s">The source data as a Stream instance</param>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.Controls.IZoomSupport">
            <summary>
            Defines a mechanism for supporting control zoom functionality
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.Controls.IZoomSupport.ZoomEntityName">
            <summary>
            Gets the name of the zoom entity, i.e. the entity being referenced.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.Controls.IZoomSupport.ZoomValue">
            <summary>
            Gets the zoom value, usually a primary key
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.Controls.ProgressDisplayType">
            <summary>
            Defines different ways to display progress
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.Windows.Controls.ProgressDisplayType.Indeterminate">
            <summary>
            Display a generic, continous progress feedback
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.Windows.Controls.ProgressDisplayType.PercentCompleted">
            <summary>
            Display percentage completed
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.Controls.ZoomHelper">
            <summary>
            Contains methods to assist in creating zoom-enabled controls
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.Controls.ControlManager">
            <summary>
            The <c>ControlManager</c> class contains methods for creating user interface controls
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Controls.ControlManager.RegisterControlFactory(Cenium.Framework.Client.Windows.Controls.IControlFactory)">
            <summary>
            Registers a control factory
            </summary>
            <param name="factory">The factory to register</param>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Controls.ControlManager.RegisterLayoutControl(System.String,Cenium.Framework.Client.Windows.Controls.ILayoutControl)">
            <summary>
            Registers a layout control
            </summary>
            <param name="id">The identifier for the layout control</param>
            <param name="control">The layout control to register</param>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Controls.ControlManager.RegisterPaneAsLayoutControl(System.String,Cenium.Framework.Client.AppResources.UI.PaneConfiguration)">
            <summary>
            Registers a paneConfiguration as a layout control
            </summary>
            <param name="id">The identifier for the layout control</param>
            <param name="paneConfiguration">The pane configuration to turn into a layout control</param>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Controls.ControlManager.UnregisterLayoutControl(System.String)">
            <summary>
            Removes a registered layout control
            </summary>
            <param name="id">The identifier for the layout control</param>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Controls.ControlManager.RegisterReportViewer(System.String,System.Func{System.String,Cenium.Framework.Client.Windows.Controls.IReportViewer})">
            <summary>
            Registers a report viewer factory and associateds the factory with a render type
            </summary>
            <param name="renderType">The render type to associate the factory to</param>
            <param name="viewerFactory">A method that creates an IReportViewer instance</param>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Controls.ControlManager.CreateReportViewer(System.String)">
            <summary>
            Creates a report viewer based on a render type
            </summary>
            <param name="renderType">The render type</param>
            <returns>An <c>IReportViewer</c> instance, or null if no viewer is associated with the render type.</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Controls.ControlManager.RegisterReportCommand(System.Func{Cenium.Framework.Client.Windows.Controls.ReportCommand})">
            <summary>
            Registers a factory to create report commands.
            </summary>
            <param name="factory">The factory that creates the report command</param>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Controls.ControlManager.CreateReportCommands">
            <summary>
            Creates a collection of ReportCommand instances
            </summary>
            <returns>A collection of ReportCommand instances</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Controls.ControlManager.CreateLayoutControl(Cenium.Framework.Client.AppResources.UI.LayoutSection,Cenium.Framework.Client.AppResources.UI.LayoutItem)">
            <summary>
            Creates a UI layout control based on the settings of a LayoutSection and LayoutItem
            </summary>
            <param name="section">The section that owns the item</param>
            <param name="item">The item to base the control of</param>
            <returns>A layout control</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Controls.ControlManager.CreateLayoutControlAndLabel(Cenium.Framework.Client.AppResources.UI.LayoutSection,Cenium.Framework.Client.AppResources.UI.LayoutItem,Cenium.Framework.Client.Windows.Controls.LabelPosition,System.Double)">
            <summary>
            Creates a UI layout control and label
            </summary>
            <param name="section">The section that owns the item</param>
            <param name="item">The item to base the control of</param>
            <param name="position"></param>
            <param name="labelWidth"></param>
            <returns>A layout control with a label</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Controls.ControlManager.CreateLayoutControlAndLabel(Cenium.Framework.Client.AppResources.UI.LayoutSection,Cenium.Framework.Client.AppResources.UI.LayoutItem)">
            <summary>
            Creates a UI layout control and label
            </summary>
            <param name="section">The section that owns the item</param>
            <param name="item">The item to base the control of</param>
            <returns>A layout control with a label</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Controls.ControlManager.CreateLayoutControlAndLabel(Cenium.Framework.Client.AppResources.UI.LayoutSection,Cenium.Framework.Client.AppResources.UI.LayoutItem,System.Object)">
            <summary>
            Wraps an existing control into a control and label control
            </summary>
            <param name="section">The section the control belongs to</param>
            <param name="item">The definition for the control</param>
            <param name="control">The control to wrap</param>
            <returns>
            A control instance
            </returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Controls.ControlManager.CreatePaneControl(System.String)">
            <summary>
            Creates a control using a pane configuration to compose the layout
            </summary>
            <param name="identity">The identity of the pane</param>
            <returns>A new control instance</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Controls.ControlManager.CreateLabel(Cenium.Framework.Client.AppResources.UI.LayoutItem)">
            <summary>
            Creates a label for an item
            </summary>
            <param name="item">The item to create the label for</param>
            <returns>A UI label instance</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Controls.ControlManager.ReleaseLayoutControl(System.Object)">
            <summary>
            Clear the bindings and remove event listeners from a layout control
            </summary>
            <param name="control">The control to clear the bindings from</param>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Controls.ControlManager.RegisterEventHandler(System.String,System.EventHandler)">
            <summary>
            Registers an event handler and associates it with an identity.
            </summary>
            <param name="id">The identifier for the event handler</param>
            <param name="handler">The handler to register</param>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Controls.ControlManager.GetDefaultEnumerationControl">
            <summary>
            Gets the control identity of the default enumeration control.
            </summary>
            <returns>The identity of the default enumeration control.</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Controls.ControlManager.RegisterAttachedObjectView(Cenium.Framework.Client.Windows.Controls.AttachedObjectView)">
            <summary>
            Registers an <c>AttachedObjectView</c> instance with the control manager
            </summary>
            <param name="view">The view to register</param>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Controls.ControlManager.GetAttachedObjectView(System.String)">
            <summary>
            Gets an <c>AttachedObjectView</c> instance associated with the name argument
            </summary>
            <param name="name">The name of the <c>AttachedObjectView</c> to get.</param>
            <returns>The <c>AttachedObjectView</c> instance associated with the name argument, or null if no instance exists</returns>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.Controls.ControlManager.AttachedObjectViews">
            <summary>
            Returns an <c>IEnumerable</c> of registered <c>AttachedObjectView</c> instances.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Controls.ControlManager.RegisterPaneBinding(System.String,Cenium.Framework.Client.Windows.Controls.BindableProperty)">
            <summary>
            Registers a bindable property for a pane
            </summary>
            <param name="paneId">The pane identifier.</param>
            <param name="binding">The binding to register</param>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Controls.ControlManager.GetPaneBindings(System.String)">
            <summary>
            Gets the bindable properties for a pane
            </summary>
            <param name="paneId">The pane identifier.</param>
            <returns>A read-only collection of <c>BindableProperty</c> instances, representing the binding properties for the pane</returns>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.Controls.ControlManager.LayoutControlInfo.Id">
            <summary>
            Gets the identifier associated with the layout control
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.Controls.ControlManager.LayoutControlInfo.ControlType">
            <summary>
            Gets the type of control
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.Controls.ControlManager.LayoutControlInfo.Control">
            <summary>
            Gets the layout control
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.Controls.NamespaceDoc">
            <summary>
            Contains classes and interfaces used by the client framework to generate the UI
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.Controls.ButtonEventHandler">
            <summary>
            Represents the method that will handle a button event
            </summary>
            <param name="sender">The source of the event</param>
            <param name="args">The event data</param>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.Controls.ButtonEventArgs">
            <summary>
            Event data for button events
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Controls.ButtonEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ButtonEventArgs class
            </summary>
            <param name="buttonId">The identifier of the button that raised the event</param>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.Controls.ButtonEventArgs.ButtonId">
            <summary>
            Gets the button identifier that raised the event
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.Controls.IBindableLayoutPane">
            <summary>
            Represents a layout pane that supports data binding
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.Controls.IBindableLayoutPane.PaneBindingProperty">
            <summary>
            Gets the binding property that the pane can bind to
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.Controls.IButtonBarControl">
            <summary>
            Defines the contract for a button bar, i.e. a panel consisting of multiple buttons
            </summary>
        </member>
        <member name="E:Cenium.Framework.Client.Windows.Controls.IButtonBarControl.ButtonPressed">
            <summary>
            Raised when a button in the button bar is pressed
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Controls.IButtonBarControl.SetButtonState(System.String,System.Boolean)">
            <summary>
            Enables or disables a button with the given id
            </summary>
            <param name="buttonId">The button identifier</param>
            <param name="isEnabled">true if the button is enabled; otherwise false</param>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.Controls.IContentFrame">
            <summary>
            Represents a control that implements content
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.Controls.IContentFrame.Content">
            <summary>
            Gets or sets the content of the content frame
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.Controls.IControlFactory">
            <summary>
            Explain the purpose of the interface here
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Controls.IControlFactory.CreateLabel(Cenium.Framework.Client.AppResources.UI.LayoutItem)">
            <summary>
            Creates a label control for an item
            </summary>
            <param name="item">The item to create the label for</param>
            <returns>A label control instance</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Controls.IControlFactory.CreateLayoutControl(Cenium.Framework.Client.AppResources.UI.LayoutSection,Cenium.Framework.Client.AppResources.UI.LayoutItem)">
            <summary>
            Creates a control based on the layout definitions
            </summary>
            <param name="section">The section the control belongs to</param>
            <param name="item">The definition for the control</param>
            <returns>A control instance</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Controls.IControlFactory.CreateLayoutControlAndLabel(Cenium.Framework.Client.AppResources.UI.LayoutSection,Cenium.Framework.Client.AppResources.UI.LayoutItem,Cenium.Framework.Client.Windows.Controls.LabelPosition,System.Double)">
            <summary>
            Creates a control and label based on the layout definitions
            </summary>
            <param name="section">The section the control belongs to</param>
            <param name="item">The definition for the control</param>
            <param name="position">The position of the label</param>
            <param name="labelWidth">The width of the label</param>
            <returns>A control instance</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Controls.IControlFactory.CreateLayoutControlAndLabel(Cenium.Framework.Client.AppResources.UI.LayoutSection,Cenium.Framework.Client.AppResources.UI.LayoutItem,System.Object)">
            <summary>
            Wraps an existing control into a control and label control
            </summary>
            <param name="section">The section the control belongs to</param>
            <param name="item">The definition for the control</param>
            <param name="control">The control to wrap</param>
            <returns>
            A control instance
            </returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Controls.IControlFactory.ReleaseLayoutControl(System.Object)">
            <summary>
            Clear the bindings and remove event listeners from a layout control
            </summary>
            <param name="control">The control to clear the bindings from</param>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Controls.IControlFactory.CreatePaneAsLayoutControl(Cenium.Framework.Client.AppResources.UI.PaneConfiguration)">
            <summary>
            Creates a layout control from a pane configuration
            </summary>
            <param name="pane">The pane to convert into a layout control</param>
            <returns>An ILayoutControl instance</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Controls.IControlFactory.GetDefaultEnumerationControl">
            <summary>
            Gets the identity for the default enumeration control.
            </summary>
            <returns>The identity for the default enumeration control.</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Controls.IControlFactory.CreatePaneControl(Cenium.Framework.Client.AppResources.UI.PaneConfiguration)">
            <summary>
            Creates a control using the pane configuration for layout
            </summary>
            <param name="configuration">The configuration to use to compose the layout</param>
            <returns>A new control instance</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Controls.IControlFactory.CreateWizardPane(Cenium.Framework.Client.AppResources.UI.LayoutSection)">
            <summary>
            Creates a wizard pane based on a layout section
            </summary>
            <param name="section">The section that defines the layout</param>
            <returns>A new control instance</returns>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.Controls.IControlIdentity">
            <summary>
            Defines the contract for classes that have an identity. The identity is typically used to save and restore user settings for a control.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.Controls.IControlIdentity.Id">
            <summary>
            Gets or sets the identifier of the class
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.Controls.IDragSourceContainer">
            <summary>
            Defines a drag source container for drag and drop operations
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Controls.IDragSourceContainer.OnItemDragged(System.Object,System.Boolean)">
            <summary>
            Called when the drag and drop operation is completed
            </summary>
            <param name="item">The item being dragged and dropped</param>
            <param name="sameContainer">true if the drag and drop containers are the same</param>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.Controls.IDropTargetContainer">
            <summary>
            Defines a drop container for drag and drop operations
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Controls.IDropTargetContainer.OnItemDropped(System.Int32,System.Object,System.Boolean)">
            <summary>
            Called when an item is dropped within the container
            </summary>
            <param name="index">The child index where the item was dropped</param>
            <param name="dropItem">The item that was dropped</param>
            <param name="sameContainer">true if the drag and drop containers are the same instance</param>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.Controls.ILayoutControl">
            <summary>
            The ILayoutControl interface provides a common way to create an instance
            of a specific control
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.Controls.ILayoutControl.ShowLabel">
            <summary>
            Gets if the control should display a label. This is usually false if the control provides it's
            own label
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.Controls.ILayoutControl.ControlType">
            <summary>
            Gets the layout control type
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Controls.ILayoutControl.CreateElement(Cenium.Framework.Client.AppResources.UI.LayoutSection,Cenium.Framework.Client.AppResources.UI.LayoutItem)">
            <summary>
            Creates a new instance of a control based on the layout section and layout item attributes
            </summary>
            <param name="section">The section the control belongs to</param>
            <param name="item">The layout item that defines the behavior of the control</param>
            <returns>The layout element instance</returns>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.Controls.ILayoutControlInfo">
            <summary>
            Provides information about a layout control
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.Controls.ILayoutControlInfo.Id">
            <summary>
            Gets the identifier associated with the layout control
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.Controls.ILayoutControlInfo.ControlType">
            <summary>
            Gets the type of control
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.Controls.ILayoutControlInfo.Control">
            <summary>
            Gets the layout control
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.Controls.ILayoutPane">
            <summary>
            Represents a layout pane.
            </summary>
            <remarks>
            Panes are composite controls that are generated at runtime based on a pane configuration. These controls are automatically made available
            through the UI application resource
            </remarks>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Controls.ILayoutPane.ApplyPaneLayout(System.Object)">
            <summary>
            Called when the pane is instantiated. The control implementing the ILayoutPane is expected to layout child controls
            according to the definition in the configuration parameter
            </summary>
            <param name="paneConfiguration">The configuration describing the child elements to create</param>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.Controls.IListLayoutContainer">
            <summary>
            Identifies a control that supports child layouts in a list or grid form
            </summary>
        </member>
        <member name="E:Cenium.Framework.Client.Windows.Controls.IListLayoutContainer.LayoutChanged">
            <summary>
            Triggered when the layout has changed.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Controls.IListLayoutContainer.GetLayoutSection(System.String)">
            <summary>
            Gets a layout section by its identifier
            </summary>
            <param name="section">The section to get</param>
            <returns>The LayoutSection instance associated with the name, or null if the section does not exist</returns>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.Controls.LabelPosition">
            <summary>
            Defines the position of a label
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.Windows.Controls.LabelPosition.Top">
            <summary>
            The label is placed above the control
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.Windows.Controls.LabelPosition.Left">
            <summary>
            The label is placed to the left of the control
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.Controls.LayoutControlType">
            <summary>
            Explain the purpose of the enumeration here
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.Controls.ILayoutContainer">
            <summary>
            Identifies a control that performs its own layout
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Controls.ILayoutContainer.BeginApplyLayout">
            <summary>
            Called before the layout is applied.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Controls.ILayoutContainer.EndApplyLayout">
            <summary>
            Called after layout has completed
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Controls.ILayoutContainer.ApplyLayout(System.Object)">
            <summary>
            Called when the control must layout its children. This method may be called multiple times
            </summary>
            <param name="children">The children to layout</param>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Controls.ILayoutContainer.OnClose">
            <summary>
            Called when the parent control close. Use this method to perform any cleanup
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.Controls.IUserConfigurable">
            <summary>
            Defines the interface of a user configurable control
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Controls.IUserConfigurable.ApplyUserSettings(Cenium.Framework.Client.Windows.Controls.IUserConfiguration)">
            <summary>
            Called when the control must apply user settings
            </summary>
            <param name="configuration">The configuration to apply</param>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Controls.IUserConfigurable.SaveUserSettings(Cenium.Framework.Client.Windows.Controls.IUserConfiguration)">
            <summary>
            Called when the control must save any user configurations
            </summary>
            <param name="configuration">The configuration to apply</param>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.Controls.IUserConfiguration">
            <summary>
            Represents a set of configuration items for a user
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Controls.IUserConfiguration.SetValue(System.String,System.String,System.Object)">
            <summary>
            Sets a configuration item value
            </summary>
            <param name="id">The identify of the configuration item</param>
            <param name="propertyName">The name of the property to set</param>
            <param name="value">The value associated with the configuration item</param>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Controls.IUserConfiguration.GetValue(System.String,System.String)">
            <summary>
            Gets the value associated with a configuration item
            </summary>
            <param name="id">The identify of the configuration item</param>
            <param name="propertyName">The name of the property to get</param>
            <returns>The value associated with the configuration item, or null if no value is defined</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Controls.IUserConfiguration.GetValue(System.String,System.String,System.Object)">
            <summary>
            Gets the value associated with a configuration item
            </summary>
            <param name="id">The identify of the configuration item</param>
            <param name="defaultValue">The default value to use if the configuration item value is null</param>
            <param name="propertyName">The name of the property to get</param>
            <returns>The value associated with the configuration item, or the default value if the configuration value is null</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Controls.IUserConfiguration.GetValue``1(System.String,System.String)">
            <summary>
            Gets the value associated with a configuration item
            </summary>
            <param name="id">The identify of the configuration item</param>
            <param name="propertyName">The name of the property to get</param>
            <returns>The value associated with the configuration item, or null if no value is defined</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Controls.IUserConfiguration.GetValue``1(System.String,System.String,``0)">
            <summary>
            Gets the value associated with a configuration item
            </summary>
            <param name="id">The identify of the configuration item</param>
            <param name="defaultValue">The default value to use if the configuration item value is null</param>
            <param name="propertyName">The name of the property to get</param>
            <returns>The value associated with the configuration item, or the default value if the configuration value is null</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Controls.IUserConfiguration.Contains(System.String,System.String)">
            <summary>
            Determines whether the configuration contains the specified item.
            </summary>
            <param name="id">The identify of the configuration item</param>
            <param name="propertyName">The name of the property to check for</param>
            <returns>
              <c>true</c> if the configuration contains the item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Controls.IUserConfiguration.UnsetValue(System.String,System.String)">
            <summary>
            Removes a value associated with the specified id and property name
            </summary>
            <param name="id">The identify of the configuration item</param>
            <param name="propertyName">The name of the property to unset</param>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.Controls.UserConfigurationHelper">
            <summary>
            Contains helper and extension methods to get and set user configuration values
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Controls.UserConfigurationHelper.SetDouble(Cenium.Framework.Client.Windows.Controls.IUserConfiguration,System.String,System.String,System.Double)">
            <summary>
            Sets a configuration value as a double
            </summary>
            <param name="configuration">The configuration item to apply the setting to</param>
            <param name="id">The identify of the configuration item</param>
            <param name="propertyName">The name of the property to set</param>
            <param name="value">The value associated with the configuration item</param>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Controls.UserConfigurationHelper.GetDouble(Cenium.Framework.Client.Windows.Controls.IUserConfiguration,System.String,System.String,System.Double)">
            <summary>
            Gets a configuration value as a double
            </summary>
            <param name="configuration">The configuration item to apply the setting to</param>
            <param name="id">The identify of the configuration item</param>
            <param name="propertyName">The name of the property to set</param>
            <param name="defaultValue">The default value to use if no configuration value exist</param>
            <returns>a configuration value as a double</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Controls.UserConfigurationHelper.GetDouble(Cenium.Framework.Client.Windows.Controls.IUserConfiguration,System.String,System.String)">
            <summary>
            Gets a configuration value as a double
            </summary>
            <param name="configuration">The configuration item to apply the setting to</param>
            <param name="id">The identify of the configuration item</param>
            <param name="propertyName">The name of the property to set</param>
            <returns>a configuration value as a double</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Controls.UserConfigurationHelper.SetBool(Cenium.Framework.Client.Windows.Controls.IUserConfiguration,System.String,System.String,System.Boolean)">
            <summary>
            Sets a configuration value as a bool
            </summary>
            <param name="configuration">The configuration item to apply the setting to</param>
            <param name="id">The identify of the configuration item</param>
            <param name="propertyName">The name of the property to set</param>
            <param name="value">The value associated with the configuration item</param>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Controls.UserConfigurationHelper.GetBool(Cenium.Framework.Client.Windows.Controls.IUserConfiguration,System.String,System.String)">
            <summary>
            Sets a configuration value as a bool
            </summary>
            <param name="configuration">The configuration item to apply the setting to</param>
            <param name="id">The identify of the configuration item</param>
            <param name="propertyName">The name of the property to set</param>
            <returns>a configuration value as a bool</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Controls.UserConfigurationHelper.GetBool(Cenium.Framework.Client.Windows.Controls.IUserConfiguration,System.String,System.String,System.Boolean)">
            <summary>
            Sets a configuration value as a bool
            </summary>
            <param name="configuration">The configuration item to apply the setting to</param>
            <param name="id">The identify of the configuration item</param>
            <param name="propertyName">The name of the property to set</param>
            <param name="defaultValue">The default value to use if no configuration value exist</param>
            <returns>a configuration value as a bool</returns>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.CellRange">
            <summary>
            Describes a cell range (a cell with row and column spans) in a grid system
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.CellRange.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the CellRange class
            </summary>
            <param name="column">The column the cell is in</param>
            <param name="row">The row the cell is in</param>
            <param name="colSpan">The number of columns the cell span</param>
            <param name="rowSpan">The number of rows the cell span</param>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.CellRange.Row">
            <summary>
            Gets the row for the cell
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.CellRange.RowSpan">
            <summary>
            Gets the number of rows the cell span
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.CellRange.Column">
            <summary>
            Gets the column for the cell
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.CellRange.ColumnSpan">
            <summary>
            Gets the number of columns the cell span
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.CellRange.Equals(Cenium.Framework.Client.Windows.CellRange)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.CellRange.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.CellRange.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.CellRange.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.CellRange.op_Equality(Cenium.Framework.Client.Windows.CellRange,Cenium.Framework.Client.Windows.CellRange)">
            <summary>
            Tests whether two CellRange objects are identical
            </summary>
            <param name="cr1">The first CellRange object to compare.</param>
            <param name="cr2">The second CellRange object to compare.</param>
            <returns>True if the objects are identical; otherwise false</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.CellRange.op_Inequality(Cenium.Framework.Client.Windows.CellRange,Cenium.Framework.Client.Windows.CellRange)">
            <summary>
            Tests whether two CellRange objects are different
            </summary>
            <param name="cr1">The first CellRange object to compare.</param>
            <param name="cr2">The second CellRange object to compare.</param>
            <returns>True if the objects are different; otherwise false</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.CellRange.Contains(Cenium.Framework.Client.Windows.Cell)">
            <summary>
            Determines whether a Cell is within the CellRange
            </summary>
            <param name="cell">The cell to check</param>
            <returns><c>true</c> if the cell is within the CellRange; otherwise <c>false</c>
            </returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.CellRange.Contains(System.Int32,System.Int32)">
            <summary>
            Determines whether a row and column is within the CellRange
            </summary>
            <param name="row">The cell row to check</param>
            <param name="column">The cell column to check</param>
            <returns><c>true</c> if the row and column is within the CellRange; otherwise <c>false</c>
            </returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.CellRange.IntersectsWith(Cenium.Framework.Client.Windows.CellRange)">
            <summary>
            Determines if this CellRange intersects with range
            </summary>
            <param name="range">The range to determine if intersect with this CellRange</param>
            <returns><c>true</c> if this CellRange intersects with range; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.CellRange.IntersectsWith(Cenium.Framework.Client.Windows.Cell)">
            <summary>
            Determines if this CellRange intersects with cell
            </summary>
            <param name="cell">The Cell to determine if intersects with this CellRange.</param>
            <returns><c>true</c> if this CellRange intersects with cell; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.CellRange.ToCells">
            <summary>
            Converts this <c>CellRange</c> to an array of cells.
            </summary>
            <returns>An array of <c>Cell</c> instances that covers the area of this <c>CellRange</c>.</returns>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.IWidgetContentPane">
            <summary>
            Defines the contract for a widget content pane
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.IWidgetContentPane.LayoutSections">
            <summary>
            Gets or sets the layout sections used to perform layout for a widget
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.IWidgetContentPane.Model">
            <summary>
            Gets or sets the model the widget is associated with
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.IWidgetContentPane.ConfigurationDataContext">
            <summary>
            Gets or sets the data context that contains the configuration data
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.IWidgetContentPane.Refresh">
            <summary>
            Performs a data refresh of the widget
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.IWidgetContentPane.OnExpandView">
            <summary>
            Called when the user initiates the Expand View command
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.IWidgetContentPane.IsExpandViewCommandEnabled">
            <summary>
            Gets a value indicating whether the expand view command is enabled
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.IWidgetContentPane.OnConfigurationChanged(Cenium.Framework.Client.Model.Record)">
            <summary>
            Called when the widget configuration change
            </summary>
            <param name="configuration">The configuration data. Note that this value can be null.</param>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.IWidgetContentPane.State">
            <summary>
            Gets the current state of the widget
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.Media.IconResource">
            <summary>
            Represents an icon resource
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Media.IconResource.#ctor(Cenium.Framework.Client.Windows.Media.IconSize,Cenium.Framework.Client.Windows.Media.IconResourceOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Cenium.Framework.Client.Windows.Media.IconResource"/> class.
            </summary>
            <param name="size">The icon size.</param>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.Media.IconResource.Size">
            <summary>
            Gets or sets the size the icon size.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.Media.IconResource.PixelSize">
            <summary>
            Gets the pixel size of the icon
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.Media.IconResource.Source">
            <summary>
            Gets the source of the icon
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.Media.IconResource.Icon">
            <summary>
            Gets the icon image.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.Media.IconResource.IsScaled">
            <summary>
            Gets a value that represents if this icon resource has been scaled up/down from another resource
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.Media.IconResourceOptions">
            <summary>
            Defines option flags for an icon resource
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.Windows.Media.IconResourceOptions.None">
            <summary>
            No options specified
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.Windows.Media.IconResourceOptions.Public">
            <summary>
            The icon resource is public, i.e. it can be used by any component
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.Media.IconResourceSource">
            <summary>
            Defines the source of an <c>IconResource</c> instance
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.Windows.Media.IconResourceSource.Unknown">
            <summary>
            Source is unknown - icon was added directly or is invalid
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.Windows.Media.IconResourceSource.Resource">
            <summary>
            Icon is loaded from a resource file
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.Windows.Media.IconResourceSource.Scaled">
            <summary>
            Icon is created from a larger or smaller icon
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.Media.IconManager">
            <summary>
            Manages icons by identifier
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Media.IconManager.Register(System.String,System.Object)">
            <summary>
            Associates an icon with an identifier.
            </summary>
            <remarks>
            For embedded resources, it is recommended to not pre-load the image; if an image path is specified the image is loaded and cached on demand.
            </remarks>
            <param name="id">The identifier to associate with the icon</param>
            <param name="icon">The icon to register. This can either be an image or a path to the image</param>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Media.IconManager.Register(System.String,System.Object,Cenium.Framework.Client.Windows.Media.IconResourceOptions)">
            <summary>
            Associates an icon with an identifier.
            </summary>
            <remarks>
            For embedded resources, it is recommended to not pre-load the image; if an image path is specified the image is loaded and cached on demand.
            </remarks>
            <param name="id">The identifier to associate with the icon</param>
            <param name="icon">The icon to register. This can either be an image or a path to the image</param>
            <param name="options">The options associated with the icon resource.</param>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Media.IconManager.RegisterResourceFolder(System.String,System.Resources.ResourceFolder,Cenium.Framework.Client.Windows.Media.IconResourceOptions)">
            <summary>
            Registers all icons within a resource folder
            </summary>
            <param name="prefix">The prefix identifier to associate with the icon</param>
            <param name="folder">The resource folder where the icons resides.</param>
            <param name="options">The options associated with the icons in the folder.</param>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Media.IconManager.SetDimensionHandler(System.Func{System.Object,Cenium.Framework.Media.Dimension})">
            <summary>
            Sets a delegate used to calculate an icons dimensions. This is an infrastructure method and should not be called outside the framework.
            </summary>
            <param name="handler">The delegate method to set.</param>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Media.IconManager.GetIconResource(System.String,Cenium.Framework.Client.Windows.Media.IconSize)">
            <summary>
            Gets an icon resource based on identity and size
            </summary>
            <param name="identity">The identity of the icon resource.</param>
            <param name="size">The size of the icon.</param>
            <returns>The <c>IconResource</c> associated with the identity.</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Media.IconManager.GetRegisteredIcons(System.String)">
            <summary>
            Gets all the registered icon identifiers. If a prefix is specified, returns only identifiers with that prefix.
            </summary>
            <param name="prefix">If specified, return only identifiers that starts with the specified prefix value.</param>
            <returns>An enumerable of icon identifiers.</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Media.IconManager.GetIcon(System.String)">
            <summary>
            Gets an icon based on an identier. If the icon is not loaded, this method will try to resolve icons using the registered icon resolvers
            </summary>
            <param name="id">The identifier for the icon</param>
            <returns>An icon instance; or null if the icon is not found</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Media.IconManager.GetIcon(System.String,Cenium.Framework.Client.Windows.Media.IconSize)">
            <summary>
            Gets an icon based on an identier, and scales the icon to the specified size if necessary. If the icon is not loaded, this method will try to resolve icons using the registered icon resolvers
            </summary>
            <param name="id">The identifier for the icon</param>
            <param name="size">The size of the icon to get</param>
            <returns>An icon instance; or null if the icon is not found</returns>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.Media.IconSize">
            <summary>
            Defines standard icon sizes
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.Windows.Media.IconSize.Unknown">
            <summary>
            Defines an icon with unknow pixel size
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.Windows.Media.IconSize.Small">
            <summary>
            Defines an icon that is 16x16 pixels
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.Windows.Media.IconSize.Medium">
            <summary>
            Defines an icon that is 24x24 pixels
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.Windows.Media.IconSize.Large">
            <summary>
            Defines an icon that is 32x32 pixels
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.Windows.Media.IconSize.XLarge">
            <summary>
            Defines an icon that is 48x48 pixels or larger
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.Media.IIconHandler">
            <summary>
            Defines a mechanism that handles icons
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Media.IIconHandler.Scale(System.Object,Cenium.Framework.Client.Windows.Media.IconSize)">
            <summary>
            Scales an icon to the size given in the size argument
            </summary>
            <param name="icon">The icon to scale</param>
            <param name="size">The size to scale the icon to</param>
            <returns>A scaled icon</returns>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.PageNavigationArgs">
            <summary>
            Represents arguments used when navigating to a new page
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.PageNavigationArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the PageNavigationArgs class
            </summary>
            <param name="page">The identity of the page to navigate to</param>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.PageNavigationArgs.Page">
            <summary>
            Gets the page to navigate to
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.PageNavigationArgs.NavigationOptions">
            <summary>
            Gets or sets the navigation options.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.PageNavigationArgs.Filter">
            <summary>
            Gets or sets the filter to apply to the page
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.PageNavigationArgs.ViewMode">
            <summary>
            Gets or sets the view mode to open the page in
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.ValueListArgs">
            <summary>
            Represents arguments used when creating a value list
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.ValueListArgs.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Cenium.Framework.Client.Windows.ValueListArgs"/> class.
            </summary>
            <param name="queryMethod">The query method to use</param>
            <param name="queryParameters">The query parameters to use</param>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.ValueListArgs.QueryMethod">
            <summary>
            Gets the service query method.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.ValueListArgs.QueryParameters">
            <summary>
            Gets the service query parameters.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.ValueListArgs.Properties">
            <summary>
            Gets or sets the value list properties to show. If not specified, the default defined for the entity is used.
            </summary>
            <remarks>
            The list of properties must be comma or semicolon separated.
            </remarks>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.ValueListArgs.GetValueListProperties">
            <summary>
            Gets the value list as a read-only list of property names
            </summary>
            <returns></returns>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.WidgetState">
            <summary>
            Define states for a widget
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.Windows.WidgetState.Normal">
            <summary>
            The widget is in a normal state
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.Windows.WidgetState.NeedConfiguration">
            <summary>
            The widget is missing a configuration
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.Windows.WidgetState.Error">
            <summary>
            The widget is in an error state
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.Windows.WidgetState.NoAccess">
            <summary>
            The user does not have access to the widget
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.Wizards.WizardConfigurationInfo">
            <summary>
            Represents a wizard where the wizard is defined as a dialog application resource
            </summary>
            <seealso cref="T:Cenium.Framework.Client.Windows.Wizards.WizardInfo" />
        </member>
        <member name="T:Cenium.Framework.Client.Windows.Wizards.IWizardModel">
            <summary>
            Defines the contract for a wizard model
            </summary>
            <seealso cref="T:System.ComponentModel.INotifyPropertyChanged" />
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Wizards.IWizardModel.ExecuteAsync">
            <summary>
            Called when the wizard is executed
            </summary>
            <returns></returns>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.Wizards.IWizardModel.CurrentPage">
            <summary>
            Gets or sets the current wizard page
            </summary>
            <value>
            The current page index (starting with 0).
            </value>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.Wizards.IWizardModel.IsNextEnabled">
            <summary>
            Gets a value indicating whether the next page is enabled
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.Wizards.IWizardHost">
            <summary>
            Defines the contract for a wizard host
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.Wizards.IWizardHost.Model">
            <summary>
            Gets the wizard model associated with the wizard
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.Wizards.PaneWizardInfo">
            <summary>
            Represents a wizard where the wizard pages are created from layout panes
            </summary>
            <seealso cref="T:Cenium.Framework.Client.Windows.Wizards.WizardInfo" />
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Wizards.PaneWizardInfo.Create(System.String,System.String,System.Func{Cenium.Framework.Client.Windows.Wizards.IWizardModel},System.String[])">
            <summary>
            Creates a new <c>WizardInfo</c> instance
            </summary>
            <param name="title">The wizard title</param>
            <param name="description">The wizard description.</param>
            <param name="modelFactory">The model factory for creating a model for the wizard.</param>
            <param name="paneIdentities">The pane identities for the layout panes to use as wizard pages.</param>
            <returns>a new <c>WizardInfo</c> instance.</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Wizards.PaneWizardInfo.Create(System.String,System.String,System.String,System.String[])">
            <summary>
            Creates a new <c>WizardInfo</c> instance
            </summary>
            <param name="title">The wizard title</param>
            <param name="description">The wizard description.</param>
            <param name="modelIdentity">The identity of the model to create for the wizard. The model must implement the <c>IWizardModel</c> interface.</param>
            <param name="paneIdentities">The pane identities for the layout panes to use as wizard pages.</param>
            <returns>a new <c>WizardInfo</c> instance.</returns>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.Wizards.WizardInfo">
            <summary>
            Represents information about a wizard. This is a base class that must be inherited
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Wizards.WizardInfo.#ctor(System.String,System.String,System.Func{Cenium.Framework.Client.Windows.Wizards.IWizardModel})">
            <summary>
            Initializes a new instance of the <see cref="T:Cenium.Framework.Client.Windows.Wizards.WizardInfo"/> class.
            </summary>
            <param name="title">The wizard title</param>
            <param name="description">The wizard description.</param>
            <param name="modelFactory">A factor method to create a model for the wizard.</param>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.Wizards.WizardInfo.Title">
            <summary>
            Gets the wizard title
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.Wizards.WizardInfo.Description">
            <summary>
            Gets the wizard description
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Wizards.WizardInfo.CreateModel">
            <summary>
            Creates the model for the wizard
            </summary>
            <returns>A new <c>IWizardModel</c> instance.</returns>
            <exception cref="T:System.NullReferenceException">When the factory is not specified or the factory method returns null</exception>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Wizards.WizardInfo.CreatePanes">
            <summary>
            Creates the panes for the wizard
            </summary>
            <returns>a collection of controls to use as pages in the wizard.</returns>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.Wizards.WizardModel">
            <summary>
            Provides a model that is used by the Wizard
            </summary>
        </member>
        <member name="E:Cenium.Framework.Client.Windows.Wizards.WizardModel.Completed">
            <summary>
            The Completed event is triggered when the Wizards finish execution
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Wizards.WizardModel.#ctor">
            <summary>
            Initializes a new instance of the WizardModel class
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Wizards.WizardModel.ExecuteAsync">
            <summary>
            Called when the wizard is executed
            </summary>
            <returns></returns>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.Wizards.WizardModel.WizardImage">
            <summary>
            Gets or sets the image to use for the wizard
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.Wizards.WizardModel.WizardTitle">
            <summary>
            Gets or sets the wizard title
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.Wizards.WizardModel.WizardDescription">
            <summary>
            Gets or sets the description of the wizard. This description is shown on the wizard welcome page
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.Wizards.WizardModel.ProgressInfo">
            <summary>
            Gets or sets information about execution progress
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.Wizards.WizardModel.IsBackEnabled">
            <summary>
            Gets if the back button should be enabled
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.Wizards.WizardModel.IsNextEnabled">
            <summary>
            Gets if the next button should be enabled
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.Wizards.WizardModel.CurrentPage">
            <summary>
            Gets the current page index
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.Wizards.WizardModel.ConfirmationTitle">
            <summary>
            Gets the confirmation title when the wizard executes successfully
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.Wizards.WizardModel.ConfirmationDescription">
            <summary>
            Gets or sets the confirmation description when the wizard executes successfully
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.Wizards.WizardModel.WorkingDescription">
            <summary>
            Gets or sets the description when the wizard is working
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Wizards.WizardModel.IsPageComplete(System.Int32)">
            <summary>
            Implementers should override this method to provide page validation. If the page is correctly filled in the method should return true, otherwise false. By default this method returns true.
            </summary>
            <param name="page">The page index</param>
            <returns>true if the page is complete; otherwise false</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Wizards.WizardModel.Execute">
            <summary>
            Called when the wizard executes. The execution is done on a background thread
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Wizards.WizardModel.ExecuteCore(System.Object)">
            <summary>
            Called when the wizard executes. This method executes on the background thread
            </summary>
            <param name="args">this is always null</param>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Wizards.WizardModel.OnCompleted">
            <summary>
            Called when the wizard completes execution.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Wizards.WizardModel.SetProgressInfo(System.String)">
            <summary>
            Sets the ProgressInfo property using the dispatcher
            </summary>
            <param name="info">The info text to set</param>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.Wizards.WizardModel.IsBusy">
            <summary>
            Returns true if the instance implementing IBusy is busy performing an operation; otherwise false.
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.ActionResult">
            <summary>
            Represents the result of an action pane
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.ApplicationPalette">
            <summary>
            Defines a color palette for the application
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.DialogActionResult`1">
            <summary>
            Represents a result from a dialog
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.DialogActionResult`1.IsSelected">
            <summary>
            Gets or sets a value whether the dialog result was selected (i.e. if the user pressed the 'OK' button).
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.DialogActionResult`1.Result">
            <summary>
            Gets or sets the result from the dialog.
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.PageLayoutModeEventHandler">
            <summary>
            Represents a method that handles StateChanged event for PageLayoutMode
            </summary>
            <param name="sender">The source of the event</param>
            <param name="args">The event data</param>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.PageViewModeEventHandler">
            <summary>
            Represents a method that handles StateChanged event for PageViewMode
            </summary>
            <param name="sender">The source of the event</param>
            <param name="args">The event data</param>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.PageViewModeEventArgs">
            <summary>
            Provides data for the PageViewModeChanged event handler
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.PageViewModeEventArgs.Mode">
            <summary>
            Gets the mode that raised the event
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.PageViewModeEventArgs.State">
            <summary>
            Gets the state the mode was changed to
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.PageLayoutModeEventArgs">
            <summary>
            Provides data for the PageLayoutModeChanged event handler
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.PageLayoutModeEventArgs.Mode">
            <summary>
            Gets the mode that raised the event
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.PageLayoutModeEventArgs.State">
            <summary>
            Gets the state the mode was changed to
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.IApplicationWindow">
            <summary>
            Defines an application window
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.IApplicationWindow.Menu">
            <summary>
            Gets the menu associated with the window
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.IAttachedObjectContainer">
            <summary>
            Defines the contract for an attached object container
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.IAttachedObjectContainer.Refresh">
            <summary>
            Refresh the container
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.IAttachedObjectContainerHost">
            <summary>
            Defines the contract for window elements that can host an attached object container
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.IItemPagePart">
            <summary>
            Defines a page content template which implements a single item
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.IListPagePart">
            <summary>
            Defines a page content template which implements a list
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.IListPagePart.IsUserFilterSupported">
            <summary>
            Gets or sets if user filters are supported
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.IListPagePart.SelectedItem">
            <summary>
            Gets or sets the currently selected item in the underlying list
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.IListPagePart.IsSinglePropertyContextOnly">
            <summary>
            Gets or sets if the page supports single or multiple property contexts
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.IPageCache">
            <summary>
            Defines a cache associated with a page
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.IPageCache.GetCacheEntry(System.String)">
            <summary>
            Gets the cache entry associated with the specified key.
            </summary>
            <param name="key">The key associated with the cache entry.</param>
            <returns>An object instance if the cache contains a value associated with the key; otherwise null</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.IPageCache.SetCacheEntry(System.String,System.Object)">
            <summary>
            Adds a cache entry and associates it with the specified key
            </summary>
            <param name="key">The key associated with the cache entry.</param>
            <param name="value">The entry to cache</param>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.IPagePart">
            <summary>
            Defines a content part of a page. All page templates must implement either <c>IListPagePart</c> or <c>IItemPagePart</c> which both derives from this interface.
            </summary>
        </member>
        <member name="E:Cenium.Framework.Client.Windows.IPagePart.PageModelChanged">
            <summary>
            Occurs when the PageModel property changes
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.IPagePart.SidebarDataContext">
            <summary>
            Gets the data context for the sidebar
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.IPagePart.ActionDataContext">
            <summary>
            Gets the data context for actions
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.IPagePart.EditHandler">
            <summary>
            Gets or sets the edit handler
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.IPagePart.IsSidebarEnabled">
            <summary>
            Gets if sidebar should be enabled for the page
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.IPageHost">
            <summary>
            Defines a host for a layout page
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.IPageHost.PageModel">
            <summary>
            Gets the page model
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.IPageHost.Title">
            <summary>
            Gets the page title
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.IPageHost.Page">
            <summary>
            Gets the page from the host
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.IPageHost.Show(Cenium.Framework.Client.AppResources.UI.PageConfiguration)">
            <summary>
            Called when the page is about to be displayed
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.IPageHost.Show(Cenium.Framework.Client.AppResources.UI.PageConfiguration,Cenium.Framework.Client.Model.IDataViewModel)">
            <summary>
            Called when the page is about to be displayed
            </summary>
            <param name="page">The page configuration to use</param>
            <param name="model">The model to use</param>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.IPageHost.Close">
            <summary>
            Called when the page is closed.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.IPageHost.HandleError(System.Object,System.Exception)">
            <summary>
            Handles errors
            </summary>
            <param name="source">The source where the error occured</param>
            <param name="ex">The error</param>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.IPageWindow">
            <summary>
            Represents a page window
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.IPageFactory">
            <summary>
            Provides a factory for creating IPage instance
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.IPageFactory.FindPageForControl(System.Object)">
            <summary>
            Finds the page that a control belongs to
            </summary>
            <param name="control">The control to find the page for</param>
            <returns>An IPageWindow instance, or null if no page is found</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.IPageFactory.FindPageHostForControl(System.Object)">
            <summary>
            Finds the page host that a control belongs to
            </summary>
            <param name="control">The control to find the page host for</param>
            <returns>An <c>IPageHost</c> instance, or null if no page host is found</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.IPageFactory.FindWindowMenuForControl(System.Object)">
            <summary>
            Finds the window menu for the specified control
            </summary>
            <param name="control">The control to find the window menu for</param>
            <returns>An <c>IWindowMenu</c> instance, or null if no window menu is found</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.IPageFactory.CreatePageFromResource(System.String)">
            <summary>
            Creates a page using the specified identifier.
            </summary>
            <param name="id">The identifier to create a page from. </param>
            <returns>A page host containing the page</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.IPageFactory.CreatePageFromResource(System.String,Cenium.Framework.Client.Model.IDataViewModel)">
            <summary>
            Creates a page using the specified identifier and model
            </summary>
            <param name="id">The identifier to create a page from. </param>
            <param name="model">The model to associate with the page</param>
            <returns>A page host containing the page</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.IPageFactory.CreatePageFromResource(Cenium.Framework.Client.Windows.PageContext)">
            <summary>
            Creates a page using the specified context
            </summary>
            <param name="context">The context to create a page from. </param>
            <returns>A page host containing the page</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.IPageFactory.CreateDashboardPage(System.String)">
            <summary>
            Creates a dashboard page with the specified dashboard id
            </summary>
            <param name="dashboardId">The identifier for the dashboard</param>
            <returns>A page host containing the dashboard page</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.IPageFactory.ShowPageProgress(System.Object,System.String,System.String)">
            <summary>
            Sets the page in display progress mode.
            </summary>
            <param name="page">The page to set in progress mode</param>
            <param name="title">The title to display</param>
            <param name="message">The message to display</param>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.IPageFactory.HidePageProgress(System.Object)">
            <summary>
            Hides the page progress.
            </summary>
            <param name="page">The page to hide the progress on</param>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.IPageFactory.IsDashboardPage(System.String)">
            <summary>
            Determines whether a page identifier is a dashboard page
            </summary>
            <param name="pageId">The page identifier.</param>
            <returns><c>true</c> if the page identifier is a dashboard page; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.IPageFactory.GetPageCache(System.Object)">
            <summary>
            Gets the page cache.
            </summary>
            <param name="control">The control associated with the current page</param>
            <returns>An <c>IPageCache</c> instance</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.IPageFactory.GetDataViewModel(System.Object)">
            <summary>
            Gets the data associated with the window the control is associated with.
            </summary>
            <param name="control">The control associated with the current page</param>
            <returns>An <c>IDataViewModel</c> instance if the model was found; otherwise null</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.IPageFactory.ShowActionPane(System.Object,System.Object,System.Object)">
            <summary>
            Shows an action pane on the page
            </summary>
            <param name="page">The page to show the action pane on</param>
            <param name="host">The action pane host</param>
            <param name="model">The action pane model</param>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.IPageFactory.SetWindowMenuEnabled(System.Object,System.Boolean)">
            <summary>
            Enable or disable the window menu
            </summary>
            <param name="ctrl">A control within the window</param>
            <param name="isEnabled"><c>true</c> to enable the menu; <c>false</c> to disable</param>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.Dashboard.DashboardManager">
            <summary>
            The <c>DashboardManager</c> provides methods to create dashboard and dashlet instances
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Dashboard.DashboardManager.RegisterDashboardFactory(Cenium.Framework.Client.Windows.Dashboard.IDashboardFactory)">
            <summary>
            Registers a dialog factory
            </summary>
            <param name="factory">The factory to register</param>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Dashboard.DashboardManager.CreateDashletFromResource(System.String,Cenium.Framework.PackString)">
            <summary>
            Creates a dashlet based on a configuration id. If the id is not a registered dashlet, this method will return null
            </summary>
            <param name="id">The identifier for the resource</param>
            <returns>A dashlet instance, or null if the identifier is not registered</returns>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.Dashboard.IDashboard">
            <summary>
            Represents a dashboard entry
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.Dashboard.IDashboard.Id">
            <summary>
            Gets the identifier for the dashboard entry
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.Dashboard.IDashboard.Name">
            <summary>
            Gets the name for the dashboard entry
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.Dashboard.IDashboard.Description">
            <summary>
            Gets the description for the dashboard entry
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.Dashboard.IDashboardFactory">
            <summary>
            Represents a factory responsible for creating dashboards and dashlets
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Dashboard.IDashboardFactory.CreateFromResource(Cenium.Framework.Client.AppResources.UI.DashletConfiguration,Cenium.Framework.PackString)">
            <summary>
            Creates a new dashlet based on a dashlet configuration
            </summary>
            <param name="configuration">The configuration to base the dashlet on</param>
            <returns>A dashlet instance</returns>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.Dashboard.IDashboardItemFrame">
            <summary>
            Represents a frame object that contains a dashboard item
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.Dashboard.IDashboardItemFrame.IsRefreshEnabled">
            <summary>
            Gets whether the dashboard item can be refreshed
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.Dashboard.IDashboardItemFrame.IsConfigurable">
            <summary>
            Gets or sets if the dashboard item is configurable
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.Dashboard.IDashboardItemFrame.IsResizable">
            <summary>
            Gets or sets if the dashboard item is resizable
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.Dashboard.IDashboardItemFrame.IsConfigurationMode">
            <summary>
            Gets or sets if the dashboard item is in configuration mode
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.Dashboard.IDashboardRegion">
            <summary>
            Defines a dashboard region, i.e. a container for dashboard frames
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.Dashboard.IDashboardRegion.Remove(Cenium.Framework.Client.Windows.Dashboard.IDashboardItemFrame)">
            <summary>
            Removes a <c>IDashboardItemFrame</c> from the region
            </summary>
            <param name="dashboardItem">The dashboard item to remove</param>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.IDialogFactory">
            <summary>
            Provides a factory for creating <c>IDialogWindow</c> instances
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.IDialogFactory.Create(System.Object,System.String,System.String,System.String,System.Object,System.Boolean)">
            <summary>
            Creates a new dialog window frame
            </summary>
            <param name="owner">The window that owns the dialog</param>
            <param name="id">The identity of the dialog window</param>
            <param name="title">The title of the dialog window</param>
            <param name="description">The description for the dialog window</param>
            <param name="icon">The icon of the dialog window</param>
            <param name="showHeader">true if the dialog should display a header; otherwise false</param>
            <returns>An <c>IDialogWindow</c> instance</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.IDialogFactory.CreateFromResource(System.Object,System.String,System.Object)">
            <summary>
            Creates a new dialog with the specified identifier
            </summary>
            <param name="owner">The window that owns the dialog</param>
            <param name="id">The identity of the dialog window</param>
            <param name="model">The dialog model</param>
            <returns>An <c>IDialogWindow</c> instance</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.IDialogFactory.CreateFromResource(System.Object,Cenium.Framework.Client.AppResources.UI.DialogConfiguration,System.Object)">
            <summary>
            Creates a new dialog with the specified dialog configuration
            </summary>
            <param name="owner">The window that owns the dialog</param>
            <param name="dialog">The dialog configuration to use</param>
            <param name="model">The dialog model</param>
            <returns>An <c>IDialogWindow</c> instance</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.IDialogFactory.ShowDialog(System.Object,System.String)">
            <summary>
            Creates a new dialog with the specified identifier and shows the dialog
            </summary>
            <param name="owner">The window that owns the dialog</param>
            <param name="id">The identity of the dialog window</param>
            <returns>The dialog result; either null if the user cancelled the dialog or the data model instance</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.IDialogFactory.ShowValueListDialog(System.Object,Cenium.Framework.Client.Windows.ValueListArgs)">
             <summary>
             Creates and shows a value list dialog
             </summary>
             <param name="owner">The window that owns the dialog</param>
             <param name="args">The arguments to use to create the value list</param>
             <returns>The selected value, or null if no value was selected</returns>
            
        </member>
        <member name="M:Cenium.Framework.Client.Windows.IDialogFactory.ShowAboutDialog(System.Object,System.String,System.String)">
            <summary>
            Creates and shows an about dialog
            </summary>
            <param name="owner">The window that owns the dialog</param>
            <param name="productName">The product name</param>
            <param name="productVersion">The product version</param>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.IDialogFactory.ShowLoginDialog(System.Object)">
            <summary>
            Creates and shows a login dialog
            </summary>
            <param name="owner">The window that owns the dialog</param>
            <returns>True if the login was successful, otherwise false</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.IDialogFactory.ShowTextEditorDialog(System.Object,System.String@,System.Boolean)">
            <summary>
            Creates and shows a text editor dialog
            </summary>
            <param name="owner">The window that owns the dialog</param>
            <param name="text">The initial text</param>
            <param name="isReadOnly">True if the dialog is read-only; otherwise false</param>
            <returns>true if the text was changed; otherwise false</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.IDialogFactory.ShowSaveFileDialog(System.String@,System.Object,System.String,System.String)">
            <summary>
            Creates and shows a save file dialog
            </summary>
            <param name="filename">The filename of the file</param>
            <param name="extension">The default file extension to use</param>
            <param name="owner">The owner of the dialog (control or window)</param>
            <param name="fileTypeName">The name of the file type</param>
            <returns>true if the save file was selected; otherwise false</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.IDialogFactory.ShowOpenFileDialog(System.String@,System.Object,System.String,System.String)">
            <summary>
            Creates and shows a open file dialog
            </summary>
            <param name="filename">The filename of the selected file</param>
            <param name="extension">The default file extension to use</param>
            <param name="owner">The owner of the dialog (control or window)</param>
            <param name="fileTypeName">The name of the file type</param>
            <returns>true if a file was selected; otherwise false</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.IDialogFactory.ShowPrintPreviewDialog(System.Object,Cenium.Framework.Client.Reports.ReportPreviewParameters)">
            <summary>
            Creates and displays a print preview dialog
            </summary>
            <param name="owner">The owner of the dialog (control or window)</param>
            <param name="args">The parameters for the print preview dialog</param>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.IDialogFactory.IsPrintPreviewDialogAvailable">
            <summary>
            Returns whether a print preview dialog is available or not
            </summary>
            <returns>true if a print preview dialog is available; otherwise false</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.IDialogFactory.ShowInformationMessageDialog(System.Object,System.String,System.String,System.Object[])">
            <summary>
            Shows a dialog displaying an information message
            </summary>
            <param name="owner">The owner of the dialog</param>
            <param name="title">The title to display</param>
            <param name="parameters">Parameters for the message text</param>
            <param name="message">The message to display</param>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.IDialogFactory.ShowConfirmMessageDialog(System.Object,System.String,System.String,System.Object[])">
            <summary>
            Shows a dialog displaying an confirm message
            </summary>
            <param name="owner">The owner of the dialog</param>
            <param name="title">The title to display</param>
            <param name="parameters">Parameters for the message text</param>
            <param name="message">The message to display</param>
            <returns>true if the message was confirmed; otherwise false</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.IDialogFactory.ShowErrorMessageDialog(System.Object,System.String,System.String,System.Object[])">
            <summary>
            Shows a dialog displaying an error message
            </summary>
            <param name="owner">The owner of the dialog</param>
            <param name="title">The title to display</param>
            <param name="parameters">Parameters for the message text</param>
            <param name="message">The message to display</param>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.IDialogFactory.ShowAuthorizeDialog(System.Object,System.String,System.Nullable{System.Int64},System.Object)">
            <summary>
            Shows the authorize transaction dialog.
            </summary>
            <param name="owner">The owner of the dialog</param>
            <param name="authorizationType">The authorization type identifier for the authorization to perform.</param>
            <param name="propertyContextId">The property the authorization is related to (optional)</param>
            <param name="parameter">Authorization type specific parameter (optional)</param>
            <returns>A security token represented by a Guid if the authorization was successful; otherwise null</returns>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.IDialogWindow">
            <summary>
            Represents a dialog window
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.IDialogWindow.ContentPane">
            <summary>
            Gets or sets the content pane of the dialog window
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.IDialogWindow.ViewModel">
            <summary>
            Gets or sets the view model for the dialog window
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.IDialogWindow.ShowModalDialog">
            <summary>
            Opens the dialog window
            </summary>
            <returns>true if the user selected Ok, otherwise false</returns>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.IPropertyContextPage">
            <summary>
            Defines a page where the content is property context dependant
            </summary>
        </member>
        <member name="E:Cenium.Framework.Client.Windows.IPropertyContextPage.PropertyContextChanged">
            <summary>
            Triggered when the property context changes
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.IPropertyContextPage.SelectedPropertyContextId">
            <summary>
            Gets or sets the currently selected property context
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.IWindowMenu">
            <summary>
            Defines a window menu
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.IWindowMenu.SetViewMode(Cenium.Framework.Client.Windows.PageViewMode)">
            <summary>
            Sets view mode to the menu
            </summary>
            <param name="mode">The item to add</param>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.IWindowMenu.RemoveViewMode">
            <summary>
            Removes view mode from the menu
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.IWindowMenu.AddLayoutMode(Cenium.Framework.Client.Windows.PageLayoutMode)">
            <summary>
            Adds a layout mode item to the menu
            </summary>
            <param name="mode">The item to add</param>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.IWindowMenu.RemoveLayoutMode(Cenium.Framework.Client.Windows.PageLayoutMode)">
            <summary>
            Removes a layout mode item from the menu
            </summary>
            <param name="mode">The item to remove</param>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.IWindowMenu.AddActionItem(Cenium.Framework.Client.Windows.IWindowActionMenuItem)">
            <summary>
            Adds an action item to the menu
            </summary>
            <param name="actionItem">The action item to add</param>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.IWindowMenu.RemoveActionItem(Cenium.Framework.Client.Windows.IWindowActionMenuItem)">
            <summary>
            Removes an action item from the menu
            </summary>
            <param name="actionItem">The action item to remove</param>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.IWindowMenu.SetHelpContext(System.Object)">
            <summary>
            Set help context.
            </summary>
            <param name="context">Help context to set</param>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.IWindowActionMenuItem">
            <summary>
            Defines a menu item that is implemented as an action
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.IWindowActionMenuItem.MainGroup">
            <summary>
            Gets the main group the action item belongs to
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.IWindowActionMenuItem.SubGroup">
            <summary>
            Gets the sub group the action item belongs to
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.IWindowMenuItem">
            <summary>
            Defines an item that can be added to or removed from a window menu
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.IWindowMenuItem.Id">
            <summary>
            Gets a unique identifier for the item
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.IWindowMenuItem.DisplayName">
            <summary>
            Gets the display name for the item
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.IWindowMenuItem.Description">
            <summary>
            Gets a description for the item
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.IWindowMenuItem.ShortcutKey">
            <summary>
            Gets the shortcut key for the item
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.IWindowMenuItem.Icon">
            <summary>
            Gets the icon for the item
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.IWindowMenuItem.Command">
            <summary>
            Gets the command that the menu item implements
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.IWindowMenuItemOption">
            <summary>
            Defines an option value for an action menu
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.IWindowMenuItemOption.Id">
            <summary>
            Gets the identifier for the option
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.IWindowMenuItemOption.DisplayName">
            <summary>
            Gets the display name for the item
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.IWindowMenuItemOption.Description">
            <summary>
            Gets the description for the option
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.IWindowMenuItemOption.IsSelectable">
            <summary>
            Gets whether the option is selectable
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.IWindowMenuItemOption.SelectionGroup">
            <summary>
            Gets the selection group this option belongs to. Only applicable when IsSelectable is true
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.IWindowMenuItemOption.IsSelected">
            <summary>
            Gets or sets if the option is selected. Only applicable when IsSelectable is true
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.PageLayoutModeState">
            <summary>
            Defines a state for a page layout mode
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.PageMode`1">
            <summary>
            Base class for page mode handling
            </summary>
            <typeparam name="T">The state type which this mode handles</typeparam>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.PageMode`1.States">
            <summary>
            Gets an <c>IEnumerable</c> of states that this mode supports
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.PageMode`1.AddState(`0)">
            <summary>
            Adds a state to the set of valid states for this mode
            </summary>
            <param name="state">The state to add</param>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.PageMode`1.State">
            <summary>
            Gets or sets the current state
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.PageMode`1.OnStateChanged(`0)">
            <summary>
            Called when the State property changes value.
            </summary>
            <param name="state">The selected state</param>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.PageModeState">
            <summary>
            Defines a state for a page layout mode
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.PageModeState.#ctor">
            <summary>
            Initializes a new instance of the PageLayoutModeState class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.PageModeState.Id">
            <summary>
            Gets or sets a unique identifier for the state. This value should be unqiue within a PageLayoutMode
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.PageModeState.DisplayName">
            <summary>
            Gets or sets a display name for a state
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.PageModeState.Description">
            <summary>
            Gets or sets a description for a state
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.PageModeState.Value">
            <summary>
            Gets or sets a value associated with a state
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.PageLayoutMode">
            <summary>
            Defines the layout modes a page may have
            </summary>
        </member>
        <member name="E:Cenium.Framework.Client.Windows.PageLayoutMode.StateChanged">
            <summary>
            Occurs when the State property changes value
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.PageLayoutMode.#ctor">
            <summary>
            Initializes a new instance of the PageMode class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.PageLayoutMode.Id">
            <summary>
            Defines an identifier for the layout mode. This should be a unique value within a page
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.PageLayoutMode.DisplayName">
            <summary>
            Gets or sets the display name for the layout mode
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.PageLayoutMode.Description">
            <summary>
            Gets or sets the description for the layout mode
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.PageLayoutMode.Icon">
            <summary>
            Gets or sets the icon for the layout mode
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.PageLayoutMode.ShortcutKey">
            <summary>
            Gets or sets the shortcut key for the layout mode
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.PageLayoutMode.OnStateChanged(Cenium.Framework.Client.Windows.PageLayoutModeState)">
            <summary>
            Called when the State property changes value. This method raises the StateChanged event
            </summary>
            <param name="state">The selected state</param>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.PageNavigationOptions">
            <summary>
            Defines how the page navigation is performed
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.PageShortcutKeyManager">
            <summary>
            Maintains the registration of shortcut keys for a page
            </summary>
            <remarks>
            Registration is done in two steps; first the assocation between commands/actions and keys is performed using one of the <c>RegisterWindowsShortcutKey</c> methods, then the
            keys are registered with the associated window using the RegisterKeys method.
            </remarks>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.PageShortcutKeyManager.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <c>PageShortcutKeyManager</c> class
            </summary>
            <param name="owner">The page that owns the <c>PageShortcutKeyManager</c> instance</param>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.PageShortcutKeyManager.RegisterWindowShortcutKey(System.Windows.Input.ICommand,System.Object)">
            <summary>
            Registers a shortcut key for the window the page belongs to
            </summary>
            <param name="command">The command associated with the shortcut key</param>
            <param name="key">The shortcut key</param>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.PageShortcutKeyManager.RegisterWindowShortcutKey(System.Action,System.Object)">
            <summary>
            Registers a shortcut key for the window the page belongs to
            </summary>
            <param name="command">The action associated with the shortcut key</param>
            <param name="key">The shortcut key</param>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.PageShortcutKeyManager.RegisterKeys">
            <summary>
            Performs registration of all registered shortcut keys
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.PageShortcutKeyManager.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.PageViewMode">
            <summary>
            Defines the view modes a page may have
            </summary>
        </member>
        <member name="E:Cenium.Framework.Client.Windows.PageViewMode.StateChanged">
            <summary>
            Occurs when the State property changes value
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.PageViewMode.OnStateChanged(Cenium.Framework.Client.Windows.PageViewModeState)">
            <summary>
            Called when the State property changes value. This method raises the StateChanged event
            </summary>
            <param name="state">The selected state</param>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.PageViewModeState.Icon">
            <summary>
            Gets or sets the icon for the state
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.PageViewModeState.ShortcutKey">
            <summary>
            Gets or sets the shortcut key for the state
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.Pickers.CameraPicker">
            <summary>
            Base class for camera pickers
            </summary>
            <seealso cref="T:Cenium.Framework.Client.Windows.Pickers.PickerBase" />
        </member>
        <member name="P:Cenium.Framework.Client.Windows.Pickers.CameraPicker.Image">
            <summary>
            Gets the selected image.
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.Pickers.ImageEditorPicker">
            <summary>
            Base class for image editor picker
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.Pickers.ImageEditorPicker.OriginalImage">
            <summary>
            Gets the selected image.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Windows.Pickers.ImageEditorPicker.EditedImage">
            <summary>
            Gets the edited image.
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.Pickers.PickerBase">
            <summary>
            Base class for pickers
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.WindowManager">
            <summary>
            Class that manages the creation of dialog and page windows
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.WindowManager.RegisterWizard(System.String,Cenium.Framework.Client.Windows.Wizards.WizardInfo)">
            <summary>
            Creates a wizard and associates the wizard with an identifier
            </summary>
            <param name="id">The wizard identifier</param>
            <param name="info">A <c>WizardInfo</c> instance containing information about how to create the wizard.</param>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.WindowManager.IsWizardAvailable(System.String)">
            <summary>
            Determines whether the wizard associated with the specified id is available
            </summary>
            <param name="id">The identifier to determine</param>
            <returns><c>true</c> if the wizard is available; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.WindowManager.DisableWindowMenu(System.Object)">
            <summary>
            Disables the window menu.
            </summary>
            <param name="ctrl">The window, page host, page or page control whose parent menu to disable</param>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.WindowManager.EnableWindowMenu(System.Object)">
            <summary>
            Enables the window menu.
            </summary>
            <param name="ctrl">The window, page host, page or page control whose parent menu to enable</param>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.WindowManager.RegisterDialogFactory(Cenium.Framework.Client.Windows.IDialogFactory)">
            <summary>
            Registers a dialog factory
            </summary>
            <param name="factory">The factory to register</param>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.WindowManager.RegisterPageFactory(Cenium.Framework.Client.Windows.IPageFactory)">
            <summary>
            Registers a page factory
            </summary>
            <param name="factory"></param>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.WindowManager.CreateDialog(System.Object,System.String,System.String,System.String,System.Object,System.Boolean)">
            <summary>
            Creates a new <c>IDialogWindow</c> instance
            </summary>
            <param name="owner">The owner of the dialog window</param>
            <param name="id">The identity of the dialog window</param>
            <param name="title">The title of the dialog window</param>
            <param name="description">The description for the dialog window</param>
            <param name="icon">The icon of the dialog window</param>
            <param name="showHeader">true if the dialog should display a header; otherwise false</param>
            <returns>a new <c>IDialogWindow</c> instance</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.WindowManager.CreateDialogFromResource(System.Object,System.String,System.Object)">
            <summary>
            Creates a new dialog with the specified identifier
            </summary>
            <param name="owner">The window that owns the dialog</param>
            <param name="id">The identity of the dialog window</param>
            <param name="model">The dialog model</param>
            <returns>An <c>IDialogWindow</c> instance</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.WindowManager.CreateAndShowDialog(System.Object,System.String)">
            <summary>
            Creates a new dialog with the specified identifier and shows the dialog
            </summary>
            <param name="owner">The window that owns the dialog</param>
            <param name="id">The identity of the dialog window</param>
            <returns>The result of the dialog.</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.WindowManager.ShowValueListDialog(System.Object,System.String,Cenium.Framework.Client.Model.Record)">
            <summary>
            Creates and shows a value list dialog
            </summary>
            <param name="owner">The window that owns the dialog</param>
            <param name="queryMethod">The method to use to create the value list</param>
            <returns>The selected value, or null if no value was selected</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.WindowManager.ShowValueListDialog(System.Object,System.String,System.Object,System.String)">
            <summary>
            Creates and shows a value list dialog
            </summary>
            <param name="owner">The window that owns the dialog</param>
            <param name="queryMethod">The method to use to create the value list</param>
            <returns>The selected value, or null if no value was selected</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.WindowManager.ShowValueListDialog(System.Object,Cenium.Framework.Client.Windows.ValueListArgs)">
            <summary>
            Creates and shows a value list dialog
            </summary>
            <param name="owner">The window that owns the dialog</param>
            <param name="args">The arguments to use to create the value list</param>
            <returns>The selected value, or null if no value was selected</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.WindowManager.ShowLoginDialog(System.Object)">
            <summary>
            Creates and shows a login dialog
            </summary>
            <param name="owner">The window that owns the dialog</param>
            <returns>True if the login was successful, otherwise false</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.WindowManager.ShowAboutDialog(System.Object,System.String,System.String)">
            <summary>
            Creates and shows an about dialog
            </summary>
            <param name="owner">The window that owns the dialog</param>
            <param name="productName">The product name</param>
            <param name="productVersion">The product version</param>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.WindowManager.ShowTextEditorDialog(System.Object,System.String@)">
            <summary>
            Creates and shows a text editor dialog
            </summary>
            <param name="owner">The window that owns the dialog</param>
            <param name="text">The initial text</param>
            <returns>true if the text was changed; otherwise false</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.WindowManager.ShowTextEditorDialog(System.Object,System.String@,System.Boolean)">
            <summary>
            Creates and shows a text editor dialog
            </summary>
            <param name="owner">The window that owns the dialog</param>
            <param name="text">The initial text</param>
            <param name="isReadOnly">Specifies if the text is read-only or not.</param>
            <returns>true if the text was changed; otherwise false</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.WindowManager.CreatePageFromResource(System.String)">
            <summary>
            Creates a page using the specified identifier.
            </summary>
            <param name="id">The identifier to create a page from. </param>
            <returns>A page host containing the page</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.WindowManager.CreatePageFromResource(System.String,Cenium.Framework.Client.Model.IDataViewModel)">
            <summary>
            Creates a page using the specified identifier and model
            </summary>
            <param name="id">The identifier to create a page from. </param>
            <param name="model">The model to associate with the page</param>
            <returns>A page host containing the page</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.WindowManager.CreatePageFromResource(Cenium.Framework.Client.Windows.PageContext)">
            <summary>
            Creates a page using the specified PageContext instance
            </summary>
            <param name="context">The PageContext to create the page from</param>
            <returns>A page host containing the page</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.WindowManager.CreateDashboardPage(System.String)">
            <summary>
            Creates a dashboard page with the specified dashboard id
            </summary>
            <param name="dashboardId">The identifier for the dashboard</param>
            <returns>A page host containing the dashboard page</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.WindowManager.FindPageForControl(System.Object)">
            <summary>
            Finds the page that a control belongs to
            </summary>
            <param name="control">The control to find the page for</param>
            <returns>An IPageWindow instance, or null if no page is found</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.WindowManager.FindPageHostForControl(System.Object)">
            <summary>
            Finds the page host that a control belongs to
            </summary>
            <param name="control">The control to find the page host for</param>
            <returns>An <c>IPageHost</c> instance, or null if no page host is found</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.WindowManager.IsPageAvailable(System.String)">
            <summary>
            Determines whether a page configuration is available for the specified page identifier
            </summary>
            <param name="pageId">The page identifier.</param>
            <returns>True if the page is available; otherwise false</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.WindowManager.CheckUserPageAccess(System.String)">
            <summary>
            Checks if the current user has page access.
            </summary>
            <param name="pageId">The page identifier.</param>
            <returns>true if the user has access to the page; otherwise false</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.WindowManager.CheckUserPageAccess(Cenium.Framework.Client.AppResources.UI.PageConfiguration)">
            <summary>
            Checks if the current user has page access.
            </summary>
            <param name="pageId">The page configuration to check access for.</param>
            <returns>true if the user has access to the page; otherwise false</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.WindowManager.ShowSaveFileDialog(System.String@,System.Object,System.String,System.String)">
            <summary>
            Creates and shows a save file dialog
            </summary>
            <param name="filename">The filename of the file</param>
            <param name="extension">The default file extension to use</param>
            <param name="owner">The owner of the dialog (control or window)</param>
            <param name="fileTypeName">The name of the file type</param>
            <returns>true if the save file was selected; otherwise false</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.WindowManager.ShowOpenFileDialog(System.String@,System.Object,System.String,System.String)">
            <summary>
            Creates and shows a open file dialog
            </summary>
            <param name="filename">The filename of the selected file</param>
            <param name="extension">The default file extension to use</param>
            <param name="owner">The owner of the dialog (control or window)</param>
            <param name="fileTypeName">The name of the file type</param>
            <returns>true if the save file was selected; otherwise false</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.WindowManager.ShowPrintPreviewDialog(System.Object,Cenium.Framework.Client.Reports.ReportPreviewParameters)">
            <summary>
            Creates and shows the print preview dialog.
            </summary>
            <param name="owner">The owning control, page or window</param>
            <param name="args">The arguments containing information about the report to preview</param>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.WindowManager.ShowConfirmMessageDialog(System.Object,System.String,System.String)">
            <summary>
            Shows a dialog displaying an confirm message
            </summary>
            <param name="owner">The owner of the dialog</param>
            <param name="title">The title to display</param>
            <param name="message">The message to display</param>
            <returns>true if the message was confirmed; otherwise false</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.WindowManager.RegisterAttachedObjectActionFactory(System.Func{Cenium.Framework.Client.Windows.IPagePart,Cenium.Framework.Client.Windows.Actions.IActionHandler})">
            <summary>
            Registers a factory method for creating attached object action handlers.
            </summary>
            <param name="factory">The factory method to register</param>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.WindowManager.CreateAttachedObjectActions(Cenium.Framework.Client.Windows.IPagePart)">
            <summary>
            Creates an enumerable of action handler instances.
            </summary>
            <param name="owner">The page owner for the actions</param>
            <returns>An <c>IEnumerable&lt;IActionHandler&gt;</c> containing all attached object actions that has been registered </returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.WindowManager.ShowAuthorizeDialog(System.Object,System.String,System.Nullable{System.Int64},System.Object)">
            <summary>
            Shows the authorize transaction dialog.
            </summary>
            <param name="owner">The owner of the dialog</param>
            <param name="authorizationType">The authorization type identifier for the authorization to perform.</param>
            <param name="propertyContextId">The property the authorization is related to (optional)</param>
            <param name="parameter">Authorization type specific parameter (optional)</param>
            <returns>A security token represented by a Guid if the authorization was successful; otherwise null</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.WindowManager.RegisterPredefinedPageFilter(System.String,Cenium.Framework.Client.IUserFilter)">
            <summary>
            Registers a predefined filter for a page
            </summary>
            <param name="pageId">The page identifier to associate the filter with</param>
            <param name="filter">The filter to register</param>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.WindowManager.GetPredefinedPageFilters(System.String)">
            <summary>
            Gets the predefined filters for a page.
            </summary>
            <param name="pageId">The page identifier to get the filters for</param>
            <returns>An IReadOnlyCollection&lt;IUserFilter&gt; of predefined filters or null if no filters have been registered.</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.WindowManager.GetDataViewModel(System.Object)">
            <summary>
            Gets the data associated with a specified window or a child in that window
            </summary>
            <param name="control">The window, or a child control in the window</param>
            <returns>An <c>IDataViewModel</c> instance if the model was found; otherwise null</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.WindowManager.GetPublicPageConfigurations(System.Boolean)">
            <summary>
            Gets an <c>IEnumerable</c> of all registered <c>PageConfiguration</c> instances that are defined as public.
            </summary>
            <param name="checkUserAccess">if set to <c>true</c> this method only returns those pages the current user has access to.</param>
            <returns>An <c>IEnumerable</c> of all registered <c>PageConfiguration</c> instances that are defined as public.</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.WindowManager.IsDashboardPage(System.String)">
            <summary>
            Determines whether a page identifier is a dashboard page
            </summary>
            <param name="pageId">The page identifier.</param>
            <returns><c>true</c> if the page identifier is a dashboard page; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Cenium.Framework.Client.Windows.WindowMenu">
            <summary>
            Static class that defines constants and methods to access the application menu
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.Windows.WindowMenu.MainMenuHome">
            <summary>
            Identifier for the Home menu
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.Windows.WindowMenu.MainMenuReports">
            <summary>
            Identifier for the Reports menu
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.Windows.WindowMenu.MainMenuView">
            <summary>
            Identifier for the View menu
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.Windows.WindowMenu.MainMenuGroupPage">
            <summary>
            Identifier for the menu group Data
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.Windows.WindowMenu.MainMenuGroupEdit">
            <summary>
            Identifier for the menu group Edit
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.Windows.WindowMenu.MainMenuGroupActions">
            <summary>
            Identifier for the menu group Actions
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.Windows.WindowMenu.MainMenuGroupFilter">
            <summary>
            Identifier for the menu group Filter
            </summary>
        </member>
        <member name="F:Cenium.Framework.Client.Windows.WindowMenu.MainMenuGroupReports">
            <summary>
            Identifier for the menu group Reports
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.WindowMenu.ResolveMainMenu(System.String)">
            <summary>
            Resolves the main menu identifier
            </summary>
            <param name="id">The identifier to resolve</param>
            <returns>A resolved main menu identifier</returns>
        </member>
        <member name="M:Cenium.Framework.Client.Windows.WindowMenu.ResolveMainMenuGroup(System.String)">
            <summary>
            Resolves the menu group identifier
            </summary>
            <param name="id">The identifier to resolve</param>
            <returns>A resolved group menu identifier</returns>
        </member>
        <member name="T:Cenium.Framework.Client.AppServices.PriceTriggerCollection">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.AppServices.PriceTriggerCollection.#ctor">
            <summary>
            Initializes a new instance of the PriceTriggerCollection class
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.AppServices.PropertyTrigger">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.AppServices.PropertyTrigger.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the PropertyTrigger class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppServices.ServiceContainerHandler.RefreshParentMethod">
            <summary>
            Gets or sets the service method for doing a parent refresh
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.AppServices.ServiceItem">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.AppServices.ServiceItem.#ctor(Cenium.Framework.Client.Model.Record,Cenium.Framework.Client.AppServices.ServiceItemMap)">
            <summary>
            Initializes a new instance of the ServiceItem class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppServices.ServiceItem.ContainerHandler">
            <summary>
            Gets the container handler for the service item.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppServices.ServiceItem.IsDirty">
            <summary>
            Gets a value indicating whether this instance is dirty.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.AppServices.ServiceItem.ToRecord">
            <summary>
            Converts the ServiceItem into a container record
            </summary>
            <returns>A <c>Record</c> instance that represents the container</returns>
        </member>
        <member name="M:Cenium.Framework.Client.AppServices.ServiceItem.CreateFromContainer(Cenium.Framework.Client.Model.Record,System.Boolean)">
            <summary>
            Creates a <c>ServiceItem</c> from a container record
            </summary>
            <param name="container">The container to create a ServiceItem for</param>
            <param name="copy">Determines if the underlying container will be copied or not.</param>
            <returns>A new <c>ServiceItem</c> instance.</returns>
        </member>
        <member name="T:Cenium.Framework.Client.AppServices.ServiceItemEventArgs">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.AppServices.ServiceItemEventArgs.#ctor(Cenium.Framework.Client.AppServices.ServiceContainerHandler,Cenium.Framework.Client.Model.Record)">
            <summary>
            Initializes a new instance of the ServiceItemEventArgs class
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.AppServices.ServiceItemField">
            <summary>
            Defines the fields available in a <c>ServiceItem</c>
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.AppServices.ServiceItemMap">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.AppServices.ServiceItemMap.#ctor">
            <summary>
            Initializes a new instance of the ServiceItemMap class
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.AppServices.ServiceItemModel">
            <summary>
            Represents an item model for service items.
            </summary>
        </member>
        <member name="E:Cenium.Framework.Client.AppServices.ServiceItemModel.SaveCompleted">
            <summary>
            Occurs when the save operation has completed
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.AppServices.ServiceItemModel.#ctor(Cenium.Framework.Client.AppServices.ServiceItem)">
            <summary>
            Initializes a new instance of the ServiceItemModel class
            </summary>
            <param name="item">The <c>ServiceItem</c> associated with the model</param>
        </member>
        <member name="P:Cenium.Framework.Client.AppServices.ServiceItemModel.IsBusy">
            <summary>
            Returns true if model is busy performing an operation; otherwise false.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppServices.ServiceItemModel.IsSaveEnabled">
            <summary>
            Returns true if the save method can be called, otherwise false.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.AppServices.ServiceItemModel.Item">
            <summary>
            Gets the service item associated with the model
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.AppServices.ServiceItemModel.Save">
            <summary>
            Performs a save operation
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.AppServices.ServiceItemModel.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.AppServices.ServiceItemModel.SaveAsync">
            <summary>
            Performs the save asynchronous
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.AppServices.ServiceItemModel.IsSaveEnabledCore">
            <summary>
            Determines the value of the IsSaveEnabled property
            </summary>
            <returns><c>true</c> if save is enabled; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Cenium.Framework.Client.AppServices.ServiceItemModel.OnSaveCompleted(Cenium.Framework.ComponentModel.SaveCommandEventArgs)">
            <summary>
            Raises the <see cref="E:SaveCompleted" /> event.
            </summary>
            <param name="args">The <see cref="T:Cenium.Framework.ComponentModel.SaveCommandEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Cenium.Framework.Client.AppServices.ServiceItemModel.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Cenium.Framework.Client.CeniumUri">
            <summary>
            Provides an object representation of a Cenium URI
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.CeniumUri.PageId">
            <summary>
            Gets the page identifier component of this instance.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.CeniumUri.PageQuery">
            <summary>
            Gets the page query component of this instance.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.CeniumUri.NavigationOption">
            <summary>
            Gets the page navigation option component of this instance.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.CeniumUri.ToUri">
            <summary>
            Returns a <see cref="T:System.Uri" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.Uri" /> that represents this instance.</returns>
        </member>
        <member name="M:Cenium.Framework.Client.CeniumUri.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:Cenium.Framework.Client.CeniumUri.Parse(System.String)">
            <summary>
            Parses the specified URI string and returns a CeniumUri instance
            </summary>
            <param name="uriString">The URI string.</param>
            <returns>A object representation of the Uri</returns>
        </member>
        <member name="M:Cenium.Framework.Client.CeniumUri.Create(System.String,System.String,Cenium.Framework.Client.Windows.PageNavigationOptions)">
            <summary>
            Creates a CeniumUri instance for a page
            </summary>
            <param name="pageId">The page identifier to create the URI for</param>
            <param name="query">The page query (optional).</param>
            <param name="navigationOption">The page navigation option (optional).</param>
            <returns>A CeniumUri instance</returns>
        </member>
        <member name="M:Cenium.Framework.Client.CeniumUri.CreateFromKey(System.String,System.Object,Cenium.Framework.Client.Windows.PageNavigationOptions)">
            <summary>
            Creates a CeniumUri instance for a page using a key as query
            </summary>
            <param name="pageId">The page identifier.</param>
            <param name="key">The key to find on the page</param>
            <param name="navigationOption">The page navigation option (optional).</param>
            <returns>A CeniumUri instance</returns>
        </member>
        <member name="T:Cenium.Framework.Client.Language.LanguageItem">
            <summary>
            Represents a text that is translateable
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Language.LanguageItem.#ctor(Cenium.Framework.Language.LanguageText)">
            <summary>
            Initializes a new instance of the LanguageItem class
            </summary>
            <param name="text">The <c>LanguageText</c> item to construct the LanguageItem for</param>
        </member>
        <member name="M:Cenium.Framework.Client.Language.LanguageItem.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the LanguageItem class
            </summary>
            <param name="text">The text to construct the LanguageItem for</param>
        </member>
        <member name="P:Cenium.Framework.Client.Language.LanguageItem.Value">
            <summary>
            Gets the translated value.
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Language.LanguageResource">
            <summary>
            Contains translation items
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Language.LanguageResource.Terms">
            <summary>
            Gets a collection of language items for standard terms
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Language.LanguageResource.Entities">
            <summary>
            Gets a collection of language items for entities
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Language.LanguageItemTermCollection">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Language.LanguageItemTermCollection.#ctor">
            <summary>
            Initializes a new instance of the LanguageTermCollection class
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Language.EntityLanguageItem">
            <summary>
            Represents an entity text with an associated text
            </summary>
            <seealso cref="T:Cenium.Framework.Client.Language.LanguageItem" />
        </member>
        <member name="M:Cenium.Framework.Client.Language.EntityLanguageItem.#ctor(Cenium.Framework.Language.LanguageText)">
            <summary>
            Initializes a new instance of the <see cref="T:Cenium.Framework.Client.Language.EntityLanguageItem"/> class.
            </summary>
            <param name="text">The <c>LanguageText</c> item to construct the LanguageItem for</param>
        </member>
        <member name="T:Cenium.Framework.Client.Language.TranslationHelper">
            <summary>
            Contains helper methods for exporting and importing translations
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Language.TranslationHelper.GetTranslations(System.String,System.String,Cenium.Framework.Client.Language.TranslationFileFormat,System.Boolean)">
            <summary>
            Gets all translation texts from the server for the given component and language and returns them in the specified format
            </summary>
            <param name="component">The component to get the translations for</param>
            <param name="languageCode">The language code the translated text should be in</param>
            <param name="format">The format to return</param>
            <param name="excludeTermReferences">Select if term references should be excluded or not</param>
            <returns>A byte array with the translations in the specified format</returns>
        </member>
        <member name="T:Cenium.Framework.Client.Reports.ReportParameterInfo">
            <summary>
            Represents a parameter for creating a report
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Reports.ReportParameterInfo.Name">
            <summary>
            Gets the name of the parameter.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Reports.ReportParameterInfo.Label">
            <summary>
            Gets the label associated with the parameter
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Reports.ReportParameterInfo.Type">
            <summary>
            Gets the CLR type for the parameter value.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Reports.ReportParameterInfo.IsPropertyContext">
            <summary>
            Gets a value indicating whether this parameter is a property context parameter.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Reports.ReportParameterInfo.ValueList">
            <summary>
            Gets the value list associated with the parameter
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Reports.ReportParameterInfo.IsShortValueList">
            <summary>
            Gets a value indicating whether the value list is a short value list.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Reports.ReportParameterInfo.IsEnumeration">
            <summary>
            Gets a value indicating whether this parameter is an enumeration type parameter
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Reports.ReportPreviewParameters">
            <summary>
            Represents parmeters to a print preview dialog
            </summary>
        </member>
        <member name="M:Cenium.Framework.Client.Reports.ReportPreviewParameters.#ctor(System.String,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Cenium.Framework.Client.Reports.ReportPreviewParameters"/> class.
            </summary>
            <param name="reportName">Name of the report.</param>
            <param name="reportId">The report identifier.</param>
        </member>
        <member name="P:Cenium.Framework.Client.Reports.ReportPreviewParameters.ReportName">
            <summary>
            Gets the name of the report.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Reports.ReportPreviewParameters.ReportId">
            <summary>
            Gets the report identifier.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Reports.ReportPreviewParameters.RenderType">
            <summary>
            Gets or sets the render type (optional)
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Reports.ReportPreviewParameters.LayoutId">
            <summary>
            Gets or sets the layout to show (optional)
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Reports.ReportPreviewParameters.Recipients">
            <summary>
            Gets or sets the recipients for emailing the report (optional)
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Reports.ReportPreviewParameters.Subject">
            <summary>
            Gets or sets the subject for emailing the report (optional)
            </summary>
        </member>
        <member name="P:Cenium.Framework.Client.Reports.ReportPreviewParameters.Message">
            <summary>
            Gets or sets the message  for emailing the report (optional)
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.Reports.ReportUtility">
            <summary>
            Utility class for handling client-side report tasks
            </summary>
        </member>
        <member name="T:Cenium.Framework.Client.IInitializer">
            <summary>
            Provides a definition for application initializers.
            </summary>
            <remarks>
            Classes implementing the <c>IInitializer</c> interface are discovered and created on application startup. Use the Initialize method to perform startup initialization.
            </remarks>
        </member>
        <member name="M:Cenium.Framework.Client.IInitializer.Initialize">
            <summary>
            Called upon startup of the application. Implementors should perform any application initialization in this method
            </summary>
        </member>
    </members>
</doc>
