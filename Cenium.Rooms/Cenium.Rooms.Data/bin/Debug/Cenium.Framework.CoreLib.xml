<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cenium.Framework.CoreLib</name>
    </assembly>
    <members>
        <member name="T:Cenium.Framework.ActionExecutor">
            <summary>
            Class that contains multiple Action delegates to be executed together
            </summary>
        </member>
        <member name="T:Cenium.Framework.ApplicationManager">
            <summary>
            Contains methods to register and get an IApplication instance that contains runtime information about an application
            </summary>
        </member>
        <member name="P:Cenium.Framework.ApplicationManager.Application">
            <summary>
            Gets the current IApplication instance
            </summary>
        </member>
        <member name="M:Cenium.Framework.ApplicationManager.Register(Cenium.Framework.IApplicationFactory)">
            <summary>
            Registers an IApplicationFactory instance
            </summary>
            <param name="factory">An IApplicationFactory instance</param>
        </member>
        <member name="T:Cenium.Framework.ApplicationNotifyEventArgs">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="M:Cenium.Framework.ApplicationNotifyEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ApplicationNotifyEventArgs class
            </summary>
        </member>
        <member name="T:Cenium.Framework.Assert">
            <summary>
            Contains static methods that helps with assertations
            </summary>
            <remarks>
            Assertations are used to verify an assumption, for instance verifying that a method argument does not contain a null or verifying that a specific condition is true. They should not
            be confused with validations. Assertations are used to verify a condition that should always be true, validations verify conditions that can could occur. In other words, assertations
            are a guard against bugs where-as validations are usually a verification of user input.
            </remarks>
        </member>
        <member name="M:Cenium.Framework.Assert.CheckArgumentNotNull(System.Object,System.String)">
            <summary>
            Asserts that a argument is not null
            </summary>
            <exception cref="T:System.ArgumentNullException">When the value is null</exception>
            <param name="value">The value to assert</param>
            <param name="paramName">The name of the parameter</param>
            <exception cref="T:System.ArgumentNullException">When the value is null</exception>
        </member>
        <member name="M:Cenium.Framework.Assert.CheckArgumentNotNullOrEmpty(System.String,System.String)">
            <summary>
            Asserts that a string argument is not null or empty
            </summary>
            <param name="value">The value to assert</param>
            <param name="paramName">The name of the parameter</param>
            <exception cref="T:System.ArgumentNullException">When the value is null or empty</exception>
        </member>
        <member name="M:Cenium.Framework.Assert.CheckGuidNotEmpty(System.Guid,System.String)">
            <summary>
            Asserts that a Guid argument is not empty
            </summary>
            <param name="value">The value to assert</param>
            <param name="paramName">The name of the parameter</param>
            <exception cref="T:System.ArgumentException">When the value is empty</exception>
        </member>
        <member name="M:Cenium.Framework.Assert.CheckArgumentNotNullOrWhiteSpace(System.String,System.String)">
            <summary>
            Asserts that a string argument is not null, empty or whitespaces
            </summary>
            <param name="value">The value to assert</param>
            <param name="paramName">The name of the parameter</param>
            <exception cref="T:System.ArgumentNullException">When the value is null, empty or contains only whitespace.</exception>
        </member>
        <member name="M:Cenium.Framework.Assert.CheckArgumentCondition(System.Boolean,System.String,System.String)">
            <summary>
            Asserts that a condition evaluates to true
            </summary>
            <param name="condition">The condition to evaluate</param>
            <param name="paramName">The name of the parameter</param>
            <param name="conditionName">The name of the condition.</param>
            <exception cref="T:System.ArgumentException">When the condition evaluates to false.</exception>
        </member>
        <member name="M:Cenium.Framework.Assert.CheckValueNotNull(System.Object,System.String)">
            <summary>
            Asserts that a argument has value
            </summary>
            <param name="value">The value to check for</param>
            <param name="message">The message to use if the value is null</param>
            <exception cref="T:Cenium.Framework.FrameworkException">When the value is null</exception>
        </member>
        <member name="M:Cenium.Framework.Assert.CheckValueNotNullOrWhiteSpace(System.String,System.String)">
            <summary>
            Asserts that a argument has value and is not empty or contains only whitespaces
            </summary>
            <param name="value">The value to check for</param>
            <param name="message">The message to use if the value is null</param>
            <exception cref="T:Cenium.Framework.FrameworkException">When the value is null, empty or contains only whitespaces</exception>
        </member>
        <member name="T:Cenium.Framework.CodeDom.Compiler">
            <summary>
            Contains methods to get an <c>IAssemblyCompiler</c> instance and register a compiler factory
            </summary>
            <remarks>
            Use this class to obtain an IAssemblyCompiler class which allows you to compile an assembly from source code at runtime.
            </remarks>
        </member>
        <member name="M:Cenium.Framework.CodeDom.Compiler.CreateAssemblyCompiler">
            <summary>
            Creates a new <c>IAssemblyCompiler</c> instance
            </summary>
            <returns>A new <c>IAssemblyCompiler</c> instance</returns>
        </member>
        <member name="M:Cenium.Framework.CodeDom.Compiler.Register(Cenium.Framework.CodeDom.ICompilerFactory)">
            <summary>
            Registers an <c>ICompilerFactory</c> instance
            </summary>
            <param name="factory">The compiler factory to register</param>
        </member>
        <member name="T:Cenium.Framework.CodeDom.IAssemblyCompiler">
            <summary>
            Defines a mechanism for compiling and loading assemblies at runtime
            </summary>
        </member>
        <member name="M:Cenium.Framework.CodeDom.IAssemblyCompiler.AddAssemblyReference(System.String)">
            <summary>
            Adds an assembly reference to the compiled code
            </summary>
            <param name="assembly">The assembly to reference</param>
        </member>
        <member name="P:Cenium.Framework.CodeDom.IAssemblyCompiler.Source">
            <summary>
            Gets or sets the source code
            </summary>
        </member>
        <member name="M:Cenium.Framework.CodeDom.IAssemblyCompiler.Compile">
            <summary>
            Compiles the source and returns a reference to the assembly
            </summary>
            <returns>A reference to the compiled assembly</returns>
        </member>
        <member name="T:Cenium.Framework.CodeDom.ICompilerFactory">
            <summary>
            Defines a mechanism for creating IAssemblyCompiler instances
            </summary>
        </member>
        <member name="M:Cenium.Framework.CodeDom.ICompilerFactory.CreateAssemblyCompiler">
            <summary>
            Creates a new IAssemblyCompiler instance
            </summary>
            <returns>an IAssemblyCompiler instance</returns>
        </member>
        <member name="T:Cenium.Framework.Collections.Generic.IAsyncEnumerable`1">
            <summary>
            Defines an enumerator that loads the <c>IEnumerable</c> asynchronous
            </summary>
            <typeparam name="T">The type of objects to enumerate</typeparam>
        </member>
        <member name="T:Cenium.Framework.Collections.Generic.ArrayEnumerator`1">
            <summary>
            Implements a generic enumerator for an array.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Collections.Generic.ArrayEnumerator`1.#ctor(`0[])">
            <summary>
            Initializes a new instance of the ArrayEnumerator class
            </summary>
            <param name="array">The array to create the enumerator for</param>
        </member>
        <member name="P:Cenium.Framework.Collections.Generic.ArrayEnumerator`1.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Collections.Generic.ArrayEnumerator`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Collections.Generic.ArrayEnumerator`1.System#Collections#IEnumerator#Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Collections.Generic.ArrayEnumerator`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
        </member>
        <member name="M:Cenium.Framework.Collections.Generic.ArrayEnumerator`1.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection
            </summary>
        </member>
        <member name="T:Cenium.Framework.Collections.Generic.EnumeratorConverterDelegate`2">
            <summary>
            Defines a method that converts an object of type V into an object of type T
            </summary>
            <typeparam name="T">The type to convert to</typeparam>
            <typeparam name="V">The type to convert from</typeparam>
            <param name="obj">The instance of type V to convert</param>
            <returns>An instance of type T</returns>
        </member>
        <member name="T:Cenium.Framework.Collections.Generic.EnumerableConverter`2">
            <summary>
            An IEnumerable implementation capable of transforming the IEnumerable into a different IEnumerable
            </summary>
        </member>
        <member name="M:Cenium.Framework.Collections.Generic.EnumerableConverter`2.#ctor(System.Collections.Generic.IEnumerable{`1},Cenium.Framework.Collections.Generic.EnumeratorConverterDelegate{`0,`1})">
            <summary>
            Initializes a new instance of the EnumerableConverter class
            </summary>
            <param name="converter">The converter delegate</param>
            <param name="enumerable">The enumerable to convert</param>
        </member>
        <member name="M:Cenium.Framework.Collections.Generic.EnumerableConverter`2.GetEnumerator">
            <summary>
            Returns an enumerator for type T
            </summary>
            <returns>an enumerator for type T</returns>
        </member>
        <member name="M:Cenium.Framework.Collections.Generic.EnumerableConverter`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator for type T
            </summary>
            <returns>an enumerator for type T</returns>
        </member>
        <member name="T:Cenium.Framework.Collections.Generic.NamespaceDoc">
            <summary>
            The Cenium.Framework.Collections.Generic namespace contains interfaces and classes that define generic collections,
            which allow users to create strongly typed collections that provide better type safety and performance than non-generic strongly typed collections.
            </summary>
        </member>
        <member name="T:Cenium.Framework.Collections.Generic.Index`1">
            <summary>
            Represents a index based on string keys
            </summary>
        </member>
        <member name="M:Cenium.Framework.Collections.Generic.Index`1.#ctor">
            <summary>
            Initializes a new instance of the Index class
            </summary>
        </member>
        <member name="M:Cenium.Framework.Collections.Generic.Index`1.#ctor(Cenium.Framework.Collections.Generic.Index{`0})">
            <summary>
            Initializes a new instance of the Index class using the content of an existing index class
            </summary>
            <param name="copyFrom">The index instance to copy values from</param>
        </member>
        <member name="P:Cenium.Framework.Collections.Generic.Index`1.IsEmpty">
            <summary>
            Returns true if the index is empty, otherwise false
            </summary>
        </member>
        <member name="M:Cenium.Framework.Collections.Generic.Index`1.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the Index class
            </summary>
            <param name="isCaseSensitive">true if the index keys are case sensitive, otherwise false</param>
        </member>
        <member name="P:Cenium.Framework.Collections.Generic.Index`1.IsCaseSensitive">
            <summary>
            Gets or sets whether the index keys are case sensitive
            </summary>
        </member>
        <member name="P:Cenium.Framework.Collections.Generic.Index`1.Item(System.String)">
            <summary>
            Gets or sets an element with the specified key
            </summary>
            <param name="name">The string-based key</param>
            <returns>The element associated with the specified key</returns>
        </member>
        <member name="M:Cenium.Framework.Collections.Generic.Index`1.Add(System.String,`0)">
            <summary>
            Adds a new element to the index with the specified index key
            </summary>
            <param name="name">The index key of the element</param>
            <param name="value">The element to add</param>
        </member>
        <member name="M:Cenium.Framework.Collections.Generic.Index`1.Remove(System.String)">
            <summary>
            Removes an element from the index given the specified key
            </summary>
            <param name="name">The key for the item to remove</param>
        </member>
        <member name="M:Cenium.Framework.Collections.Generic.Index`1.Contains(System.String)">
            <summary>
            Determines whether the index contains the specified key.
            </summary>
            <param name="name">The key to locate</param>
            <returns>True if the index contains the specified key, otherwise false</returns>
        </member>
        <member name="M:Cenium.Framework.Collections.Generic.Index`1.ToArray">
            <summary>
            Copies the elements of the Index to a new array.
            </summary>
            <returns>The elements of the index as a new array"/></returns>
        </member>
        <member name="M:Cenium.Framework.Collections.Generic.Index`1.ToList">
            <summary>
            Copies the elements of the index into a new List
            </summary>
            <returns>a new List instance with the elements of the index</returns>
        </member>
        <member name="M:Cenium.Framework.Collections.Generic.Index`1.Clear">
            <summary>
            Clears all values from the index
            </summary>
        </member>
        <member name="P:Cenium.Framework.Collections.Generic.Index`1.Count">
            <summary>
            Gets the number of items in the index
            </summary>
        </member>
        <member name="M:Cenium.Framework.Collections.Generic.Index`1.GetOrAdd(System.String,System.Func{System.String,`0})">
            <summary>
            Adds an item to the index by using the specified function, if the key does not already exist
            </summary>
            <param name="name">The index key of the element</param>
            <param name="factory">The function used to generate a value for the key</param>
            <returns>The value for the key. This will be either the existing value for the key if the key is already in the index, or the new value for the key as returned by factory if the key was not in the dictionary.</returns>
        </member>
        <member name="M:Cenium.Framework.Collections.Generic.Index`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the index
            </summary>
            <returns>an enumerator that iterates through the index</returns>
        </member>
        <member name="M:Cenium.Framework.Collections.Generic.Index`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the index
            </summary>
            <returns>an enumerator that iterates through the index</returns>
        </member>
        <member name="M:Cenium.Framework.Collections.Generic.Index`1.GetValue(System.String)">
            <summary>
            Gets an item from the index based on a string based key, or default(T) if the item is not in the index
            </summary>
            <param name="name">The string based key</param>
            <returns>The item associated with the key, or default(T) if the item is not in the index</returns>
        </member>
        <member name="M:Cenium.Framework.Collections.Generic.Index`1.Delete(System.String)">
            <summary>
            Deletes the item in the index with the given key
            </summary>
            <param name="name">The key associated with the item to delete</param>
        </member>
        <member name="M:Cenium.Framework.Collections.Generic.Index`1.SetValue(System.String,`0)">
            <summary>
            Adds or replaces an item in the index
            </summary>
            <param name="name">The key associated with the item</param>
            <param name="value">The item to add</param>
        </member>
        <member name="T:Cenium.Framework.Collections.Generic.MultiEnumerable`1">
            <summary>
            Implements a generic enumerator for multiple collections of the same type
            </summary>
        </member>
        <member name="M:Cenium.Framework.Collections.Generic.MultiEnumerable`1.#ctor(System.Collections.Generic.IEnumerable{`0}[])">
            <summary>
            Initializes a new instance of the MultiEnumerable class
            </summary>
            <param name="enumerables">The IEnumerable instances to include in this enumerator</param>
        </member>
        <member name="P:Cenium.Framework.Collections.Generic.MultiEnumerable`1.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Collections.Generic.MultiEnumerable`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Collections.Generic.MultiEnumerable`1.System#Collections#IEnumerator#Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Collections.Generic.MultiEnumerable`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
        </member>
        <member name="M:Cenium.Framework.Collections.Generic.MultiEnumerable`1.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection
            </summary>
        </member>
        <member name="T:Cenium.Framework.Collections.Generic.NullEnumerator`1">
            <summary>
            NullEnumerator is a generic implementation of IEnumerator with an empty resultset.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Collections.Generic.NullEnumerator`1.#ctor">
            <summary>
            Initializes a new instance of the NullEnumerator class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Collections.Generic.NullEnumerator`1.Current">
            <summary>
            Gets the current element in the collection. This implementation will always return null.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Collections.Generic.NullEnumerator`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Collections.Generic.NullEnumerator`1.System#Collections#IEnumerator#Current">
            <summary>
            Gets the current element in the collection. This implementation will always return null.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Collections.Generic.NullEnumerator`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>This implementation will always return false</returns>
        </member>
        <member name="M:Cenium.Framework.Collections.Generic.NullEnumerator`1.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection
            </summary>
        </member>
        <member name="T:Cenium.Framework.Collections.Generic.PagedCollection`1">
            <summary>
            Defines methods to access a paged collection
            </summary>
            <remarks>
            <para>A paged collection is a collection that is loaded into pages (blocks) of a given size. These pages are loaded on demand, i.e. when being accessed.
            Users of this class must implement the <c>OnInitialize</c> and <c>OnLoadPage</c> methods.</para>
            <para>A PagedCollection is typically used to load large datasets into memory because of it's ability to load pages on-demand rather than the whole dataset at once. The user
            may add or remove items independent of the on-demand loading, i.e. items may be added or removed before, during and after loading pages.</para>
            </remarks>
            <typeparam name="T">The type of elements in the collection</typeparam>
        </member>
        <member name="M:Cenium.Framework.Collections.Generic.PagedCollection`1.#ctor">
            <summary>
            Initializes a new instance of the PagedCollection class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Collections.Generic.PagedCollection`1.Count">
            <summary>
            Gets the number of elements contained in the PageCollection&lt;T&gt;.
            </summary>
            <remarks>
            Note that the number may include elements that have not yet been loaded into the collection.
            </remarks>
        </member>
        <member name="P:Cenium.Framework.Collections.Generic.PagedCollection`1.PageSize">
            <summary>
            Gets or sets the size of each page.
            </summary>
            <exception cref="T:System.InvalidOperationException">Setting the pagesize after the collection has been initialized</exception>
        </member>
        <member name="M:Cenium.Framework.Collections.Generic.PagedCollection`1.Initialize">
            <summary>
            Prepares the collection for use
            </summary>
        </member>
        <member name="M:Cenium.Framework.Collections.Generic.PagedCollection`1.Clear">
            <summary>
            Removes all elements from the collection
            </summary>
        </member>
        <member name="M:Cenium.Framework.Collections.Generic.PagedCollection`1.Add(`0)">
            <summary>
            Adds an object to the end of the collection
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:Cenium.Framework.Collections.Generic.PagedCollection`1.Contains(`0)">
            <summary>
            Determines whether an element is in the collection
            </summary>
            <param name="item">The object to locate in the collection</param>
            <returns>true if item is found in the collection; otherwise, false</returns>
        </member>
        <member name="M:Cenium.Framework.Collections.Generic.PagedCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the entire PageCollection&lt;T&gt; to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied from PageCollection&lt;T&gt;. The Array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">array is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">arrayIndex is less than 0.</exception>
            <exception cref="T:System.ArgumentException">The number of elements in the source PageCollection&lt;T&gt; is greater than the available space from arrayIndex to the end of the destination array.</exception>
        </member>
        <member name="M:Cenium.Framework.Collections.Generic.PagedCollection`1.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the entire PageCollection&lt;T&gt; to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied from PageCollection&lt;T&gt;. The Array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">array is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">arrayIndex is less than 0.</exception>
            <exception cref="T:System.ArgumentException">The number of elements in the source PageCollection&lt;T&gt; is greater than the available space from arrayIndex to the end of the destination array.</exception>
        </member>
        <member name="P:Cenium.Framework.Collections.Generic.PagedCollection`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read-only
            </summary>
        </member>
        <member name="M:Cenium.Framework.Collections.Generic.PagedCollection`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the collection
            </summary>
            <param name="item">The object to remove</param>
            <returns>true if the item was successfully removed; otherwise false</returns>
        </member>
        <member name="M:Cenium.Framework.Collections.Generic.PagedCollection`1.IndexOf(`0)">
            <summary>
            Searches for the specified object and returns the zero-based index of the first occurrence within the entire collection.
            </summary>
            <param name="item">The object to search for</param>
            <returns>The index for the specified object; -1 if not found</returns>
        </member>
        <member name="M:Cenium.Framework.Collections.Generic.PagedCollection`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an element into the collection at the specified index
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Index is less than zero or greater than Count</exception>
        </member>
        <member name="M:Cenium.Framework.Collections.Generic.PagedCollection`1.RemoveAt(System.Int32)">
            <summary>
            Removes an element at the specified index
            </summary>
            <param name="index">The zero-based index at which item should be removed.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Index is less than zero or greater or equal to Count</exception>
        </member>
        <member name="P:Cenium.Framework.Collections.Generic.PagedCollection`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="M:Cenium.Framework.Collections.Generic.PagedCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An IEnumerator&lt;T&gt; that can be used to iterate through the collection</returns>
        </member>
        <member name="M:Cenium.Framework.Collections.Generic.PagedCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An IEnumerator that can be used to iterate through the collection</returns>
        </member>
        <member name="M:Cenium.Framework.Collections.Generic.PagedCollection`1.OnInitialize">
            <summary>
            Prepares the collection for paging.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Collections.Generic.PagedCollection`1.OnInitializePage(Cenium.Framework.Collections.Generic.PagedCollection{`0}.Page{`0})">
            <summary>
            Called when a page is being prepared, before loading data
            </summary>
            <param name="page">The page that is being initialized</param>
        </member>
        <member name="M:Cenium.Framework.Collections.Generic.PagedCollection`1.OnLoadPage(Cenium.Framework.Collections.Generic.PagedCollection{`0}.Page{`0})">
            <summary>
            Called when a new page needs to be loaded
            </summary>
            <param name="page">The page that is being loaded</param>
        </member>
        <member name="M:Cenium.Framework.Collections.Generic.PagedCollection`1.InitializePages(System.Int32,System.Int32)">
            <summary>
            Prepares the pages for being loaded. This method should be called from the OnInitialize method to set the Count property.
            </summary>
            <param name="count">The number of elements in the collection.</param>
            <param name="pageSize">The actual paging size</param>
        </member>
        <member name="M:Cenium.Framework.Collections.Generic.PagedCollection`1.GetPageReference(`0)">
            <summary>
            Gets a page reference for a specified object
            </summary>
            <param name="item">The object to locate the page reference for</param>
            <returns>A PageReference&lt;T&gt; instance, or null if the item is not in the collection</returns>
        </member>
        <member name="M:Cenium.Framework.Collections.Generic.PagedCollection`1.GetPageReference(System.Int32)">
            <summary>
            Gets a page reference for a specified index
            </summary>
            <param name="index">The index to find the page reference for.</param>
            <returns>A PageReference&lt;T&gt; instance, or null if the index is not in the collection</returns>
        </member>
        <member name="M:Cenium.Framework.Collections.Generic.PagedCollection`1.GetItemAt(System.Int32)">
            <summary>
            Gets the item at a specified index
            </summary>
            <param name="index">The index to get the item for</param>
            <returns>The item at the specified index</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than zero or greater or equal to Count</exception>
        </member>
        <member name="M:Cenium.Framework.Collections.Generic.PagedCollection`1.SetItemAt(System.Int32,`0)">
            <summary>
            Sets the item at the specified index
            </summary>
            <param name="index">The index where the item should be set</param>
            <param name="item">The item to set</param>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than zero or greater or equal to Count</exception>
        </member>
        <member name="M:Cenium.Framework.Collections.Generic.PagedCollection`1.GetPageFromOffset(System.Int32)">
            <summary>
            Gets a Page&lt;T&gt; instance for a specified offset.
            </summary>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="T:Cenium.Framework.Collections.Generic.PagedCollection`1.Page`1">
            <summary>
            Represents a page in the collection. A page is a block of items that can be loaded on demand
            </summary>
            <remarks>Pages are not manipulated directly, they are accessed by the PagedCollection. </remarks>
            <typeparam name="P">The type of elements in the collection</typeparam>
        </member>
        <member name="M:Cenium.Framework.Collections.Generic.PagedCollection`1.Page`1.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new Page instance
            </summary>
            <param name="offset">The offset from the start of the resultset</param>
            <param name="count">Initial number of items in the page</param>
        </member>
        <member name="P:Cenium.Framework.Collections.Generic.PagedCollection`1.Page`1.IsLoaded">
            <summary>
            Gets if the Page has been loaded
            </summary>
        </member>
        <member name="P:Cenium.Framework.Collections.Generic.PagedCollection`1.Page`1.Offset">
            <summary>
            Gets the offset for the page
            </summary>
        </member>
        <member name="P:Cenium.Framework.Collections.Generic.PagedCollection`1.Page`1.Count">
            <summary>
            Gets the number of items in the page
            </summary>
        </member>
        <member name="M:Cenium.Framework.Collections.Generic.PagedCollection`1.Page`1.IndexOf(`1)">
            <summary>
            Returns the zero-based index of the first occurrence of a value in the page.
            </summary>
            <param name="item">The item to locate</param>
            <returns>The index of the item or -1 if the item is not in the page</returns>
        </member>
        <member name="M:Cenium.Framework.Collections.Generic.PagedCollection`1.Page`1.Add(`1)">
            <summary>
            Adds a new item to the end of the collection
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Cenium.Framework.Collections.Generic.PagedCollection`1.Page`1.Insert(System.Int32,`1)">
            <summary>
            Inserts an item at the specified index within the page.
            </summary>
            <param name="index">The index where the item should be inserted</param>
            <param name="item">The object to insert</param>
        </member>
        <member name="M:Cenium.Framework.Collections.Generic.PagedCollection`1.Page`1.RemoveAt(System.Int32)">
            <summary>
            Removes an item at the specified index
            </summary>
            <param name="index">The index of the item to remove</param>
        </member>
        <member name="M:Cenium.Framework.Collections.Generic.PagedCollection`1.Page`1.GetItemAt(System.Int32)">
            <summary>
            Gets an item at the specified index
            </summary>
            <param name="index">The index to get the item for</param>
            <returns>The item at the specified index</returns>
        </member>
        <member name="M:Cenium.Framework.Collections.Generic.PagedCollection`1.Page`1.SetItemAt(System.Int32,`1)">
            <summary>
            Sets an item at the specified index
            </summary>
            <param name="index">The index where the item should be set</param>
            <param name="item">The object to set</param>
        </member>
        <member name="M:Cenium.Framework.Collections.Generic.PagedCollection`1.Page`1.CopyTo(`1[],System.Int32)">
            <summary>
            Copies the entire Page&lt;P&gt; to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied from Page&lt;T&gt;. The Array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">array is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">arrayIndex is less than 0.</exception>
            <exception cref="T:System.ArgumentException">The number of elements in the source Page&lt;T&gt; is greater than the available space from arrayIndex to the end of the destination array.</exception>
        </member>
        <member name="M:Cenium.Framework.Collections.Generic.PagedCollection`1.Page`1.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the entire Page&lt;P&gt; to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied from Page&lt;T&gt;. The Array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">array is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">arrayIndex is less than 0.</exception>
            <exception cref="T:System.ArgumentException">The number of elements in the source Page&lt;T&gt; is greater than the available space from arrayIndex to the end of the destination array.</exception>
        </member>
        <member name="M:Cenium.Framework.Collections.Generic.PagedCollection`1.Page`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the page collection.
            </summary>
            <returns>An IEnumerator&lt;P&gt; that can be used to iterate through the collection</returns>
        </member>
        <member name="M:Cenium.Framework.Collections.Generic.PagedCollection`1.Page`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the page collection.
            </summary>
            <returns>An IEnumerator object that can be used to iterate through the collection</returns>
        </member>
        <member name="T:Cenium.Framework.Collections.Generic.PagedCollection`1.PageReference`1">
            <summary>
            Represents a reference to a specified item
            </summary>
            <typeparam name="V">The type of elements in the PageReference</typeparam>
        </member>
        <member name="M:Cenium.Framework.Collections.Generic.PagedCollection`1.PageReference`1.#ctor(Cenium.Framework.Collections.Generic.PagedCollection{`0}.Page{`1},System.Int32,System.Int32)">
            <summary>
            Creates a new instance of a PageReference
            </summary>
            <param name="page">The page where the item exists</param>
            <param name="index">The collection index where the item exists</param>
            <param name="pageIndex">The page index where the item exists</param>
        </member>
        <member name="P:Cenium.Framework.Collections.Generic.PagedCollection`1.PageReference`1.Page">
            <summary>
            Gets the Page object where the specified item exists
            </summary>
        </member>
        <member name="P:Cenium.Framework.Collections.Generic.PagedCollection`1.PageReference`1.PageIndex">
            <summary>
            Gets the index within a page where the item is located
            </summary>
        </member>
        <member name="P:Cenium.Framework.Collections.Generic.PagedCollection`1.PageReference`1.Index">
            <summary>
            Gets the index within the collection where the item is located
            </summary>
        </member>
        <member name="T:Cenium.Framework.Collections.Generic.ThreadSafeIndex`1">
            <summary>
            A thread safe implementation of Index.
            </summary>
            <remarks>
            This implementation uses a ReaderWriterLockSlim to make the index thread safe. Multiple threads can read the index concurrently, but only one thread can update the index.
            </remarks>
        </member>
        <member name="M:Cenium.Framework.Collections.Generic.ThreadSafeIndex`1.#ctor">
            <summary>
            Initializes a new instance of the ThreadSafeIndex class
            </summary>
        </member>
        <member name="M:Cenium.Framework.Collections.Generic.ThreadSafeIndex`1.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ThreadSafeIndex class
            </summary>
            <param name="caseSensitive">Whether the index is case sensitive or not</param>
        </member>
        <member name="M:Cenium.Framework.Collections.Generic.ThreadSafeIndex`1.ToArray">
            <summary>
            Copies the elements of the Index to a new array.
            </summary>
            <returns>The elements of the index as a new array"/></returns>
        </member>
        <member name="M:Cenium.Framework.Collections.Generic.ThreadSafeIndex`1.Clear">
            <summary>
            Clears all values from the index
            </summary>
        </member>
        <member name="M:Cenium.Framework.Collections.Generic.ThreadSafeIndex`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Collections.Generic.ThreadSafeIndex`1.GetValue(System.String)">
            <summary>
            Gets an item from the index based on a string based key, or default(T) if the item is not in the index
            </summary>
            <param name="name">The string based key</param>
            <returns>The item associated with the key, or default(T) if the item is not in the index</returns>
        </member>
        <member name="M:Cenium.Framework.Collections.Generic.ThreadSafeIndex`1.Delete(System.String)">
            <summary>
            Deletes the item in the index with the given key
            </summary>
            <param name="name">The key associated with the item to delete</param>
        </member>
        <member name="M:Cenium.Framework.Collections.Generic.ThreadSafeIndex`1.SetValue(System.String,`0)">
            <summary>
            Adds or replaces an item in the index
            </summary>
            <param name="name">The key associated with the item</param>
            <param name="value">The item to add</param>
        </member>
        <member name="T:Cenium.Framework.Collections.IAsyncEnumerable">
            <summary>
            Defines an enumerator that loads the <c>IEnumerable</c> asynchronously
            </summary>
            <typeparam name="T">The type of objects to enumerate</typeparam>
        </member>
        <member name="E:Cenium.Framework.Collections.IAsyncEnumerable.IsAvailableChanged">
            <summary>
            Triggered when the IsAvailable property changes from false to true
            </summary>
        </member>
        <member name="P:Cenium.Framework.Collections.IAsyncEnumerable.IsAvailable">
            <summary>
            Gets if the enumerator is available or not
            </summary>
        </member>
        <member name="T:Cenium.Framework.ComponentModel.NamespaceDoc">
            <summary>
            The Cenium.Framework.ComponentModel namespace provides classes that are used to implement the run-time and design-time behavior of components and controls.
            </summary>
        </member>
        <member name="T:Cenium.Framework.ComponentModel.DocAttribute">
            <summary>
            Base class for documentation attributes.
            </summary>
        </member>
        <member name="P:Cenium.Framework.ComponentModel.DocAttribute.Description">
            <summary>
            Gets or sets the description of a program element.
            </summary>
        </member>
        <member name="T:Cenium.Framework.ComponentModel.DocumentationUtility">
            <summary>
            Utility class for getting code documentation at runtime
            </summary>
        </member>
        <member name="M:Cenium.Framework.ComponentModel.DocumentationUtility.GetProperties(System.Type,System.Boolean)">
            <summary>
            Gets the documentation properties for a class
            </summary>
            <param name="classType">The class type to get the properties for.</param>
            <param name="includeReadOnly">Specifies if read-only properties should be included in the result.</param>
            <returns>A read-only collection of <c>PropertyDocumentation</c> instances.</returns>
        </member>
        <member name="T:Cenium.Framework.ComponentModel.EventDispatchManager">
            <summary>
            The EventDispatchManager provides application-wide settings for raising events on a specific thread. This makes it possible to use the same class implementation for libraries that
            use different dispatching queues, for instance WPF and Windows Forms.
            </summary>
            <seealso cref="T:Cenium.Framework.ComponentModel.IEventDispatcher"/>
        </member>
        <member name="P:Cenium.Framework.ComponentModel.EventDispatchManager.Dispatcher">
            <summary>
            Gets or sets the event dispatcher implementation
            </summary>
        </member>
        <member name="P:Cenium.Framework.ComponentModel.EventDispatchManager.IsInvokeRequired">
            <summary>
            Returns true if the current thread need to invoke the event using the dispatcher.
            </summary>
        </member>
        <member name="M:Cenium.Framework.ComponentModel.EventDispatchManager.ExecuteOnUIThread(System.Action)">
            <summary>
            Invokes the specified action on the UI thread
            </summary>
            <param name="action">The action to invoke</param>
        </member>
        <member name="T:Cenium.Framework.ComponentModel.ICloseCommand">
            <summary>
            Defines the contract for models that implements closing logic
            </summary>
        </member>
        <member name="M:Cenium.Framework.ComponentModel.ICloseCommand.OnClose(System.Object)">
            <summary>
            Called when the owner UI (typically a dialog) closes
            </summary>
            <param name="owner">The owner UI</param>
        </member>
        <member name="T:Cenium.Framework.ComponentModel.IExecuteCommand">
            <summary>
            Defines the mechanism for executing a command
            </summary>
        </member>
        <member name="P:Cenium.Framework.ComponentModel.IExecuteCommand.IsExecuteEnabled">
            <summary>
            Gets a value that indicates if execute is enabled
            </summary>
        </member>
        <member name="M:Cenium.Framework.ComponentModel.IExecuteCommand.Execute">
            <summary>
            Performs the execute operation
            </summary>
        </member>
        <member name="T:Cenium.Framework.ComponentModel.SaveCommandEventArgs">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="M:Cenium.Framework.ComponentModel.SaveCommandEventArgs.#ctor">
            <summary>
            Initializes a new instance of the Events class
            </summary>
        </member>
        <member name="M:Cenium.Framework.ComponentModel.GlobalEvents.RegisterGlobalEventHandler(System.String,System.EventHandler)">
            <summary>
            Registers an <c>EventHandler</c> as a global event handler
            </summary>
            <param name="id">The identifier associated with the <c>EventHandler</c>.</param>
            <param name="handler">The <c>EventHandler</c> to register.</param>
        </member>
        <member name="M:Cenium.Framework.ComponentModel.GlobalEvents.GetGlobalEventHandler(System.String)">
            <summary>
            Gets the <c>EventHandler</c> associated with the specified identity
            </summary>
            <param name="id">The identifier associated with the <c>EventHandler</c>.</param>
            <returns>the <c>EventHandler</c> associated with the specified identity, or null if the event handler has not been registered.</returns>
        </member>
        <member name="M:Cenium.Framework.ComponentModel.GlobalEvents.RaiseGlobalEvent(System.Object,System.String)">
            <summary>
            Raises a global event
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="id">The identifier for the global event</param>
        </member>
        <member name="M:Cenium.Framework.ComponentModel.GlobalEvents.RaiseGlobalEvent(System.Object,System.String,System.EventArgs)">
            <summary>
            Raises a global event with the specified event data.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="id">The identifier for the global event</param>
            <param name="args">The event data to send with the event.</param>
        </member>
        <member name="T:Cenium.Framework.ComponentModel.IAsyncSaveCommand">
            <summary>
            Provides the mechanism for an asynchronous save operation
            </summary>
            <seealso cref="T:Cenium.Framework.ComponentModel.ISaveCommand"/>
        </member>
        <member name="E:Cenium.Framework.ComponentModel.IAsyncSaveCommand.SaveCompleted">
            <summary>
            Occurs when the save operation has completed
            </summary>
        </member>
        <member name="T:Cenium.Framework.ComponentModel.IAsyncTask">
            <summary>
            Defines a task that executes asynchronously
            </summary>
        </member>
        <member name="E:Cenium.Framework.ComponentModel.IAsyncTask.TaskCompleted">
            <summary>
            Triggered when the asynchronous task has completed
            </summary>
        </member>
        <member name="P:Cenium.Framework.ComponentModel.IAsyncTask.IsCompleted">
            <summary>
            Gets if the task has completed
            </summary>
        </member>
        <member name="T:Cenium.Framework.ComponentModel.IBusy">
            <summary>
            Defines the interface for indicating that an object is busy performing an operation
            </summary>
            <remarks>
            The IsBusy is typically is in conjunction with asynchronous operations such as populating or saving a collection
            </remarks>
        </member>
        <member name="P:Cenium.Framework.ComponentModel.IBusy.IsBusy">
            <summary>
            Returns true if the instance implementing IBusy is busy performing an operation; otherwise false.
            </summary>
        </member>
        <member name="T:Cenium.Framework.ComponentModel.IClearCommand">
            <summary>
            Defines the mechanism for performing a clear operation
            </summary>
        </member>
        <member name="P:Cenium.Framework.ComponentModel.IClearCommand.IsClearEnabled">
            <summary>
            Returns true if the implementing class can be cleared, otherwise false
            </summary>
        </member>
        <member name="M:Cenium.Framework.ComponentModel.IClearCommand.Clear">
            <summary>
            Performs the clear operation
            </summary>
        </member>
        <member name="T:Cenium.Framework.ComponentModel.IEditableModel">
            <summary>
            Defines methods and properties that a model implements to provide editing capabilities.
            </summary>
        </member>
        <member name="P:Cenium.Framework.ComponentModel.IEditableModel.IsAddEnabled">
            <summary>
            Gets a value that indicates whether a new item can be added to the model
            </summary>
            <value>
            <c>true</c> if a new item can be added to the model; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cenium.Framework.ComponentModel.IEditableModel.IsEditEnabled">
            <summary>
            Gets a value that indicates whether an item can be edited
            </summary>
            <value>
            <c>true</c> if an item can be edited; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cenium.Framework.ComponentModel.IEditableModel.IsRemoveEnabled">
            <summary>
            Gets a value that indicates whether an item can be removed from the model
            </summary>
            <value>
            <c>true</c> if an item can be removed from the model; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Cenium.Framework.ComponentModel.IEventDispatcher">
            <summary>
            Defines the contract for classes capable of invoking a dispatcher.
            </summary>
        </member>
        <member name="P:Cenium.Framework.ComponentModel.IEventDispatcher.IsInvokeRequired">
            <summary>
            Returns true if the current thread need to invoke the event using the dispatcher.
            </summary>
        </member>
        <member name="M:Cenium.Framework.ComponentModel.IEventDispatcher.BeginInvoke(System.Action)">
            <summary>
            Executes the specified delegate asynchronously on the thread that the dispatcher was created on.
            </summary>
            <param name="eventDelegate">The delegate to execute</param>
        </member>
        <member name="M:Cenium.Framework.ComponentModel.IEventDispatcher.Invoke(System.Action)">
            <summary>
            Executes the specified delegate with the specified arguments synchronously on the thread the Dispatcher is associated with.
            </summary>
            <param name="eventDelegate">The delegate to execute</param>
        </member>
        <member name="T:Cenium.Framework.ComponentModel.IModelError">
            <summary>
            Defines the mechanism for reporting data model errors
            </summary>
        </member>
        <member name="E:Cenium.Framework.ComponentModel.IModelError.Error">
            <summary>
            Occurs when the implementing instance reports an error.
            </summary>
        </member>
        <member name="T:Cenium.Framework.ComponentModel.ModelErrorEventHandler">
            <summary>
            Represents the method that will handle the Error event of the IModelError instance
            </summary>
            <param name="sender">The source of the event</param>
            <param name="args">A ModelErrorEventArgs that contains the event data</param>
        </member>
        <member name="T:Cenium.Framework.ComponentModel.ModelErrorEventArgs">
            <summary>
            Provides data for the Error event
            </summary>
        </member>
        <member name="M:Cenium.Framework.ComponentModel.ModelErrorEventArgs.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the ModelErrorEventArgs class
            </summary>
            <param name="e">The exception that occured</param>
        </member>
        <member name="P:Cenium.Framework.ComponentModel.ModelErrorEventArgs.Handled">
            <summary>
            Gets or sets a value that indicates whether the event handler has completely handled the event or whether the system should continue its own processing.
            </summary>
        </member>
        <member name="P:Cenium.Framework.ComponentModel.ModelErrorEventArgs.Error">
            <summary>
            Gets the Exception instance that triggered the event
            </summary>
        </member>
        <member name="T:Cenium.Framework.ComponentModel.ITaskProgress">
            <summary>
            Defines a mechanism for reporting progress on a task
            </summary>
        </member>
        <member name="E:Cenium.Framework.ComponentModel.ITaskProgress.TaskProgressChanged">
            <summary>
            Occurs when a task changes its progress
            </summary>
        </member>
        <member name="T:Cenium.Framework.ComponentModel.IRefreshCommand">
            <summary>
            Defines the mechanism for performing a refresh operation
            </summary>
        </member>
        <member name="P:Cenium.Framework.ComponentModel.IRefreshCommand.IsRefreshEnabled">
            <summary>
            Returns true if the implementing class can be refreshed, otherwise false
            </summary>
        </member>
        <member name="M:Cenium.Framework.ComponentModel.IRefreshCommand.Refresh">
            <summary>
            Performs the refresh operation
            </summary>
        </member>
        <member name="T:Cenium.Framework.ComponentModel.ISaveCommand">
            <summary>
            Defines the mechanism for save operations
            </summary>
        </member>
        <member name="P:Cenium.Framework.ComponentModel.ISaveCommand.IsSaveEnabled">
            <summary>
            Returns true of the save method can be called, otherwise false.
            </summary>
        </member>
        <member name="M:Cenium.Framework.ComponentModel.ISaveCommand.Save">
            <summary>
            Performs a save operation
            </summary>
        </member>
        <member name="T:Cenium.Framework.ComponentModel.ISaveProgress">
            <summary>
            Defines the mechaninism for reporting progress during a save operation
            </summary>
        </member>
        <member name="E:Cenium.Framework.ComponentModel.ISaveProgress.SaveStarted">
            <summary>
            Occurs when the save operation starts
            </summary>
        </member>
        <member name="E:Cenium.Framework.ComponentModel.ISaveProgress.SaveCompleted">
            <summary>
            Occurs when the save operation is completed
            </summary>
        </member>
        <member name="E:Cenium.Framework.ComponentModel.ISaveProgress.SaveProgressChanged">
            <summary>
            Occurs the save operation wants to report some kind of progress
            </summary>
        </member>
        <member name="T:Cenium.Framework.ComponentModel.ITypeConverter">
            <summary>
            Defines a mechanism that provides a unified way of converting types of values to other types
            </summary>
        </member>
        <member name="M:Cenium.Framework.ComponentModel.ITypeConverter.ConvertToInvariantString(System.Object)">
            <summary>
            Converts the specified value to a culture-invariant string representation.
            </summary>
            <param name="value">The Object to convert.</param>
            <returns>A String that represents the converted value.</returns>
        </member>
        <member name="M:Cenium.Framework.ComponentModel.ITypeConverter.ConvertFromInvariantString(System.String)">
            <summary>
            Converts the given string to the type of this converter, using the invariant culture.
            </summary>
            <param name="value">The String to convert. </param>
            <returns>An Object that represents the converted text.</returns>
        </member>
        <member name="T:Cenium.Framework.ComponentModel.ITypeConverterFactory">
            <summary>
            Defines a mechanism for getting ITypeConverter instances
            </summary>
        </member>
        <member name="M:Cenium.Framework.ComponentModel.ITypeConverterFactory.GetTypeConverterForType(System.Type)">
            <summary>
            Gets an ITypeConverter instance for a specified type
            </summary>
            <param name="type">The type to get the ITypeConverter instance for</param>
            <returns>An ITypeConverter instance</returns>
        </member>
        <member name="M:Cenium.Framework.ComponentModel.ITypeConverterFactory.CreateInstance(System.Type)">
            <summary>
            Creates a new ITypeConverter instance of specified type. This method is used to create ITypeConverter instances from type converter types
            </summary>
            <param name="typeConverterType">The converter type</param>
            <returns>An IConverter instance</returns>
        </member>
        <member name="T:Cenium.Framework.ComponentModel.NotifyCollectionChangedBase">
            <summary>
            Provides an implementation of the INotifyCollectionChanged interface. This class is abstract and intended to be inherited, and not used directly.
            </summary>
        </member>
        <member name="E:Cenium.Framework.ComponentModel.NotifyCollectionChangedBase.CollectionChanged">
            <summary>
            Occurs when the collection changes
            </summary>
        </member>
        <member name="M:Cenium.Framework.ComponentModel.NotifyCollectionChangedBase.#ctor">
            <summary>
            Initializes a new instance of the NotifyCollectionChangedBase class
            </summary>
        </member>
        <member name="P:Cenium.Framework.ComponentModel.NotifyCollectionChangedBase.IsCollectionChangedEventEnabled">
            <summary>
            Gets or sets if the Collection event should be raised. Default is true.
            </summary>
        </member>
        <member name="P:Cenium.Framework.ComponentModel.NotifyCollectionChangedBase.IsCollectionChangedEventHandlerAttached">
            <summary>
            Returns true if one or more CollectionChanged event handlers is attached to the CollectionChanged event
            </summary>
        </member>
        <member name="M:Cenium.Framework.ComponentModel.NotifyCollectionChangedBase.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises the CollectionChanged event. Note that the property is not raised if the event is disabled, or if no event handler is attached.
            </summary>
            <param name="args">Data related to the event</param>
        </member>
        <member name="M:Cenium.Framework.ComponentModel.NotifyCollectionChangedBase.OnCollectionReset">
            <summary>
            Convenience method for raising the CollectionChanged event with action Reset
            </summary>
        </member>
        <member name="M:Cenium.Framework.ComponentModel.NotifyCollectionChangedBase.NotifyItemAdded(System.Object,System.Int32)">
            <summary>
            Raises the CollectionChanged event when a new item is added
            </summary>
            <param name="item">The item that was added</param>
            <param name="index">The index for the new item</param>
        </member>
        <member name="M:Cenium.Framework.ComponentModel.NotifyCollectionChangedBase.NotifyItemMoved(System.Object,System.Int32,System.Int32)">
            <summary>
            Raises the CollectionChanged event when a new item is moved
            </summary>
            <param name="item">The item that was moved</param>
            <param name="oldIndex">The old index for the item</param>
            <param name="newIndex">The new index for the item</param>
        </member>
        <member name="T:Cenium.Framework.ComponentModel.NotifyPropertyChangedBase">
            <summary>
            Provides an implementation of the INotifyPropertyChanged interface. This class is abstract and intended to be inherited, and not used directly.
            </summary>
        </member>
        <member name="E:Cenium.Framework.ComponentModel.NotifyPropertyChangedBase.PropertyChanged">
            <summary>
            Occurs when a property value changes
            </summary>
        </member>
        <member name="M:Cenium.Framework.ComponentModel.NotifyPropertyChangedBase.#ctor">
            <summary>
            Initializes a new instance of the NotifyPropertyChangedBase class
            </summary>
        </member>
        <member name="P:Cenium.Framework.ComponentModel.NotifyPropertyChangedBase.IsPropertyChangedEventEnabled">
            <summary>
            Gets or sets if the PropertyChanged event should be raised. Default is true.
            </summary>
        </member>
        <member name="P:Cenium.Framework.ComponentModel.NotifyPropertyChangedBase.IsPropertyChangedEventHandlerAttached">
            <summary>
            Returns true if one or more PropertyChanged event handlers is attached to the PropertyChanged event
            </summary>
        </member>
        <member name="M:Cenium.Framework.ComponentModel.NotifyPropertyChangedBase.OnPropertyChanged(System.String)">
            <summary>
            Raises the PropertyChanged event for a specified property name. Note that the property is not raised if the event is disabled, or if no event handler is attached.
            </summary>
            <param name="propertyName">The name of the property that changed</param>
        </member>
        <member name="M:Cenium.Framework.ComponentModel.NotifyPropertyChangedBase.SetAndNotifyPropertyChanged``1(System.String,``0@,``0,System.String[])">
            <summary>
            Assigns a value to a property and raises the PropertyChanged event. This method will return without raising an event if the old and new values are the same.
            </summary>
            <typeparam name="T">The type of the property</typeparam>
            <param name="propertyName">The name of the property</param>
            <param name="property">The property variable reference</param>
            <param name="value">The new value</param>
            <param name="dependants">Any dependant properties that should have a PropertyChanged event triggered</param>
            <returns>True if the property value has changed, otherwise false</returns>
        </member>
        <member name="T:Cenium.Framework.ComponentModel.PropertyDocInfo">
            <summary>
            Represents documentation about a property
            </summary>
            <seealso cref="T:Cenium.Framework.ComponentModel.NotifyPropertyChangedBase" />
        </member>
        <member name="T:Cenium.Framework.ComponentModel.PropertyDocAttribute">
            <summary>
            Represents a documentation attribute for properties
            </summary>
            <seealso cref="T:Cenium.Framework.ComponentModel.DocAttribute" />
        </member>
        <member name="P:Cenium.Framework.ComponentModel.PropertyDocAttribute.IsRequired">
            <summary>
            Gets or sets a value indicating whether the property must have a value
            </summary>
        </member>
        <member name="P:Cenium.Framework.ComponentModel.PropertyDocAttribute.DefaultValue">
            <summary>
            Gets or sets the default value for the property
            </summary>
        </member>
        <member name="T:Cenium.Framework.ComponentModel.StringIdentityItem">
            <summary>
            Represents an item that is identified by a string value.
            </summary>
        </member>
        <member name="M:Cenium.Framework.ComponentModel.StringIdentityItem.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cenium.Framework.ComponentModel.StringIdentityItem"/> class.
            </summary>
            <param name="identity">The identity of the item</param>
            <param name="displayName">The display name of the item.</param>
        </member>
        <member name="P:Cenium.Framework.ComponentModel.StringIdentityItem.Identity">
            <summary>
            Gets the identity of the item
            </summary>
        </member>
        <member name="P:Cenium.Framework.ComponentModel.StringIdentityItem.DisplayName">
            <summary>
            Gets the display name of the item
            </summary>
        </member>
        <member name="T:Cenium.Framework.ComponentModel.StringPropertyValue">
            <summary>
            Represents a simple key-value pair where both key and value are strings.
            </summary>
        </member>
        <member name="M:Cenium.Framework.ComponentModel.TypeConverterManager.GetTypeConverterForType(System.Type)">
            <summary>
            Gets an ITypeConverter instance for a given type
            </summary>
            <param name="type">The type to get a ITypeConverter for</param>
            <returns>An ITypeConverter instance</returns>
        </member>
        <member name="M:Cenium.Framework.ComponentModel.TypeConverterManager.CreateInstance(System.Type)">
            <summary>
            Creates a ITypeConverter instance for a given typeconverter type.
            </summary>
            <param name="type">The TypeConverter class to get an ITypeConverter for</param>
            <returns>An ITypeConverter instance</returns>
        </member>
        <member name="M:Cenium.Framework.ComponentModel.TypeConverterManager.Register(Cenium.Framework.ComponentModel.ITypeConverterFactory)">
            <summary>
            Registers an ITypeConverterFactory
            </summary>
            <param name="factory">The factory to register</param>
        </member>
        <member name="T:Cenium.Framework.ComponentAttribute">
            <summary>
            ComponentAttribute defines what component an assembly belongs to. Used to group services and component interfaces.
            </summary>
        </member>
        <member name="M:Cenium.Framework.ComponentAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ComponentAttribute class with the specified name
            </summary>
            <param name="name">The name of the component</param>
        </member>
        <member name="P:Cenium.Framework.ComponentAttribute.Name">
            <summary>
            Gets or sets the name of a component
            </summary>
        </member>
        <member name="T:Cenium.Framework.ComponentDescriptionAttribute">
            <summary>
            Provides descriptions for a component. This attribute should be set on the most significant assembly in a component
            </summary>
        </member>
        <member name="M:Cenium.Framework.ComponentDescriptionAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the ComponentDescriptionAttribute class
            </summary>
            <param name="displayName">The display name for the component</param>
            <param name="description">The description of the component</param>
            <param name="remarks">Additional information for the component</param>
        </member>
        <member name="P:Cenium.Framework.ComponentDescriptionAttribute.DisplayName">
            <summary>
            Gets the display name for the component
            </summary>
        </member>
        <member name="P:Cenium.Framework.ComponentDescriptionAttribute.Description">
            <summary>
            Gets the description for the component
            </summary>
        </member>
        <member name="P:Cenium.Framework.ComponentDescriptionAttribute.Remarks">
            <summary>
            Gets additional information for the component
            </summary>
        </member>
        <member name="T:Cenium.Framework.ComponentVersionAttribute">
            <summary>
            ComponentVersionAttribute defines the overall version for a component. This attribute should be set on the most significant assembly in a component
            </summary>
        </member>
        <member name="M:Cenium.Framework.ComponentVersionAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the ComponentVersionAttribute class
            </summary>
            <param name="version">The version number for a component</param>
            <param name="description">The version description for a component</param>
        </member>
        <member name="P:Cenium.Framework.ComponentVersionAttribute.Version">
            <summary>
            Gets the version for a component
            </summary>
        </member>
        <member name="P:Cenium.Framework.ComponentVersionAttribute.Description">
            <summary>
            Gets the version description for a component
            </summary>
        </member>
        <member name="T:Cenium.Framework.Data.ServiceQueryOperator">
            <summary>
            Defines a set of valid query operators
            </summary>
        </member>
        <member name="F:Cenium.Framework.Data.ServiceQueryOperator.OpUndefined">
            <summary>
            Operator is undefined
            </summary>
        </member>
        <member name="F:Cenium.Framework.Data.ServiceQueryOperator.OpEquals">
            <summary>
            Operator ==
            </summary>
        </member>
        <member name="F:Cenium.Framework.Data.ServiceQueryOperator.OpNotEquals">
            <summary>
            Operator !=
            </summary>
        </member>
        <member name="F:Cenium.Framework.Data.ServiceQueryOperator.OpIsNull">
            <summary>
            Operator == null
            </summary>
        </member>
        <member name="F:Cenium.Framework.Data.ServiceQueryOperator.OpIsNotNull">
            <summary>
            Operator != null
            </summary>
        </member>
        <member name="F:Cenium.Framework.Data.ServiceQueryOperator.OpStartsWith">
            <summary>
            Operator StartsWith
            </summary>
        </member>
        <member name="F:Cenium.Framework.Data.ServiceQueryOperator.OpEndsWith">
            <summary>
            Operator EndsWith
            </summary>
        </member>
        <member name="F:Cenium.Framework.Data.ServiceQueryOperator.OpContains">
            <summary>
            Operator Contains
            </summary>
        </member>
        <member name="F:Cenium.Framework.Data.ServiceQueryOperator.OpLessThan">
            <summary>
            Operator &lt;
            </summary>
        </member>
        <member name="F:Cenium.Framework.Data.ServiceQueryOperator.OpLessThanOrEqual">
            <summary>
            Operator &lt;=
            </summary>
        </member>
        <member name="F:Cenium.Framework.Data.ServiceQueryOperator.OpGreaterThan">
            <summary>
            Operator &gt;
            </summary>
        </member>
        <member name="F:Cenium.Framework.Data.ServiceQueryOperator.OpGreaterThanOrEqual">
            <summary>
            Operator &gt;=
            </summary>
        </member>
        <member name="F:Cenium.Framework.Data.ServiceQueryOperator.OpRange">
            <summary>
            Operator Range
            </summary>
        </member>
        <member name="F:Cenium.Framework.Data.ServiceQueryOperator.OpIn">
            <summary>
            Operator In
            </summary>
        </member>
        <member name="F:Cenium.Framework.Data.ServiceQueryOperator.OpNotIn">
            <summary>
            Operator !In
            </summary>
        </member>
        <member name="F:Cenium.Framework.Data.ServiceQueryOperator.OpAll">
            <summary>
            Operator where all operands must match
            </summary>
        </member>
        <member name="F:Cenium.Framework.Data.ServiceQueryOperator.OpAny">
            <summary>
            Operator where one of the operands must match
            </summary>
        </member>
        <member name="T:Cenium.Framework.Data.ServiceQueryOperators">
            <summary>
            Contains extension methods for the ServiceQueryOperator enumeration
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.ServiceQueryOperators.GetOperands(Cenium.Framework.Data.ServiceQueryOperator)">
            <summary>
            Gets the number of operands for a ServiceQueryOperator
            </summary>
            <param name="op">The operator to get the operands for</param>
            <returns>The number of operands. A value of -1 indicates variable number of operands</returns>
        </member>
        <member name="M:Cenium.Framework.Data.ServiceQueryOperators.GetName(Cenium.Framework.Data.ServiceQueryOperator)">
            <summary>
            Gets the name for a <c>ServiceQueryOperator</c>
            </summary>
            <param name="op">The operator to get the name for</param>
            <returns>The name of the operator</returns>
        </member>
        <member name="M:Cenium.Framework.Data.ServiceQueryOperators.Symbol(Cenium.Framework.Data.ServiceQueryOperator)">
            <summary>
            Gets the symbol for a <c>ServiceQueryOperator</c>
            </summary>
            <param name="op">The operator to get the symbol for for</param>
            <returns>The symbol associated with the operator</returns>
        </member>
        <member name="M:Cenium.Framework.Data.ServiceQueryOperators.IsValidForType(Cenium.Framework.Data.ServiceQueryOperator,System.Type,System.Boolean)">
            <summary>
            Determines whether the operator is valid for a Type
            </summary>
            <param name="op">The operator to determine if is valid.</param>
            <param name="type">The type to determine if is valid for the operator</param>
            <param name="required">Whether the type can be nullable or not</param>
            <returns><c>true</c> if the operator is valid for the specified type; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Cenium.Framework.Data.ServiceQueryOperators.IsValidForEnum(Cenium.Framework.Data.ServiceQueryOperator,System.Boolean)">
            <summary>
            Determines whether the operator is a valid query operator for an enumeration
            </summary>
            <param name="op">The query operator</param>
            <param name="required">Whether the type value can be nullable or not.</param>
            <returns><c>true</c> if the operator is valid for an enumeration; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Cenium.Framework.Data.ServiceQueryOperators.CreateExpression(Cenium.Framework.Data.ServiceQueryOperator,System.String,System.String,System.String)">
            <summary>
            Creates a service query expression
            </summary>
            <param name="op">The operator to use</param>
            <param name="propertyName">Name of the property.</param>
            <param name="value1">The first operand value</param>
            <param name="value2">The first operand value. Only applicable for ranges</param>
            <returns>A service query expression</returns>
        </member>
        <member name="T:Cenium.Framework.Data.WorkDateChangeType">
            <summary>
            Defines when a work date change value
            </summary>
        </member>
        <member name="F:Cenium.Framework.Data.WorkDateChangeType.Default">
            <summary>
            The work date changes when the associated date change
            </summary>
        </member>
        <member name="F:Cenium.Framework.Data.WorkDateChangeType.BeforeMidnight">
            <summary>
            Work date change before midnight of the property date
            </summary>
        </member>
        <member name="F:Cenium.Framework.Data.WorkDateChangeType.AfterMidnight">
            <summary>
            Work date change after midnight of the property date
            </summary>
        </member>
        <member name="T:Cenium.Framework.Data.PropertyContextDate">
            <summary>
            Class to get date and date/time specific to a property
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.PropertyContextDate.#ctor(System.TimeZoneInfo,Cenium.Framework.Data.WorkDateChangeType,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Cenium.Framework.Data.PropertyContextDate"/> class.
            </summary>
            <param name="tz">The timezone the work date is related to.</param>
            <param name="changeType">Specifies when the work date change.</param>
            <param name="startTime">Specifies the time when the next work day starts.</param>
        </member>
        <member name="P:Cenium.Framework.Data.PropertyContextDate.TimeZone">
            <summary>
            Gets the time zone the work date is related to
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.PropertyContextDate.WorkDateChangeType">
            <summary>
            Gets when the work date change value
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.PropertyContextDate.WorkDateStartTime">
            <summary>
            Gets the time when the work date change value
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.PropertyContextDate.WorkDate">
            <summary>
            Gets the current work date.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.PropertyContextDate.PropertyDate">
            <summary>
            Gets the current property context date.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.PropertyContextDate.PropertyDateTime">
            <summary>
            Gets the current property context datetime.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.PropertyContextDate.ToWorkDate(System.DateTime)">
            <summary>
            Converts a <c>DateTime</c> to a work date. If the DateTimeKind == DateTimeKind.Unspecified, the dt argument is assumed to be in local time.
            </summary>
            <param name="dt">The <c>DateTime</c> to convert.</param>
            <returns>The work date.</returns>
        </member>
        <member name="M:Cenium.Framework.Data.PropertyContextDate.ToPropertyDate(System.DateTime)">
            <summary>
            Converts a <c>DateTime</c> to a property context date. If the DateTimeKind == DateTimeKind.Unspecified, the dt argument is assumed to be in local time.
            </summary>
            <param name="dt">The <c>DateTime</c> to convert.</param>
            <returns>The property context date.</returns>
        </member>
        <member name="M:Cenium.Framework.Data.PropertyContextDate.ToPropertyDateTime(System.DateTime)">
            <summary>
            Converts a <c>DateTime</c> to a property context datetime. If the DateTimeKind == DateTimeKind.Unspecified, the dt argument is assumed to be in local time.
            </summary>
            <param name="dt">The <c>DateTime</c> to convert.</param>
            <returns>The property context datetime.</returns>
        </member>
        <member name="T:Cenium.Framework.Deployment.ConfigurableFeature">
            <summary>
            Represents a feature where the state is configurable
            </summary>
            <seealso cref="T:Cenium.Framework.Deployment.Feature" />
        </member>
        <member name="M:Cenium.Framework.Deployment.ConfigurableFeature.#ctor(System.String,System.String,System.String,Cenium.Framework.Deployment.ToggleState)">
            <summary>
            Initializes a new instance of the <see cref="T:Cenium.Framework.Deployment.ConfigurableFeature"/> class.
            </summary>
            <param name="identity">The identity associated with the feature.</param>
            <param name="state">The initial state of the feature.</param>
            <param name="description">A short summary of the feature.</param>
            <param name="name">A display friendly name of the feature</param>
        </member>
        <member name="P:Cenium.Framework.Deployment.ConfigurableFeature.DefaultState">
            <summary>
            Gets the initial state of the feature
            </summary>
        </member>
        <member name="T:Cenium.Framework.Deployment.DependentFeature">
            <summary>
            Represents a feature toggle that inherits its state from another feature
            </summary>
            <seealso cref="T:Cenium.Framework.Deployment.Feature" />
        </member>
        <member name="M:Cenium.Framework.Deployment.DependentFeature.#ctor(System.String,System.Func{Cenium.Framework.Deployment.Feature,Cenium.Framework.Deployment.ToggleState})">
            <summary>
            Initializes a new instance of the <see cref="T:Cenium.Framework.Deployment.DependentFeature"/> class.
            </summary>
            <param name="identity">The identity associated with the feature.</param>
            <param name="stateHandler">A delegate method that returns the state if the parent is not found. If null and the parent does not exist, the state will be Disabled.</param>
        </member>
        <member name="P:Cenium.Framework.Deployment.DependentFeature.Dependents">
            <summary>
            Gets all dependent features (i.e. features that inherit their state from this feature).
            </summary>
        </member>
        <member name="T:Cenium.Framework.Deployment.Feature">
            <summary>
            Base class for all feature toggles
            </summary>
        </member>
        <member name="M:Cenium.Framework.Deployment.Feature.#ctor(System.String,System.String,System.String,Cenium.Framework.Deployment.ToggleState)">
            <summary>
            Initializes a new instance of the <see cref="T:Cenium.Framework.Deployment.Feature"/> class.
            </summary>
            <param name="identity">The identity associated with the feature.</param>
            <param name="state">The initial state of the feature.</param>
            <param name="description">A short summary of the feature.</param>
            <param name="name">A display friendly name of the feature</param>
        </member>
        <member name="P:Cenium.Framework.Deployment.Feature.Identity">
            <summary>
            Gets the identity of the feature.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Deployment.Feature.DisplayName">
            <summary>
            Gets the display-friendly name of the feature
            </summary>
        </member>
        <member name="P:Cenium.Framework.Deployment.Feature.Description">
            <summary>
            Gets a summary of what the feature does.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Deployment.Feature.State">
            <summary>
            Gets the current state of the feature toggle
            </summary>
        </member>
        <member name="P:Cenium.Framework.Deployment.Feature.IsEnabled">
            <summary>
            Gets a value indicating whether this instance is enabled.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Deployment.Feature.IsConfigurable">
            <summary>
            Gets whether the feature toggle is configurable
            </summary>
        </member>
        <member name="P:Cenium.Framework.Deployment.Feature.Component">
            <summary>
            Gets the component that owns the feature
            </summary>
        </member>
        <member name="P:Cenium.Framework.Deployment.Feature.DefaultState">
            <summary>
            Gets the initial state of the feature
            </summary>
        </member>
        <member name="P:Cenium.Framework.Deployment.Feature.Dependents">
            <summary>
            Gets all dependent features (i.e. features that inherit their state from this feature).
            </summary>
        </member>
        <member name="T:Cenium.Framework.Deployment.FeatureTypeAttribute">
            <summary>
            Used to define that a class contains feature definitions that should be loaded at startup.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="T:Cenium.Framework.Deployment.FeatureManager">
            <summary>
            Contains methods for handling feature toggles
            </summary>
        </member>
        <member name="P:Cenium.Framework.Deployment.FeatureManager.Features">
            <summary>
            Gets all registered features
            </summary>
        </member>
        <member name="M:Cenium.Framework.Deployment.FeatureManager.GetFeatureByIdentity(System.String)">
            <summary>
            Gets a feature by its identity
            </summary>
            <param name="identity">The identity of the feature to get.</param>
            <returns>The <c>Feature</c> instance associated with the identity, or null if the feature does not exist.</returns>
        </member>
        <member name="M:Cenium.Framework.Deployment.FeatureManager.Register``1(``0,System.Type)">
            <summary>
            Registers a feature toggle
            </summary>
            <typeparam name="TFeature">The type of the feature toggle.</typeparam>
            <param name="feature">The feature toggle to register</param>
            <param name="ownerType">The type that owns the feature (usually the class that implements the call to the Register method).</param>
            <returns>The feature toggle that was registered.</returns>
        </member>
        <member name="M:Cenium.Framework.Deployment.FeatureManager.Register``1(``0,System.String)">
            <summary>
            Registers a feature toggle. This is an infrastructure method and should not be used directly.
            </summary>
            <typeparam name="TFeature">The type of the feature toggle.</typeparam>
            <param name="feature">The feature toggle to register</param>
            <param name="component">The component that owns the feature.</param>
            <returns>The feature toggle that was registered.</returns>
        </member>
        <member name="M:Cenium.Framework.Deployment.FeatureManager.RegisterDependent(System.String,System.Type,System.Func{Cenium.Framework.Deployment.Feature,Cenium.Framework.Deployment.ToggleState})">
            <summary>
            Registers a feature that is dependent on another feature
            </summary>
            <param name="identity">The identity of the parent feature.</param>
            <param name="ownerType">Type of the class that owns the dependent feature.</param>
            <param name="stateHandler">A delegate method that sets the feature state if the parent does not exist.</param>
            <returns>A new <c>Feature</c> instance</returns>
        </member>
        <member name="M:Cenium.Framework.Deployment.FeatureManager.SetFeatureState(System.String,Cenium.Framework.Deployment.ToggleState)">
            <summary>
            Sets the state of a configurable feature. This is an infrastructure method and should only be called from the framework.
            </summary>
            <param name="identity">The feature identity.</param>
            <param name="state">The state of the feature.</param>
        </member>
        <member name="T:Cenium.Framework.Deployment.ProductFeature">
            <summary>
            Represents a permanent feature toggle, used to indicate if a particular product feature is present or not
            </summary>
            <seealso cref="T:Cenium.Framework.Deployment.Feature" />
        </member>
        <member name="M:Cenium.Framework.Deployment.ProductFeature.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cenium.Framework.Deployment.ProductFeature"/> class.
            </summary>
            <param name="identity">The identity associated with the feature.</param>
            <param name="description">A short summary of the feature.</param>
            <param name="name">A display friendly name of the feature</param>
        </member>
        <member name="T:Cenium.Framework.Deployment.ReleaseFeature">
            <summary>
            Represents a release feature toggle. These feature toggles are configurable and intended to be short-lived.
            </summary>
            <seealso cref="T:Cenium.Framework.Deployment.ConfigurableFeature" />
        </member>
        <member name="M:Cenium.Framework.Deployment.ReleaseFeature.#ctor(System.String,System.String,System.String,Cenium.Framework.Deployment.ToggleState)">
            <summary>
            Initializes a new instance of the <see cref="T:Cenium.Framework.Deployment.ReleaseFeature"/> class.
            </summary>
            <param name="identity">The identity associated with the feature.</param>
            <param name="state">The initial state of the feature.</param>
            <param name="description">A short summary of the feature.</param>
            <param name="name">A display friendly name of the feature</param>
        </member>
        <member name="T:Cenium.Framework.Deployment.ToggleState">
            <summary>
            Defines the state for a feature toggle
            </summary>
        </member>
        <member name="F:Cenium.Framework.Deployment.ToggleState.Enabled">
            <summary>
            Feature is enabled
            </summary>
        </member>
        <member name="F:Cenium.Framework.Deployment.ToggleState.Disabled">
            <summary>
            The feature is disabled
            </summary>
        </member>
        <member name="T:Cenium.Framework.FrameworkException">
            <summary>
            The exception that is thrown when a non-fatal application error occurs. All framework specific exceptions should be derived from this class.
            </summary>
        </member>
        <member name="M:Cenium.Framework.FrameworkException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the FrameworkMessage class
            </summary>
            <param name="msg">The default message for the exception. </param>
        </member>
        <member name="M:Cenium.Framework.FrameworkException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the FrameworkMessage class
            </summary>
            <param name="msg">The default message for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:Cenium.Framework.FrameworkException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new translatable instance of the FrameworkMessage class
            </summary>
            <param name="id">The error id</param>
            <param name="msg">The default message for the exception. This can be a format string</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:Cenium.Framework.FrameworkException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new translateable instance of the FrameworkMessage class
            </summary>
            <param name="id">The error id</param>
            <param name="msg">The default message for the exception. This can be a format string</param>
        </member>
        <member name="M:Cenium.Framework.FrameworkException.#ctor(System.String,System.String,System.Object[])">
            <summary>
            Initializes a new translateable instance of the FrameworkMessage class
            </summary>
            <param name="id">The error id</param>
            <param name="msg">The default message for the exception. This can be a format string</param>
            <param name="parameters">Parameters to include in the message, if the message is a format string</param>
        </member>
        <member name="M:Cenium.Framework.FrameworkException.#ctor(System.String,System.String,System.Object[],System.Exception)">
            <summary>
            Initializes a new translateable instance of the FrameworkMessage class
            </summary>
            <param name="id">The error id</param>
            <param name="msg">The default message for the exception. This can be a format string</param>
            <param name="parameters">Parameters to include in the message, if the message is a format string</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="P:Cenium.Framework.FrameworkException.Id">
            <summary>
            The exception id
            </summary>
        </member>
        <member name="P:Cenium.Framework.FrameworkException.Parameters">
            <summary>
            Gets the message parameters
            </summary>
        </member>
        <member name="P:Cenium.Framework.FrameworkException.Message">
            <summary>
            The default exception message
            </summary>
        </member>
        <member name="T:Cenium.Framework.Globalization.CurrencyInfo">
            <summary>
            Provides information about currencies
            </summary>
        </member>
        <member name="P:Cenium.Framework.Globalization.CurrencyInfo.CurrencyCode">
            <summary>
            Gets the currency code for the currency.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Globalization.CurrencyInfo.Symbol">
            <summary>
            Gets the symbol associated with the currency
            </summary>
        </member>
        <member name="M:Cenium.Framework.Globalization.CurrencyInfo.GetInstance(System.String)">
            <summary>
            Gets the <c>CurrencyInfo</c> instance associated with a currency code.
            </summary>
            <param name="currencyCode">The currency code.</param>
            <returns>A <c>CurrencyInfo</c> instance associated with the specified currency code if one exists; otherwise null.</returns>
        </member>
        <member name="T:Cenium.Framework.Globalization.DateTimeDisplayFormat">
            <summary>
            Contains methods to handle display date, time and datetime
            </summary>
        </member>
        <member name="P:Cenium.Framework.Globalization.DateTimeDisplayFormat.LocalFormatInfo">
            <summary>
            Gets the local format information.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Globalization.DateTimeDisplayFormat.ToDisplayFormat(System.DateTime,Cenium.Framework.Globalization.DateTimeFormatType)">
            <summary>
            Formats a string representation of the DateTime using the specified DateTimeFormatType
            </summary>
            <param name="dt">The DateTime to format</param>
            <param name="formatType">The format type to use</param>
            <returns>A string representation of the DateTime</returns>
        </member>
        <member name="M:Cenium.Framework.Globalization.DateTimeDisplayFormat.ToDisplayFormat(System.Nullable{System.DateTime},Cenium.Framework.Globalization.DateTimeFormatType)">
            <summary>
            Formats a string representation of the DateTime using the specified DateTimeFormatType
            </summary>
            <param name="dt">The DateTime to format</param>
            <param name="formatType">The format type to use</param>
            <returns>A string representation of the DateTime</returns>
        </member>
        <member name="M:Cenium.Framework.Globalization.DateTimeDisplayFormat.ToDisplayFormat(System.TimeSpan)">
            <summary>
            Formats a string representation of the TimeSpan as time
            </summary>
            <param name="ts">The TimeSpan to format</param>
            <returns>A string representation of the TimeSpan</returns>
        </member>
        <member name="M:Cenium.Framework.Globalization.DateTimeDisplayFormat.ToDisplayFormat(System.Nullable{System.TimeSpan})">
            <summary>
            Formats a string representation of the TimeSpan as time
            </summary>
            <param name="ts">The TimeSpan to format</param>
            <returns>A string representation of the TimeSpan</returns>
        </member>
        <member name="M:Cenium.Framework.Globalization.DateTimeDisplayFormat.ToDateTime(System.String)">
            <summary>
            Converts the display value to a DateTime, or null if the displayValue argument is null or empty. Also returns null if the display value is an invalid datetime representation
            </summary>
            <param name="displayValue">The display value to convert.</param>
            <returns>A DateTime instance if conversion is successful; otherwise null</returns>
        </member>
        <member name="M:Cenium.Framework.Globalization.DateTimeDisplayFormat.ToDate(System.String)">
            <summary>
            Converts the display value to a DateTime with only the date component set, or null if the displayValue argument is null or empty. Also returns null if the display value is an invalid date representation
            </summary>
            <param name="displayValue">The display value to convert.</param>
            <returns>A DateTime instance if conversion is successful; otherwise null</returns>
        </member>
        <member name="M:Cenium.Framework.Globalization.DateTimeDisplayFormat.ToTimeSpan(System.String)">
            <summary>
            Converts the display value to a TimeSpan instance, or null if the displayValue argument is null or empty. Also returns null if the display value is an invalid time representation
            </summary>
            <param name="displayValue">The display value to convert.</param>
            <returns>A TimeSpan instance if conversion is successful; otherwise null</returns>
        </member>
        <member name="T:Cenium.Framework.Globalization.DateTimeFormatType">
            <summary>
            Represents valid UI display format types
            </summary>
        </member>
        <member name="F:Cenium.Framework.Globalization.DateTimeFormatType.ShortDate">
            <summary>
            Format is short date
            </summary>
        </member>
        <member name="F:Cenium.Framework.Globalization.DateTimeFormatType.ShortTime">
            <summary>
            The short time
            </summary>
        </member>
        <member name="F:Cenium.Framework.Globalization.DateTimeFormatType.ShortDateTime">
            <summary>
            The short date time
            </summary>
        </member>
        <member name="F:Cenium.Framework.Globalization.DateTimeFormatType.Full">
            <summary>
            Format is full datetime
            </summary>
        </member>
        <member name="F:Cenium.Framework.Globalization.DateTimeFormatType.RelativeDate">
            <summary>
            Format is relative date
            </summary>
        </member>
        <member name="F:Cenium.Framework.Globalization.DateTimeFormatType.RelativeDateTime">
            <summary>
            Format is relative datetime
            </summary>
        </member>
        <member name="T:Cenium.Framework.Globalization.FormatInfo">
            <summary>
            Contains formatting rules for date, time and numeric values
            </summary>
        </member>
        <member name="T:Cenium.Framework.Globalization.NumberDisplayFormat">
            <summary>
            Contains methods to handle display of numbers
            </summary>
        </member>
        <member name="P:Cenium.Framework.Globalization.NumberDisplayFormat.LocalFormatInfo">
            <summary>
            Gets the local format information.
            </summary>
        </member>
        <member name="T:Cenium.Framework.Globalization.NumberFormatType">
            <summary>
            Specifies the display format of a numeric type
            </summary>
        </member>
        <member name="F:Cenium.Framework.Globalization.NumberFormatType.Default">
            <summary>
            The default display format
            </summary>
        </member>
        <member name="F:Cenium.Framework.Globalization.NumberFormatType.Percent">
            <summary>
            Percent format
            </summary>
        </member>
        <member name="F:Cenium.Framework.Globalization.NumberFormatType.PercentDecimal">
            <summary>
            The percent with decimals format
            </summary>
        </member>
        <member name="F:Cenium.Framework.Globalization.NumberFormatType.ShortDecimal">
            <summary>
            Short decimal format (2 digits after decimal point)
            </summary>
        </member>
        <member name="F:Cenium.Framework.Globalization.NumberFormatType.LongDecimal">
            <summary>
            Long decimal format (5 digits after decimal point)
            </summary>
        </member>
        <member name="F:Cenium.Framework.Globalization.NumberFormatType.Integer">
            <summary>
            Integer format
            </summary>
        </member>
        <member name="F:Cenium.Framework.Globalization.NumberFormatType.Currency">
            <summary>
            Format as currency
            </summary>
        </member>
        <member name="T:Cenium.Framework.InitializeOnStartupAttribute">
             <summary>
            
             </summary>
        </member>
        <member name="T:Cenium.Framework.IO.FileType">
            <summary>
            Represents a file type with a name and an extension
            </summary>
        </member>
        <member name="F:Cenium.Framework.IO.FileType.FileTypeText">
            <summary>
            File type for text files
            </summary>
        </member>
        <member name="F:Cenium.Framework.IO.FileType.FileTypeCsv">
            <summary>
            File type for comma delimited files
            </summary>
        </member>
        <member name="F:Cenium.Framework.IO.FileType.FileTypeExcel">
            <summary>
            File type for Excel Workbook files
            </summary>
        </member>
        <member name="M:Cenium.Framework.IO.FileType.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cenium.Framework.IO.FileType"/> class.
            </summary>
            <param name="name">The display name of the file type.</param>
            <param name="extension">The extension associated with the file type.</param>
        </member>
        <member name="P:Cenium.Framework.IO.FileType.Name">
            <summary>
            Gets the name of the file type
            </summary>
        </member>
        <member name="P:Cenium.Framework.IO.FileType.Extension">
            <summary>
            Gets the extension associated with the file type
            </summary>
        </member>
        <member name="M:Cenium.Framework.IO.FileType.ToFileFilter">
            <summary>
            Converts the <c>FileType</c> instance to a file filter, using the format Label|*.Extension
            </summary>
            <returns>The FileType instance as a file filter.</returns>
        </member>
        <member name="M:Cenium.Framework.IO.FileType.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Cenium.Framework.IO.FileType.Equals(Cenium.Framework.IO.FileType)">
            <summary>
            Determines whether the specified FileType is equal to this instance.
            </summary>
            <param name="fileType">The FileType instance to compare with this instance.</param>
            <returns><c>true</c> if the specified FileType instance is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Cenium.Framework.IO.FileType.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Cenium.Framework.IO.FileType.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Cenium.Framework.IO.FileType.op_Equality(Cenium.Framework.IO.FileType,Cenium.Framework.IO.FileType)">
            <summary>
            Tests whether two FileType objects are identical
            </summary>
            <param name="ft1">The first FileType object to compare.</param>
            <param name="ft2">The second FileType object to compare.</param>
            <returns>True if the objects are identical; otherwise false</returns>
        </member>
        <member name="M:Cenium.Framework.IO.FileType.op_Inequality(Cenium.Framework.IO.FileType,Cenium.Framework.IO.FileType)">
            <summary>
            Tests whether two FileType objects are different
            </summary>
            <param name="ft1">The first FileType object to compare.</param>
            <param name="ft2">The second FileType object to compare.</param>
            <returns>True if the objects are different; otherwise false</returns>
        </member>
        <member name="M:Cenium.Framework.IO.FileType.Equals(Cenium.Framework.IO.FileType,Cenium.Framework.IO.FileType)">
            <summary>
            Checks if two FileType instances are identical
            </summary>
            <param name="ft1">The first FileType instance to compare</param>
            <param name="ft2">The second FileType instance to compare</param>
            <returns>True if the objects are identical; otherwise false</returns>
        </member>
        <member name="M:Cenium.Framework.IO.FileType.GetFileTypeForFile(System.String)">
            <summary>
            Gets the file type for a file based on its file name
            </summary>
            <param name="path">The file path</param>
            <returns>The <c>FileType</c> associated with the file name; or null if the file type is not found.</returns>
        </member>
        <member name="T:Cenium.Framework.IO.FileUtility">
            <summary>
            Contains helper methods for handling files
            </summary>
        </member>
        <member name="T:Cenium.Framework.IO.StreamUtility">
            <summary>
            Contains utility methods for handling IO streams.
            </summary>
        </member>
        <member name="M:Cenium.Framework.IO.StreamUtility.StreamToString(System.IO.Stream)">
            <summary>
            Reads the characters from the current position of the stream to the end and returns it as a string
            </summary>
            <param name="s">The stream to read from</param>
            <returns>The rest of the stream as a string, from the current position to the end. If the current position is at the end of the stream, returns an empty string</returns>
        </member>
        <member name="M:Cenium.Framework.IO.StreamUtility.StreamToStringAsync(System.IO.Stream)">
            <summary>
            Reads the characters from the current position of the stream to the end asynchronously and returns it as a string
            </summary>
            <param name="s">The stream to read from</param>
            <returns>A task that represents the asynchronous read operation. The value of the TResult parameter contains a string with the characters from the current position to the end of the stream.</returns>
        </member>
        <member name="M:Cenium.Framework.IO.StreamUtility.ToUTF8String(System.IO.MemoryStream)">
            <summary>
            Converts a <c>MemoryStream</c> into a UTF-8 encoded string
            </summary>
            <param name="ms">The memory stream instance to convert</param>
            <returns>A UTF-8 encoded string, or null if the stream does not have any content</returns>
        </member>
        <member name="T:Cenium.Framework.IO.IStorageFactory">
            <summary>
            Defines a mechanism for retriving IStorageHandler instances
            </summary>
        </member>
        <member name="M:Cenium.Framework.IO.IStorageFactory.CreateUserStorage">
            <summary>
            Creates an IStorageHandler instance for the user storage
            </summary>
            <returns>an IStorageHandler instance for the user storage</returns>
        </member>
        <member name="M:Cenium.Framework.IO.IStorageFactory.CreateFileStorage">
            <summary>
            Creates an IStorageHandler instance for the files system storage
            </summary>
            <returns>an IStorageHandler instance for the files system storage</returns>
        </member>
        <member name="T:Cenium.Framework.IO.IStorageHandler">
            <summary>
            Provides a mechanism to handle storage in a unified way
            </summary>
        </member>
        <member name="M:Cenium.Framework.IO.IStorageHandler.PathExists(System.String)">
            <summary>
            Checks if a path exists
            </summary>
            <param name="path">The path to check for</param>
            <returns>True if the path exists; otherwise false</returns>
        </member>
        <member name="M:Cenium.Framework.IO.IStorageHandler.FileExists(System.String)">
            <summary>
            Checks if a file exists
            </summary>
            <param name="path">The file to check for</param>
            <returns>True if the file exists; otherwise false</returns>
        </member>
        <member name="M:Cenium.Framework.IO.IStorageHandler.GetFullPath(System.String)">
            <summary>
            Returns the absolute path for the specified path string.
            </summary>
            <param name="path">The file or directory for which to obtain absolute path information. </param>
            <returns>The fully qualified location of path, such as "C:\MyFile.txt".</returns>
        </member>
        <member name="M:Cenium.Framework.IO.IStorageHandler.CombinePath(System.String[])">
            <summary>
            Combines an array of strings into a path.
            </summary>
            <param name="path">An array of parts of the path</param>
            <returns>The combined paths.</returns>
        </member>
        <member name="M:Cenium.Framework.IO.IStorageHandler.GetDirectoryName(System.String)">
            <summary>
            Returns the directory information for the specified path string.
            </summary>
            <param name="path">The path of a file or directory. </param>
            <returns>Directory information for path, or null if path denotes a root directory or is null. Returns String.Empty if path does not contain directory information.</returns>
        </member>
        <member name="M:Cenium.Framework.IO.IStorageHandler.GetFileName(System.String)">
            <summary>
            Returns the file name and extension of the specified path string.
            </summary>
            <param name="path">The path string from which to obtain the file name and extension</param>
            <returns>The characters after the last directory character in path. If the last character of path is a directory or volume separator character, this method returns String.Empty. If path is null, this method returns null.</returns>
        </member>
        <member name="M:Cenium.Framework.IO.IStorageHandler.EnumerateFiles(System.String,System.String,System.Boolean)">
            <summary>
            Returns an enumerable collection of file names that match a search pattern in a specified path, and optionally searches subdirectories.
            </summary>
            <param name="path">The directory to search. </param>
            <param name="searchPattern">The search string to match against the names of files in path. </param>
            <param name="allDirectories">false to specify that the search operation should include only the current directory; true to include all subdirectories.</param>
            <returns>An enumerable collection of the full names (including paths) for the files in the directory specified by path and that match the specified search pattern and option.</returns>
        </member>
        <member name="M:Cenium.Framework.IO.IStorageHandler.DeleteFile(System.String)">
            <summary>
            Deletes the specified file.
            </summary>
            <param name="path">The name of the file to be deleted. Wildcard characters are not supported.</param>
        </member>
        <member name="M:Cenium.Framework.IO.IStorageHandler.CreateDirectory(System.String)">
            <summary>
            Creates all directories and subdirectories in the specified path.
            </summary>
            <param name="path">The directory path to create. </param>
        </member>
        <member name="M:Cenium.Framework.IO.IStorageHandler.CreateFile(System.String)">
            <summary>
            Creates or overwrites a file in the specified path.
            </summary>
            <param name="path">The path and name of the file to create. </param>
            <returns>A Stream that provides read/write access to the file specified in path.</returns>
        </member>
        <member name="M:Cenium.Framework.IO.IStorageHandler.OpenFileRead(System.String)">
            <summary>
            Opens a Stream on the specified path with read access.
            </summary>
            <param name="path">The file to open. </param>
            <returns>A Stream that provides read access to the file specified in path.</returns>
        </member>
        <member name="M:Cenium.Framework.IO.IStorageHandler.Copy(System.String,System.String)">
            <summary>
            Copies an existing file to a new file. Overwriting a file of the same name is not allowed.
            </summary>
            <param name="sourceFile">The file to copy. </param>
            <param name="destFile">The name of the destination file. This cannot be a directory or an existing file. </param>
        </member>
        <member name="P:Cenium.Framework.IO.IStorageHandler.PersonalFolderPath">
            <summary>
            Gets the path to the personal folder
            </summary>
        </member>
        <member name="T:Cenium.Framework.IO.IsolatedStorage.IsolatedStorageHelper">
            <summary>
            This class contains static methods used to load and save objects to IsolatedStorage. Both DataContractSerializer and XmlSerializer are supported.
            </summary>
        </member>
        <member name="M:Cenium.Framework.IO.IsolatedStorage.IsolatedStorageHelper.GetFileNames(System.String,System.String)">
            <summary>
            Returns all file names in a specified folder that matches the specified pattern
            </summary>
            <param name="path">The path to search for files in</param>
            <param name="pattern">The pattern the files must match</param>
            <returns>An array of file names</returns>
        </member>
        <member name="M:Cenium.Framework.IO.IsolatedStorage.IsolatedStorageHelper.SaveAsXml``1(System.String,``0)">
            <summary>
            Saves an object in the given path. This method uses the XmlSerializer to save the object
            </summary>
            <typeparam name="T">The type to save</typeparam>
            <param name="path">The full file name</param>
            <param name="value">The instance to save</param>
        </member>
        <member name="M:Cenium.Framework.IO.IsolatedStorage.IsolatedStorageHelper.LoadFromXml``1(System.String)">
            <summary>
            Loads a specified file and deserializes the file content to a specified object instance using the XmlSerializer
            </summary>
            <typeparam name="T">The type to load</typeparam>
            <param name="path">The file path</param>
            <returns>An instance of type <c>T</c></returns>
        </member>
        <member name="M:Cenium.Framework.IO.IsolatedStorage.IsolatedStorageHelper.SaveAsDataContract``1(System.String,``0)">
            <summary>
            Saves an object in the given path. This method uses the DataContractSerializer to save the object
            </summary>
            <typeparam name="T">The type to save</typeparam>
            <param name="path">The full file name</param>
            <param name="value">The instance to save</param>
        </member>
        <member name="M:Cenium.Framework.IO.IsolatedStorage.IsolatedStorageHelper.LoadFromDataContract``1(System.String)">
            <summary>
            Loads a specified file and deserializes the file content to a specified object instance using the DataContractSerializer
            </summary>
            <typeparam name="T">The type to load</typeparam>
            <param name="path">The file path</param>
            <returns>An instance of type <c>T</c></returns>
        </member>
        <member name="M:Cenium.Framework.IO.IsolatedStorage.IsolatedStorageHelper.Delete(System.String)">
            <summary>
            Deletes a specified file
            </summary>
            <param name="path">The path to the file to delete</param>
        </member>
        <member name="T:Cenium.Framework.IO.IsolatedStorage.NamespaceDoc">
            <summary>
            The Cenium.Framework.IO.IsolatedStorage namespace contains types that allow the creation and use of isolated stores.
            </summary>
        </member>
        <member name="T:Cenium.Framework.IO.StorageManager">
            <summary>
            Static class for accessing storages (file storage, user storage)
            </summary>
        </member>
        <member name="P:Cenium.Framework.IO.StorageManager.FileStorage">
            <summary>
            Gets an IStorageHandler instance that can access the file storage
            </summary>
        </member>
        <member name="P:Cenium.Framework.IO.StorageManager.UserStorage">
            <summary>
            Gets an IStorageHandler instance that can access the user storage
            </summary>
        </member>
        <member name="M:Cenium.Framework.IO.StorageManager.Register(Cenium.Framework.IO.IStorageFactory)">
            <summary>
            Register the IStorageProvider instance to use
            </summary>
            <param name="factory">The IStorageFactory instance to use</param>
        </member>
        <member name="T:Cenium.Framework.IO.UTF8StringWriter">
            <summary>
            Implements a TextWriter for writing information to a string using UTF8 encoding. The information is stored in an underlying StringBuilder.
            </summary>
        </member>
        <member name="M:Cenium.Framework.IO.UTF8StringWriter.#ctor">
            <summary>
            Initializes a new instance of the UTF8StringWriter class
            </summary>
        </member>
        <member name="M:Cenium.Framework.IO.UTF8StringWriter.#ctor(System.Text.StringBuilder)">
            <summary>
            Initializes a new instance of the UTF8StringWriter class that writes to the specified StringBuilder.
            </summary>
            <param name="sb">The StringBuilder to write to</param>
        </member>
        <member name="P:Cenium.Framework.IO.UTF8StringWriter.Encoding">
            <summary>
            Gets the <see cref="T:System.Text.Encoding" /> in which the output is written. This property always return a UTF8 encoding instance.
            </summary>
            <returns>The Encoding in which the output is written.</returns>
        </member>
        <member name="T:Cenium.Framework.Jobs.ScheduleRepeatUnit">
            <summary>
            Defines the unit for a schedule repeat interval
            </summary>
        </member>
        <member name="F:Cenium.Framework.Jobs.ScheduleRepeatUnit.Minute">
            <summary>
            The repeat interval is expressed in minutes
            </summary>
        </member>
        <member name="F:Cenium.Framework.Jobs.ScheduleRepeatUnit.Hour">
            <summary>
            The repeat interval is expressed in hours
            </summary>
        </member>
        <member name="F:Cenium.Framework.Jobs.ScheduleRepeatUnit.Day">
            <summary>
            The repeat interval is expressed in days
            </summary>
        </member>
        <member name="T:Cenium.Framework.Jobs.ScheduleSetting">
            <summary>
            Base class for all schedule settings
            </summary>
        </member>
        <member name="M:Cenium.Framework.Jobs.ScheduleSetting.GetNextScheduleDate(System.DateTime)">
            <summary>
            Calculates the next schedule DateTime based on the last executed schedule DateTime
            </summary>
            <param name="current">The last executed schedule DateTime</param>
            <returns>The next schedule DateTime based on the last executed DateTime, or null if the date cannot be calculated.</returns>
        </member>
        <member name="T:Cenium.Framework.Jobs.ScheduleSettingDaily">
            <summary>
            Represents a schedule that is executed daily
            </summary>
            <seealso cref="T:Cenium.Framework.Jobs.ScheduleSetting" />
        </member>
        <member name="T:Cenium.Framework.Jobs.ScheduleUtility">
            <summary>
            Contains helper methods and extensions for handling schedules
            </summary>
        </member>
        <member name="M:Cenium.Framework.Jobs.ScheduleUtility.SetDayFlag(System.DayOfWeekFlags,System.DayOfWeekFlags)">
            <summary>
            Sets one or more bit flags in the ScheduleDay enumeration.
            </summary>
            <param name="day">The current value.</param>
            <param name="value">The bit flags to set.</param>
            <returns>A new ScheduleDay value with the specified bits set</returns>
        </member>
        <member name="M:Cenium.Framework.Jobs.ScheduleUtility.UnsetDayFlag(System.DayOfWeekFlags,System.DayOfWeekFlags)">
            <summary>
            Unsets one or more bit flags in the ScheduleDay enumeration.
            </summary>
            <param name="day">The current value.</param>
            <param name="value">The bit flags to unset.</param>
            <returns>A new ScheduleDay value with the specified bits cleared.</returns>
        </member>
        <member name="T:Cenium.Framework.Jobs.TimeBasedScheduleSetting">
            <summary>
            Base class for schedule settings based on a time
            </summary>
            <seealso cref="T:Cenium.Framework.Jobs.ScheduleSetting" />
        </member>
        <member name="T:Cenium.Framework.Json.JsonStreamHelper">
            <summary>
            Internal helper class for writing json to a text writer
            </summary>
        </member>
        <member name="T:Cenium.Framework.Json.JsonStreamWriter">
            <summary>
            Implements a TextWriter for writing json to a stream in a particular encoding.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Json.JsonStreamWriter.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the JsonStreamWriter class for the specified stream by using UTF-8 encoding and the default buffer size.
            </summary>
            <param name="stream">The stream to write to.</param>
        </member>
        <member name="M:Cenium.Framework.Json.JsonStreamWriter.StartObject(System.Boolean)">
            <summary>
            Notifies the writer that a new object is about to be written.
            </summary>
            <param name="isMemberValue">Indicates if the value is a member value or not</param>
        </member>
        <member name="M:Cenium.Framework.Json.JsonStreamWriter.EndObject">
            <summary>
            Notifies the writer that an object has been completed
            </summary>
        </member>
        <member name="M:Cenium.Framework.Json.JsonStreamWriter.StartArray(System.Boolean)">
            <summary>
            Notifies the textwriter that a new array is about to be written.
            </summary>
            <param name="isMemberValue">Indicates if the value is a member value or not</param>
        </member>
        <member name="M:Cenium.Framework.Json.JsonStreamWriter.EndArray">
            <summary>
            Notifies the writer that an array has been completed
            </summary>
        </member>
        <member name="M:Cenium.Framework.Json.JsonStreamWriter.WriteArrayValue(System.Object)">
            <summary>
            Appends a primitive value to an array
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Cenium.Framework.Json.JsonStreamWriter.WriteStringMember(System.String,System.String)">
            <summary>
            Writes an object member where the value is a string
            </summary>
            <param name="memberName">Name of the member.</param>
            <param name="value">The string value associated with the member.</param>
        </member>
        <member name="M:Cenium.Framework.Json.JsonStreamWriter.WriteBoolMember(System.String,System.Boolean)">
            <summary>
            Writes an object member where the value is a bool
            </summary>
            <param name="memberName">Name of the member.</param>
            <param name="value">The bool value associated with the member.</param>
        </member>
        <member name="M:Cenium.Framework.Json.JsonStreamWriter.WriteGuidMember(System.String,System.Guid)">
            <summary>
            Writes an object member where the value is a Guid
            </summary>
            <param name="memberName">Name of the member.</param>
            <param name="value">The Guid value associated with the member.</param>
        </member>
        <member name="M:Cenium.Framework.Json.JsonStreamWriter.WriteBinaryMember(System.String,System.Byte[])">
            <summary>
            Writes an object member where the value is a binary array
            </summary>
            <param name="memberName">Name of the member.</param>
            <param name="value">The binary value associated with the member.</param>
        </member>
        <member name="M:Cenium.Framework.Json.JsonStreamWriter.WriteMember(System.String,System.Object)">
            <summary>
            Writes an object member where the value is an object
            </summary>
            <param name="memberName">Name of the member.</param>
            <param name="value">The value associated with the member.</param>
        </member>
        <member name="M:Cenium.Framework.Json.JsonStreamWriter.StartObjectMember(System.String)">
            <summary>
            Writes a member without writing the value. This method is typically used when the value is an object or an array
            </summary>
            <param name="name">The name of the member</param>
        </member>
        <member name="T:Cenium.Framework.Json.JsonUtility">
            <summary>
            Utility class for handling parsing and creation of json
            </summary>
        </member>
        <member name="M:Cenium.Framework.Json.JsonUtility.Parse(System.String)">
            <summary>
            Parses the specified json.
            </summary>
            <param name="json">The json string to parse</param>
            <returns>an object representing the parsed value</returns>
        </member>
        <member name="M:Cenium.Framework.Json.JsonUtility.ConvertToDateTime(System.String)">
            <summary>
            Converts a json value into a DateTime
            </summary>
            <param name="value">The json value to convert</param>
            <returns>A DateTime instance</returns>
        </member>
        <member name="M:Cenium.Framework.Json.JsonUtility.ConvertToDate(System.String)">
            <summary>
            Converts a json value into a DateTime using only the Date portion
            </summary>
            <param name="value">The json value to convert</param>
            <returns>A DateTime instance</returns>
        </member>
        <member name="M:Cenium.Framework.Json.JsonUtility.ConvertFromDateTime(System.DateTime)">
            <summary>
            Converts a DateTime instance into a json value
            </summary>
            <param name="value">The DateTime to convert</param>
            <returns>a json encoded value representing the DateTime instance</returns>
        </member>
        <member name="M:Cenium.Framework.Json.JsonUtility.ConvertFromTimeSpan(System.TimeSpan)">
            <summary>
            Converts a TimeSpan instance into a json value
            </summary>
            <param name="value">The TimeSpan to convert</param>
            <returns>a json encoded value representing the TimeSpan instance</returns>
        </member>
        <member name="M:Cenium.Framework.Json.JsonUtility.ConvertToTimeSpan(System.String)">
            <summary>
            Converts a json value into a TimeSpan
            </summary>
            <param name="value">The json value to convert</param>
            <returns>A TimeSpan instance</returns>
        </member>
        <member name="T:Cenium.Framework.Json.JsonParser">
            <summary>
            This class encodes and decodes JSON strings.
            Spec. details, see http://www.json.org/
            </summary>
        </member>
        <member name="T:Cenium.Framework.Language.LanguageConstant">
            <summary>
            Represents a translateable static text
            </summary>
        </member>
        <member name="T:Cenium.Framework.Language.LanguageDictionaryReader">
            <summary>
            Represents a reader that can read a client language dictionary
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="T:Cenium.Framework.Language.LanguagePackWriter">
             <summary>
            
             </summary>
        </member>
        <member name="T:Cenium.Framework.Language.LanguageTextOptions">
            <summary>
            Defines available options for language constants
            </summary>
        </member>
        <member name="F:Cenium.Framework.Language.LanguageTextOptions.None">
            <summary>
            No options have been set
            </summary>
        </member>
        <member name="F:Cenium.Framework.Language.LanguageTextOptions.AlwaysAvailable">
            <summary>
            The constant is always available. Use when the constant needs to be available before user login
            </summary>
        </member>
        <member name="T:Cenium.Framework.Language.LanguageScanAttribute">
            <summary>
            Marks a class to be scanned for language items
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:Cenium.Framework.Language.LanguageScanAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cenium.Framework.Language.LanguageScanAttribute"/> class.
            </summary>
            <param name="name">The name associated with the class</param>
        </member>
        <member name="P:Cenium.Framework.Language.LanguageScanAttribute.ApplicationId">
            <summary>
            Gets or sets the application identifier the content is valid for.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Language.LanguageScanAttribute.Name">
            <summary>
            Gets the name of the scan group
            </summary>
        </member>
        <member name="T:Cenium.Framework.Language.LanguageTextCollection">
            <summary>
            Represents a collection of texts for a specific language
            </summary>
        </member>
        <member name="T:Cenium.Framework.Language.LanguageText">
            <summary>
            Represents a translateable text
            </summary>
        </member>
        <member name="M:Cenium.Framework.Language.LanguageText.#ctor(System.String,System.String,Cenium.Framework.Language.LanguageTextOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Cenium.Framework.Language.LanguageText"/> class.
            </summary>
            <param name="identity">The identity associated with the text</param>
            <param name="text">The translateable text</param>
            <param name="type">The text type</param>
        </member>
        <member name="P:Cenium.Framework.Language.LanguageText.Identity">
            <summary>
            Gets the identity associated with the text
            </summary>
        </member>
        <member name="P:Cenium.Framework.Language.LanguageText.Text">
            <summary>
            Gets the base value of the text (not translated)
            </summary>
        </member>
        <member name="M:Cenium.Framework.Language.LanguageText.OnSetIdentity(System.String)">
            <summary>
            Called when the Identity property is being set. Override this method to do any special processing on the Identity before its value is set.
            </summary>
            <param name="identity">The identity to set</param>
            <returns>A valid identifier</returns>
        </member>
        <member name="T:Cenium.Framework.Language.ILanguageHandler">
            <summary>
            Defines a mechanism to handle language methods
            </summary>
        </member>
        <member name="M:Cenium.Framework.Language.ILanguageHandler.ToTitleCase(System.String)">
            <summary>
            Converts the specified string to title case (except for words that are entirely in uppercase, which are considered to be acronyms).
            </summary>
            <param name="value">The string to convert to title case. </param>
            <returns>The specified string converted to title case.</returns>
        </member>
        <member name="T:Cenium.Framework.Language.LanguageTextType">
            <summary>
            Specifies valid types for language texts
            </summary>
        </member>
        <member name="T:Cenium.Framework.Language.LanguageUtility">
            <summary>
            Contains language and translation helper method
            </summary>
        </member>
        <member name="M:Cenium.Framework.Language.LanguageUtility.IsTermIdentifier(System.String)">
            <summary>
            Determines if a string value is a term identifier
            </summary>
            <param name="value">The value to determine</param>
            <returns>true if the string value is a term identifier; otherwise false</returns>
        </member>
        <member name="M:Cenium.Framework.Language.LanguageUtility.IsEntityIdentifier(System.String)">
            <summary>
            Determines if a string value is an entity identifier
            </summary>
            <param name="value">The value to determine</param>
            <returns>true if the string value is a entity identifier; otherwise false</returns>
        </member>
        <member name="M:Cenium.Framework.Language.LanguageUtility.IsConstantIdentifier(System.String)">
            <summary>
            Determines if a string value is a constant identifier
            </summary>
            <param name="value">The value to determine</param>
            <returns>true if the string value is a constant identifier; otherwise false</returns>
        </member>
        <member name="M:Cenium.Framework.Language.LanguageUtility.GetPropertyIdentity(System.String,System.String)">
            <summary>
            Gets the translation identity for an entity property
            </summary>
            <param name="entityName">Name of the entity.</param>
            <param name="propertyName">Name of the property.</param>
            <returns>The translation identity for the property</returns>
        </member>
        <member name="M:Cenium.Framework.Language.LanguageUtility.GetPropertyLanguageIdentifier(System.String,System.String)">
            <summary>
            Gets the translation identity for an entity property, with the language identifier
            </summary>
            <param name="entityName">Name of the entity.</param>
            <param name="propertyName">Name of the property.</param>
            <returns>The translation identity for the property</returns>
        </member>
        <member name="M:Cenium.Framework.Language.LanguageUtility.ToTitleCase(System.String)">
            <summary>
            Converts the specified string to title case (except for words that are entirely in uppercase, which are considered to be acronyms).
            </summary>
            <param name="value">The string to convert to title case. </param>
            <returns>The specified string converted to title case.</returns>
        </member>
        <member name="T:Cenium.Framework.Language.TranslatableException">
            <summary>
            Represents a translatable error that occurs during application execution.
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:Cenium.Framework.Language.TranslatableException.#ctor(Cenium.Framework.Language.LanguageConstant,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Cenium.Framework.Language.TranslatableException"/> class.
            </summary>
            <param name="message">The language constant that contains the error message.</param>
            <param name="args">An object array that contains zero or more objects to format</param>
        </member>
        <member name="M:Cenium.Framework.Language.TranslatableException.#ctor(Cenium.Framework.Language.LanguageConstant,System.Object[],System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Cenium.Framework.Language.TranslatableException"/> class.
            </summary>
            <param name="message">The language constant that contains the error message.</param>
            <param name="args">An object array that contains zero or more objects to format</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified. </param>
        </member>
        <member name="P:Cenium.Framework.Language.TranslatableException.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
        </member>
        <member name="T:Cenium.Framework.IApplication">
            <summary>
            Defines a mechanism to get information about the currently running application and dynamically load plugins
            </summary>
        </member>
        <member name="M:Cenium.Framework.IApplication.AddPlugin(System.String)">
            <summary>
            Adds a plugin to the current application.
            </summary>
            <remarks>
            Note that plugins are not loaded until the Initialize method is called.
            </remarks>
            <param name="path">The path to the plugin</param>
        </member>
        <member name="M:Cenium.Framework.IApplication.LoadAssemblies(System.String)">
            <summary>
            Loads all assemblies in the current path
            </summary>
        </member>
        <member name="M:Cenium.Framework.IApplication.Initialize">
            <summary>
            Initializes the application and loads any plugins
            </summary>
        </member>
        <member name="P:Cenium.Framework.IApplication.Assemblies">
            <summary>
            Gets an IEnumerable of all assemblies (including plugins) that have been loaded by the application
            </summary>
        </member>
        <member name="P:Cenium.Framework.IApplication.Signature">
            <summary>
            Gets an application version key for the currently running application
            </summary>
        </member>
        <member name="T:Cenium.Framework.IApplicationFactory">
            <summary>
            Provides a mechanism to get IApplication instances in a portable manner
            </summary>
        </member>
        <member name="M:Cenium.Framework.IApplicationFactory.GetApplication">
            <summary>
            Gets the IApplication instance
            </summary>
            <returns>The current IApplication instance</returns>
        </member>
        <member name="M:Cenium.Framework.IApplicationFactory.CreateApplicationSignature(System.Byte[])">
            <summary>
            Creates an application key from a signature as bytes
            </summary>
            <param name="signature">The application signature as bytes</param>
            <returns>An <c>IApplicationVersionKey</c> instance</returns>
        </member>
        <member name="T:Cenium.Framework.IApplicationSignature">
            <summary>
            Represents a unique signature for an application.
            </summary>
            <remarks>
            The signature is derived from the assemblies that the application has loaded. The signature only changes if one or more assemblies changes
            </remarks>
        </member>
        <member name="P:Cenium.Framework.IApplicationSignature.Signature">
            <summary>
            Gets the signature as a byte array
            </summary>
        </member>
        <member name="T:Cenium.Framework.License.ProductLicenseAttribute">
            <summary>
            Defines a license for a product. Use this attribute to indicate license for an external product being used
            </summary>
        </member>
        <member name="M:Cenium.Framework.License.ProductLicenseAttribute.#ctor(System.String,System.String,System.String,Cenium.Framework.License.LicenseType,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cenium.Framework.License.ProductLicenseAttribute"/> class.
            </summary>
            <param name="product">The product being licensed</param>
            <param name="company">The owner of the product</param>
            <param name="version">The version of the product being licensed</param>
            <param name="licenseType">License type</param>
            <param name="url">The URL to the product</param>
        </member>
        <member name="P:Cenium.Framework.License.ProductLicenseAttribute.Product">
            <summary>
            Gets the name of the product being licensed
            </summary>
        </member>
        <member name="P:Cenium.Framework.License.ProductLicenseAttribute.Company">
            <summary>
            Gets the company owner of the product
            </summary>
        </member>
        <member name="P:Cenium.Framework.License.ProductLicenseAttribute.Version">
            <summary>
            Gets the version of the product being licensed
            </summary>
        </member>
        <member name="P:Cenium.Framework.License.ProductLicenseAttribute.LicenseType">
            <summary>
            Gets the license type for the product being licensed
            </summary>
        </member>
        <member name="P:Cenium.Framework.License.ProductLicenseAttribute.Url">
            <summary>
            Gets the URL to the product home page
            </summary>
        </member>
        <member name="P:Cenium.Framework.License.ProductLicenseAttribute.Copyright">
            <summary>
            Gets or sets the copyright for the product
            </summary>
        </member>
        <member name="T:Cenium.Framework.License.LicenseType">
            <summary>
            Defines license types that may be used in the product
            </summary>
        </member>
        <member name="F:Cenium.Framework.License.LicenseType.Apache_2_0">
            <summary>
            Apache 2.0
            </summary>
        </member>
        <member name="F:Cenium.Framework.License.LicenseType.MsPl">
            <summary>
            Microsoft Public License
            </summary>
        </member>
        <member name="F:Cenium.Framework.License.LicenseType.MIT">
            <summary>
            MIT license
            </summary>
        </member>
        <member name="F:Cenium.Framework.License.LicenseType.SilOFL_1_1">
            <summary>
            The SIL Open Font License v1.1
            </summary>
        </member>
        <member name="F:Cenium.Framework.License.LicenseType.BSD_3_Clause">
            <summary>
            The BSD-3-Clause license
            </summary>
        </member>
        <member name="T:Cenium.Framework.License.ProductLicenseManager">
            <summary>
            Contains methods for getting the license information for  products being used.
            </summary>
        </member>
        <member name="M:Cenium.Framework.License.ProductLicenseManager.GetProductLicenses">
            <summary>
            Gets an IEnumerable of all registered product licenses
            </summary>
            <returns>an IEnumerable of all registered product licenses</returns>
        </member>
        <member name="M:Cenium.Framework.License.ProductLicenseManager.GetLicenseText(Cenium.Framework.License.LicenseType)">
            <summary>
            Gets the license text for a specified license type
            </summary>
            <param name="type">The license type to get the text for</param>
            <returns>The license text associated with the license type.</returns>
        </member>
        <member name="T:Cenium.Framework.Linq.DynamicLinqManager">
            <summary>
            Provides methods to register and access a dynamic LINQ provider
            </summary>
        </member>
        <member name="P:Cenium.Framework.Linq.DynamicLinqManager.Provider">
            <summary>
            Gets the currently registered IDynamicLinqProvider instance
            </summary>
        </member>
        <member name="M:Cenium.Framework.Linq.DynamicLinqManager.Register(Cenium.Framework.Linq.IDynamicLinqProvider)">
            <summary>
            Registers a IDynamicLinqProvider instance
            </summary>
            <param name="provider">The IDynamicLinqProvider instance to register</param>
        </member>
        <member name="T:Cenium.Framework.Linq.IDynamicLinqProvider">
            <summary>
            Defines a mechanism to perform dynamic LINQ queries
            </summary>
        </member>
        <member name="M:Cenium.Framework.Linq.IDynamicLinqProvider.Where``1(System.Linq.IQueryable{``0},System.String,System.Object[])">
            <summary>
            Filters a sequence of values based on a predicate
            </summary>
            <typeparam name="T">The type of the elements of source</typeparam>
            <param name="source">An IQueryable&lt;T&gt; to filter</param>
            <param name="predicate">A function to test each element for a condition, expressed as a string</param>
            <param name="values">Values to use in the predicate</param>
            <returns>An IQueryable&lt;T&gt; that contains elements from the input sequence that satisfy the condition.</returns>
        </member>
        <member name="M:Cenium.Framework.Linq.IDynamicLinqProvider.Where(System.Linq.IQueryable,System.String,System.Object[])">
            <summary>
            Filters a sequence of values based on a predicate
            </summary>
            <param name="source">An IQueryable to filter</param>
            <param name="predicate">A function to test each element for a condition, expressed as a string</param>
            <param name="values">Values to use in the predicate</param>
            <returns>An IQueryable that contains elements from the input sequence that satisfy the condition.</returns>
        </member>
        <member name="M:Cenium.Framework.Linq.IDynamicLinqProvider.Select(System.Linq.IQueryable,System.String,System.Object[])">
            <summary>
            Projects each element of a sequence into a new form
            </summary>
            <param name="source">A sequence of values to invoke a transform function on</param>
            <param name="selector">A transform function to apply to each element</param>
            <param name="values">Values to use in the selector</param>
            <returns>An IQueryable  whose elements are the result of invoking the transform function on each element of source</returns>
        </member>
        <member name="M:Cenium.Framework.Linq.IDynamicLinqProvider.OrderBy``1(System.Linq.IQueryable{``0},System.String,System.Object[])">
            <summary>
            Sorts the elements of a sequence in ascending order
            </summary>
            <typeparam name="T">The type of the elements of source</typeparam>
            <param name="source">A sequence of values to order.</param>
            <param name="ordering">The ordering expression as a string</param>
            <param name="values">The values to use in ordering</param>
            <returns>A IQueryable&lt;T&gt; whose elements are sorted according to a key</returns>
        </member>
        <member name="M:Cenium.Framework.Linq.IDynamicLinqProvider.OrderBy(System.Linq.IQueryable,System.String,System.Object[])">
            <summary>
            Sorts the elements of a sequence in ascending order
            </summary>
            <param name="source">A sequence of values to order.</param>
            <param name="ordering">The ordering expression as a string</param>
            <param name="values">The values to use in ordering</param>
            <returns>A IQueryable whose elements are sorted according to a key</returns>
        </member>
        <member name="M:Cenium.Framework.Linq.IDynamicLinqProvider.Take(System.Linq.IQueryable,System.Int32)">
            <summary>
            Returns a specified number of contiguous elements from the start of a sequence
            </summary>
            <param name="source">The sequence to return elements from</param>
            <param name="count">The number of elements to return</param>
            <returns>An IQueryable that contains the specified number of elements from the start of the input sequence.</returns>
        </member>
        <member name="M:Cenium.Framework.Linq.IDynamicLinqProvider.Skip(System.Linq.IQueryable,System.Int32)">
            <summary>
            Bypasses a specified number of elements in a sequence and then returns the remaining elements
            </summary>
            <param name="source">The IQueryable to return elements from</param>
            <param name="count">The number of elements to skip before returning the remaining elements</param>
            <returns>An IQueryable that contains the elements that occur after the specified index in the input sequence</returns>
        </member>
        <member name="M:Cenium.Framework.Linq.IDynamicLinqProvider.GroupBy(System.Linq.IQueryable,System.String,System.String,System.Object[])">
            <summary>
            Groups the elements of a sequence
            </summary>
            <param name="source">An IQueryable whose elements to group</param>
            <param name="keySelector">A function to extract the key for each element, expressed as a string</param>
            <param name="elementSelector">A function to map each source element to an element</param>
            <param name="values">The values to use in grouping</param>
            <returns>A collection of elements of type IQueryable where each element represents a projection over a group and its key</returns>
        </member>
        <member name="M:Cenium.Framework.Linq.IDynamicLinqProvider.Any(System.Linq.IQueryable)">
            <summary>
            Determines whether a sequence contains any elements.
            </summary>
            <param name="source">The IQueryable to check for emptiness.</param>
            <returns>true if the source sequence contains any elements; otherwise, false</returns>
        </member>
        <member name="M:Cenium.Framework.Linq.IDynamicLinqProvider.Count(System.Linq.IQueryable)">
            <summary>
            Returns the number of elements in a sequence
            </summary>
            <param name="source">A sequence that contains elements to be counted</param>
            <returns>The number of elements in the input sequence</returns>
        </member>
        <member name="M:Cenium.Framework.Linq.IDynamicLinqProvider.LongCount(System.Linq.IQueryable)">
            <summary>
            Returns the number of elements in a sequence
            </summary>
            <param name="source">A sequence that contains elements to be counted</param>
            <returns>The number of elements in the input sequence</returns>
        </member>
        <member name="T:Cenium.Framework.Logging.AppLogProvider">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="M:Cenium.Framework.Logging.AppLogProvider.#ctor">
            <summary>
            Initializes a new instance of the AppLogProvider class
            </summary>
        </member>
        <member name="T:Cenium.Framework.Logging.IEventLogProvider">
            <summary>
            Defines the contract for an event log provider
            </summary>
        </member>
        <member name="M:Cenium.Framework.Logging.IEventLogProvider.Message(System.String,System.Object[])">
            <summary>
            Outputs a message to the event log
            </summary>
            <param name="message">The message as a string. This may be a composite format string.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:Cenium.Framework.Logging.IEventLogProvider.Warning(System.String,System.Object[])">
            <summary>
            Outputs a warning message to the event log
            </summary>
            <param name="message">The message as a string. This may be a composite format string.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:Cenium.Framework.Logging.IEventLogProvider.Error(System.String,System.Object[])">
            <summary>
            Outputs an error message to the event log
            </summary>
            <param name="message">The message as a string. This may be a composite format string.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="T:Cenium.Framework.Logging.ITraceProvider">
            <summary>
            Defines the contract for a trace provider
            </summary>
        </member>
        <member name="M:Cenium.Framework.Logging.ITraceProvider.MethodEnter(System.Object[])">
            <summary>
            Outputs when a method is entered to the trace log
            </summary>
            <param name="args">The entered methods arguments</param>
        </member>
        <member name="M:Cenium.Framework.Logging.ITraceProvider.MethodExit(System.Object)">
            <summary>
            Outputs when a method is exited to the trace log
            </summary>
            <param name="returnValue">The return value for the method</param>
        </member>
        <member name="M:Cenium.Framework.Logging.ITraceProvider.Message(System.String,System.Object[])">
            <summary>
            Outputs a message to the trace log
            </summary>
            <param name="message">A composite format string</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:Cenium.Framework.Logging.ITraceProvider.Exception(System.Exception)">
            <summary>
            Outputs an exception to the trace log
            </summary>
            <param name="ex">The exception to trace</param>
        </member>
        <member name="M:Cenium.Framework.Logging.ITraceProvider.Assert(System.String,System.String,System.Object[])">
            <summary>
            Outputs a assertation to the trace log
            </summary>
            <param name="condition">The assertation condition being evaluated</param>
            <param name="message">A composite format string</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:Cenium.Framework.Logging.ITraceProvider.Sql(System.String,System.String)">
            <summary>
            Outputs a SQL statement to the trace log
            </summary>
            <param name="method">The method type being executed.</param>
            <param name="statement">The SQL statement being sent to the server.</param>
        </member>
        <member name="T:Cenium.Framework.Logging.LogEntry">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="M:Cenium.Framework.Logging.LogEntry.#ctor">
            <summary>
            Initializes a new instance of the AppLogEntry class
            </summary>
        </member>
        <member name="T:Cenium.Framework.Logging.ILogProviderFactory">
            <summary>
            Defines a factory for creating an ILogProvider instance
            </summary>
            <remarks>
            Log factories are automatically discovered and instantiated at runtime. Log provider factories must have a parameter-less constructor and a unique identifier
            </remarks>
        </member>
        <member name="P:Cenium.Framework.Logging.ILogProviderFactory.Id">
            <summary>
            Gets the identifier for the log factory. This should be a unique value per provider.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Logging.ILogProviderFactory.DisplayName">
            <summary>
            Gets a display-friendly name for the factory
            </summary>
        </member>
        <member name="M:Cenium.Framework.Logging.ILogProviderFactory.CreateProvider">
            <summary>
            Creates a log provider that is ready for use
            </summary>
            <returns>An ILogProvider instance</returns>
        </member>
        <member name="T:Cenium.Framework.Logging.ILogProvider">
            <summary>
            ILogProvider is an interface for custom log providers.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Logging.ILogProvider.Id">
            <summary>
            Gets the identifier for the log provider
            </summary>
        </member>
        <member name="M:Cenium.Framework.Logging.ILogProvider.Log(Cenium.Framework.Logging.ILogEntry)">
            <summary>
            Writes a log message to the event log
            </summary>
            <param name="entry">An ILogEntry instance, containing the log data</param>
        </member>
        <member name="M:Cenium.Framework.Logging.ILogProvider.Trace(Cenium.Framework.Logging.ILogEntry)">
            <summary>
            Writes a trace message to the trace log
            </summary>
            <param name="entry">An ILogEntry instance, containing the trace data</param>
        </member>
        <member name="T:Cenium.Framework.Logging.ILogEntry">
            <summary>
            Defines an entry in the log
            </summary>
        </member>
        <member name="P:Cenium.Framework.Logging.ILogEntry.EntryType">
            <summary>
            Gets the log type
            </summary>
        </member>
        <member name="P:Cenium.Framework.Logging.ILogEntry.ClassName">
            <summary>
            Gets the name of the class where the log entry was created
            </summary>
        </member>
        <member name="P:Cenium.Framework.Logging.ILogEntry.MethodName">
            <summary>
            Gets the name of the method where the log entry was created
            </summary>
        </member>
        <member name="P:Cenium.Framework.Logging.ILogEntry.Parameters">
            <summary>
            Gets the parameters sent to the log entry
            </summary>
        </member>
        <member name="P:Cenium.Framework.Logging.ILogEntry.ReturnValue">
            <summary>
            Gets the return values for the log entry
            </summary>
        </member>
        <member name="P:Cenium.Framework.Logging.ILogEntry.AssemblyName">
            <summary>
            Gets the assembly name where the log entry was created
            </summary>
        </member>
        <member name="P:Cenium.Framework.Logging.ILogEntry.Message">
            <summary>
            Gets the log message
            </summary>
        </member>
        <member name="T:Cenium.Framework.Logging.Logger">
            <summary>
            The logger class contains methods to do write log and trace entries
            </summary>
        </member>
        <member name="M:Cenium.Framework.Logging.Logger.#cctor">
            <summary>
            Initializes the static Logger class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Logging.Logger.TraceProvider">
            <summary>
            Gets or sets the trace provider. This is an infrastructure method and should not be called outside the framework.
            </summary>
            <value>The trace provider instance.</value>
        </member>
        <member name="P:Cenium.Framework.Logging.Logger.EventLogProvider">
            <summary>
            Gets or sets the event log provider. This is an infrastructure method and should not be called outside the framework.
            </summary>
            <value>The event log provider instance.</value>
        </member>
        <member name="P:Cenium.Framework.Logging.Logger.ApplicationLogProvider">
            <summary>
            Gets or sets the application log provider. This is an infrastructure method and should not be called outside the framework.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Logging.Logger.Mode">
            <summary>
            Gets or sets the logging mode
            </summary>
        </member>
        <member name="P:Cenium.Framework.Logging.Logger.LogProviders">
            <summary>
            Gets an IEnumerable of all log provider factories found in the runtime environment.
            </summary>
            <remarks>
            It is important that all assemblies have been loaded prior to executing this method as the assembly inspection only happens the first time this property is invoked
            </remarks>
        </member>
        <member name="P:Cenium.Framework.Logging.Logger.IsLogEnabled">
            <summary>
            Get whether the log in enabled or not
            </summary>
            <remarks>
            This property will always return false when there is no provider set
            </remarks>
            <value>True if logging is enabled, otherwise false</value>
        </member>
        <member name="P:Cenium.Framework.Logging.Logger.IsTraceEnabled">
            <summary>
            Get if trace logging is enabled or not
            </summary>
            <remarks>
            This property will always return false when there is no provider set
            </remarks>
            <value>True if trace logging is enabled, otherwise false</value>
        </member>
        <member name="M:Cenium.Framework.Logging.Logger.LogEventMessage(System.String,System.Object[])">
            <summary>
            Outputs a message to the event log
            </summary>
            <param name="message">The message as a string. This may be a composite format string.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:Cenium.Framework.Logging.Logger.LogEventWarning(System.String,System.Object[])">
            <summary>
            Outputs a warning message to the event log
            </summary>
            <param name="message">The message as a string. This may be a composite format string.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:Cenium.Framework.Logging.Logger.LogEventError(System.String,System.Object[])">
            <summary>
            Outputs an error message to the event log
            </summary>
            <param name="message">The message as a string. This may be a composite format string.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:Cenium.Framework.Logging.Logger.LogError(System.Exception)">
            <summary>
            Writes an exception error to the event log
            </summary>
            <param name="exception">The exception to log</param>
        </member>
        <member name="M:Cenium.Framework.Logging.Logger.TraceMethodEnter">
            <summary>
            Used to trace that the application has entered a method
            </summary>
        </member>
        <member name="M:Cenium.Framework.Logging.Logger.TraceMethodEnter(System.Object[])">
            <summary>
            Used to trace that the application has entered a method
            </summary>
            <param name="parameters">The input parameters for the method</param>
        </member>
        <member name="M:Cenium.Framework.Logging.Logger.TraceMethodExit">
            <summary>
            Used to trace that the application is about to exit a method.
            </summary>
            <remarks>
            This trace method is intended for methods that return void.
            </remarks>
        </member>
        <member name="M:Cenium.Framework.Logging.Logger.TraceMethodExit(System.Object)">
            <summary>
            Used to trace that the application is about to exit a method
            </summary>
            <remarks>
            The return value is always the same instance as the returnValue argument. This instance is only used to output the return value in the trace log
            </remarks>
            <param name="returnValue">The return value from the method</param>
            <returns>The returnValue instance</returns>
        </member>
        <member name="M:Cenium.Framework.Logging.Logger.TraceMethodExit``1(``0)">
            <summary>
            Used to trace that the application is about to exit a method
            </summary>
            <remarks>
            The return value is always the same instance as the returnValue argument. This instance is only used to output the return value in the trace log
            </remarks>
            <typeparam name="T">The return type of the method</typeparam>
            <param name="returnValue">The return value from the method</param>
            <returns>The returnValue instance</returns>
        </member>
        <member name="M:Cenium.Framework.Logging.Logger.TraceMessage(System.String,System.Object[])">
            <summary>
            Writes a message to the trace log
            </summary>
            <param name="message">The message to write. This may be a formatted string</param>
            <param name="parameters">Parameters to incorporate into message, if the message string is a formatted string</param>
        </member>
        <member name="M:Cenium.Framework.Logging.Logger.TraceException(System.Exception)">
            <summary>
            Writes an exception to the trace log
            </summary>
            <param name="ex">The <c>Exception</c> write to the trace log.</param>
            <returns>The exception being written.</returns>
        </member>
        <member name="T:Cenium.Framework.Logging.LogMode">
            <summary>
            The severity level for log messages
            </summary>
        </member>
        <member name="F:Cenium.Framework.Logging.LogMode.None">
            <summary>
            No loggin is done
            </summary>
        </member>
        <member name="F:Cenium.Framework.Logging.LogMode.Log">
            <summary>
            Only event logging is performed
            </summary>
        </member>
        <member name="F:Cenium.Framework.Logging.LogMode.Trace">
            <summary>
            Both event logging and trace logging is performed
            </summary>
        </member>
        <member name="T:Cenium.Framework.Logging.NamespaceDoc">
            <summary>
            Provides support for logging and trace messages
            </summary>
            <remarks>
            <para>
            This namespace exposes a logging facade (<see cref="T:Cenium.Framework.Logging.Logger"/>) that contains static methods for application logging.
            </para>
            <para>
            It is possible to use any logging framework by implementing the <see cref="T:Cenium.Framework.Logging.ILogProvider"/> interface.
            </para>
            </remarks>
        </member>
        <member name="T:Cenium.Framework.Logging.LogEntryType">
            <summary>
            Defines what type a log entry is
            </summary>
        </member>
        <member name="F:Cenium.Framework.Logging.LogEntryType.Message">
            <summary>
            The log entry is a trace message
            </summary>
        </member>
        <member name="F:Cenium.Framework.Logging.LogEntryType.MethodEnter">
            <summary>
            The log entry is a trace method entry
            </summary>
        </member>
        <member name="F:Cenium.Framework.Logging.LogEntryType.MethodExit">
            <summary>
            The log entry is a trace method exit
            </summary>
        </member>
        <member name="F:Cenium.Framework.Logging.LogEntryType.Error">
            <summary>
            The log entry is an error (Exception)
            </summary>
        </member>
        <member name="F:Cenium.Framework.Logging.LogEntryType.Assert">
            <summary>
            The log entry is an assertation error
            </summary>
        </member>
        <member name="T:Cenium.Framework.Media.ColorInfo">
            <summary>
            Defines information about a color
            </summary>
        </member>
        <member name="P:Cenium.Framework.Media.ColorInfo.Name">
            <summary>
            Gets the name of the color, if the color is a known color
            </summary>
        </member>
        <member name="P:Cenium.Framework.Media.ColorInfo.R">
            <summary>
            Gets the red component of the color
            </summary>
        </member>
        <member name="P:Cenium.Framework.Media.ColorInfo.G">
            <summary>
            Gets the green component of the color
            </summary>
        </member>
        <member name="P:Cenium.Framework.Media.ColorInfo.B">
            <summary>
            Gets the blue component of the color
            </summary>
        </member>
        <member name="P:Cenium.Framework.Media.ColorInfo.A">
            <summary>
            Gets the alpha component of the color
            </summary>
        </member>
        <member name="P:Cenium.Framework.Media.ColorInfo.IsKnownColor">
            <summary>
            Gets a value indicating whether this instance is a known color.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Media.ColorInfo.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Cenium.Framework.Media.ColorInfo.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Cenium.Framework.Media.ColorInfo.ToString">
            <summary>
            Converts this ColorInfo instance to a human-readable string.
            </summary>
            <returns>A string that consists of the ARGB component values.</returns>
        </member>
        <member name="M:Cenium.Framework.Media.ColorInfo.FromARGB(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Creates a ColorInfo instance from the four ARGB components (alpha, red, green, and blue).
            </summary>
            <param name="r">The red component value for the new ColorInfo.</param>
            <param name="g">The green component value for the new ColorInfo.</param>
            <param name="b">The blue component value for the new ColorInfo.</param>
            <param name="a">The alpha component value for the new ColorInfo</param>
            <returns>A new ColorInfo instance. If the values are equivalent to a known color, the known ColorInfo instance is returned.</returns>
        </member>
        <member name="M:Cenium.Framework.Media.ColorInfo.FromRGB(System.Byte,System.Byte,System.Byte)">
            <summary>
            Creates a ColorInfo instance from the specified 8-bit color values (red, green, and blue). The alpha value is implicitly 255 (fully opaque).
            </summary>
            <param name="r">The red component value for the new ColorInfo.</param>
            <param name="g">The green component value for the new ColorInfo.</param>
            <param name="b">The blue component value for the new ColorInfo.</param>
            <returns>A new ColorInfo instance. If the values are equivalent to a known color, the known ColorInfo instance is returned.</returns>
        </member>
        <member name="M:Cenium.Framework.Media.ColorInfo.op_Explicit(Cenium.Framework.Media.ColorInfo)~System.String">
            <summary>
            Performs an explicit conversion from <see cref="T:Cenium.Framework.Media.ColorInfo"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="colorInfo">The color information.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Cenium.Framework.Media.ColorInfo.op_Equality(Cenium.Framework.Media.ColorInfo,Cenium.Framework.Media.ColorInfo)">
            <summary>
            Compares two ColorInfo instances for equality.
            </summary>
            <param name="color1">The first ColorInfo to compare</param>
            <param name="color2">The second ColorInfo to compare with</param>
            <returns>true if the ColorInfo instances are equal; otherwise false.</returns>
        </member>
        <member name="M:Cenium.Framework.Media.ColorInfo.op_Inequality(Cenium.Framework.Media.ColorInfo,Cenium.Framework.Media.ColorInfo)">
            <summary>
            Compares two ColorInfo instances for in-equality.
            </summary>
            <param name="color1">The first ColorInfo to compare</param>
            <param name="color2">The second ColorInfo to compare with</param>
            <returns>true if the ColorInfo instances are not equal; otherwise false.</returns>
        </member>
        <member name="M:Cenium.Framework.Media.ColorInfo.Equals(Cenium.Framework.Media.ColorInfo,Cenium.Framework.Media.ColorInfo)">
            <summary>
            Compares two ColorInfo instances for equality.
            </summary>
            <param name="color1">The first ColorInfo to compare</param>
            <param name="color2">The second ColorInfo to compare with</param>
            <returns>true if the ColorInfo instances are equal; otherwise false.</returns>
        </member>
        <member name="T:Cenium.Framework.Media.Dimension">
            <summary>
            Represents the dimensions (width and height) of an object
            </summary>
        </member>
        <member name="M:Cenium.Framework.Media.Dimension.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Cenium.Framework.Media.Dimension"/> struct.
            </summary>
            <param name="width">The width of the object.</param>
            <param name="height">The height of the object.</param>
        </member>
        <member name="P:Cenium.Framework.Media.Dimension.Height">
            <summary>
            Gets the height.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Media.Dimension.Width">
            <summary>
            Gets the width.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Media.Dimension.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty (width and height is zero).
            </summary>
        </member>
        <member name="P:Cenium.Framework.Media.Dimension.IsValid">
            <summary>
            Gets a value indicating whether this instance is valid (width and height is zero or greater).
            </summary>
        </member>
        <member name="M:Cenium.Framework.Media.Dimension.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Cenium.Framework.Media.Dimension.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="T:Cenium.Framework.MethodResult">
            <summary>
            Represents the result of invoking a method. This class can be used instead of throwing exceptions
            </summary>
        </member>
        <member name="F:Cenium.Framework.MethodResult.OperationSuccess">
            <summary>
            Operation was successful
            </summary>
        </member>
        <member name="F:Cenium.Framework.MethodResult.OperationError">
            <summary>
            Operation failed with an error
            </summary>
        </member>
        <member name="F:Cenium.Framework.MethodResult.Success">
            <summary>
            Represents a successful operation
            </summary>
        </member>
        <member name="M:Cenium.Framework.MethodResult.#ctor(Cenium.Framework.MethodResultType,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cenium.Framework.MethodResult"/> class.
            </summary>
            <param name="result">The result code to use</param>
            <param name="message">The message associated with the result code</param>
            <param name="type">The type of result</param>
        </member>
        <member name="P:Cenium.Framework.MethodResult.ResultType">
            <summary>
            Gets the type of result
            </summary>
        </member>
        <member name="P:Cenium.Framework.MethodResult.Result">
            <summary>
            Gets the result code
            </summary>
        </member>
        <member name="P:Cenium.Framework.MethodResult.Message">
            <summary>
            Gets the message associated with the result.
            </summary>
        </member>
        <member name="T:Cenium.Framework.MethodResultType">
            <summary>
            Represents the type of result in a MethodResult
            </summary>
        </member>
        <member name="T:Cenium.Framework.PropertyNames">
            <summary>
            Contains constants for frequently used property names
            </summary>
        </member>
        <member name="T:Cenium.Framework.SDKDependencyAttribute">
            <summary>
            Defines the SDK dependencies a component assembly might have
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:Cenium.Framework.SDKDependencyAttribute.#ctor(Cenium.Framework.SDKDependencyType,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cenium.Framework.SDKDependencyAttribute"/> class.
            </summary>
            <param name="dependencyType">The dependency type</param>
            <param name="version">The minimum version for the dependency. </param>
        </member>
        <member name="P:Cenium.Framework.SDKDependencyAttribute.DependencyType">
            <summary>
            Gets the dependency type
            </summary>
        </member>
        <member name="P:Cenium.Framework.SDKDependencyAttribute.Version">
            <summary>
            Gets the minimum version supported for the dependency
            </summary>
        </member>
        <member name="T:Cenium.Framework.SDKDependencyType">
            <summary>
            Defines the dependency types that are supported
            </summary>
            <seealso cref="T:Cenium.Framework.SDKDependencyAttribute"/>
        </member>
        <member name="F:Cenium.Framework.SDKDependencyType.SDKMinVersion">
            <summary>
            The SDK minimum version
            </summary>
        </member>
        <member name="T:Cenium.Framework.SpecialCharacterManager">
            <summary>
            Handles the special characters which requires special handling
            </summary>
        </member>
        <member name="F:Cenium.Framework.SpecialCharacterManager.s_characterHandlers">
            <summary>
             Holds the characters and escape sequences
            </summary>
        </member>
        <member name="M:Cenium.Framework.SpecialCharacterManager.#cctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Cenium.Framework.SpecialCharacterManager.EscapeSpecialCharacters(System.String)">
            <summary>
            Escape special characters from the expression
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Cenium.Framework.SpecialCharacterManager.ReInstateSpecialCharacters(System.String)">
            <summary>
            Replace escape strings with actual characters
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="T:Cenium.Framework.Net.Client.IServerResponse">
            <summary>
            Explain the purpose of the interface here
            </summary>
        </member>
        <member name="P:Cenium.Framework.Net.HttpOperationCompletedEventArgs.Result">
            <summary>
            Gets the server reply to an http operation started by calling one of the async methods.
            </summary>
        </member>
        <member name="F:Cenium.Framework.Net.HttpContentTypes.ContentTypeJson">
            <summary>Represents json content type</summary>
        </member>
        <member name="F:Cenium.Framework.Net.HttpContentTypes.ContentTypeXml">
            <summary>Represents xml content type</summary>
        </member>
        <member name="T:Cenium.Framework.Net.ClientCredential">
            <summary>
            Provides credentials for password-based authentication schemes such as basic, digest, NTLM, and Kerberos authentication.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Net.ClientCredential.#ctor">
            <summary>
            Initializes a new instance of the ClientCredential class.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Net.ClientCredential.SetSecurePassword(System.Object)">
            <summary>
            Sets a secure password
            </summary>
            <param name="password">a secure password instance</param>
        </member>
        <member name="T:Cenium.Framework.Net.HttpMethods">
            <summary>
            Defines valid HTTP methods
            </summary>
        </member>
        <member name="F:Cenium.Framework.Net.HttpMethods.Get">
            <summary>
            HTTP GET method
            </summary>
        </member>
        <member name="F:Cenium.Framework.Net.HttpMethods.Post">
            <summary>
            HTTP POST method
            </summary>
        </member>
        <member name="F:Cenium.Framework.Net.HttpMethods.Delete">
            <summary>
            HTTP DELETE method
            </summary>
        </member>
        <member name="T:Cenium.Framework.Net.ICredentialFactory">
            <summary>
            Defines a mechanism for creating ClientCredential instances
            </summary>
        </member>
        <member name="M:Cenium.Framework.Net.ICredentialFactory.CreateCredential">
            <summary>
            Creates a new ClientCredential instance
            </summary>
            <returns>a new ClientCredential instance</returns>
        </member>
        <member name="T:Cenium.Framework.Net.IHttpClient">
            <summary>
            Defines common methods for sending data to and receiving data from a resource identified by a URI.
            </summary>
        </member>
        <member name="E:Cenium.Framework.Net.IHttpClient.UploadCompleted">
            <summary>
            Triggered when an async upload operation is completed
            </summary>
        </member>
        <member name="E:Cenium.Framework.Net.IHttpClient.DownloadCompleted">
            <summary>
            Triggered when an async download operation is completed
            </summary>
        </member>
        <member name="P:Cenium.Framework.Net.IHttpClient.BaseAddress">
            <summary>
            Gets or sets the base URI for requests made by an http client
            </summary>
        </member>
        <member name="P:Cenium.Framework.Net.IHttpClient.UseDefaultCredentials">
            <summary>
            Gets or sets a Boolean value that controls whether the DefaultCredentials are sent with requests.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Net.IHttpClient.Credentials">
            <summary>
            Gets or sets the network credentials that are sent to the host and used to authenticate the request
            </summary>
        </member>
        <member name="P:Cenium.Framework.Net.IHttpClient.Encoding">
            <summary>
            Gets and sets the Encoding used to upload and download strings.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Net.IHttpClient.HttpProxy">
            <summary>
            Gets or sets the proxy used by the http client
            </summary>
        </member>
        <member name="P:Cenium.Framework.Net.IHttpClient.PreAuthenticate">
            <summary>
            Indicates whether to pre-authenticate the request
            </summary>
            <remarks>
            After a client request to a specific Uri is successfully authenticated, if PreAuthenticate is true and credentials are supplied, the Authorization header is sent with each request to any Uri that matches the specific Uri up to the last forward slash.
            </remarks>
        </member>
        <member name="P:Cenium.Framework.Net.IHttpClient.UseCompression">
            <summary>
            Gets or sets if compression should be used
            </summary>
        </member>
        <member name="P:Cenium.Framework.Net.IHttpClient.ContentType">
            <summary>
            Gets or sets the content type header
            </summary>
        </member>
        <member name="P:Cenium.Framework.Net.IHttpClient.Accept">
            <summary>
            Gets or sets the accept header
            </summary>
        </member>
        <member name="P:Cenium.Framework.Net.IHttpClient.UserAgent">
            <summary>
            Gets or sets the accept header
            </summary>
        </member>
        <member name="P:Cenium.Framework.Net.IHttpClient.Timeout">
            <summary>
            Gets or sets the timeout
            </summary>
        </member>
        <member name="P:Cenium.Framework.Net.IHttpClient.IsCacheAllowed">
            <summary>
            Gets or sets if caching is allowed
            </summary>
        </member>
        <member name="M:Cenium.Framework.Net.IHttpClient.SetHeader(System.String,System.String)">
            <summary>
            Sets the header for the request
            </summary>
            <param name="name">The name of the header</param>
            <param name="value">The value for the header</param>
        </member>
        <member name="P:Cenium.Framework.Net.IHttpClient.AllowAutoRedirect">
            <summary>
            Gets or sets if auto redirects is allowed
            </summary>
        </member>
        <member name="M:Cenium.Framework.Net.IHttpClient.UploadData(System.String,System.Byte[])">
            <summary>
            Uploads a data buffer to a resource identified by a URI.
            </summary>
            <param name="address">The URI of the resource to receive the data.</param>
            <param name="data">The data buffer to send to the resource</param>
            <returns>A Byte array containing the body of the response from the resource.</returns>
        </member>
        <member name="M:Cenium.Framework.Net.IHttpClient.UploadDataTaskAsync(System.String,System.Byte[])">
            <summary>
            Uploads a data buffer to a resource identified by a URI.
            </summary>
            <param name="address">The URI of the resource to receive the data.</param>
            <param name="data">The data buffer to send to the resource</param>
            <returns>A Byte array containing the body of the response from the resource.</returns>
        </member>
        <member name="M:Cenium.Framework.Net.IHttpClient.UploadData(System.String,System.String,System.Byte[])">
            <summary>
            Uploads a data buffer to a resource identified by a URI.
            </summary>
            <param name="address">The URI of the resource to receive the data.</param>
            <param name="method">The HTTP method to use</param>
            <param name="data">The data buffer to send to the resource</param>
            <returns>A Byte array containing the body of the response from the resource.</returns>
        </member>
        <member name="M:Cenium.Framework.Net.IHttpClient.UploadDataTaskAsync(System.String,System.String,System.Byte[])">
            <summary>
            Uploads a data buffer to a resource identified by a URI.
            </summary>
            <param name="address">The URI of the resource to receive the data.</param>
            <param name="method">The HTTP method to use</param>
            <param name="data">The data buffer to send to the resource</param>
            <returns>A Byte array containing the body of the response from the resource.</returns>
        </member>
        <member name="M:Cenium.Framework.Net.IHttpClient.UploadDataAsync(System.String,System.Byte[],System.Object)">
            <summary>
            Uploads a data buffer to a resource identified by a URI, using the specified method and identifying token.
            </summary>
            <param name="address">The URI of the resource to receive the data.</param>
            <param name="data">The data buffer to send to the resource</param>
            <param name="userToken">A user-defined object that is passed to the method invoked when the asynchronous operation completes.</param>
        </member>
        <member name="M:Cenium.Framework.Net.IHttpClient.UploadDataAsync(System.String,System.String,System.Byte[],System.Object)">
            <summary>
            Uploads a data buffer to a resource identified by a URI, using the specified method and identifying token.
            </summary>
            <param name="address">The URI of the resource to receive the data.</param>
            <param name="data">The data buffer to send to the resource</param>
            <param name="method">The HTTP method to use</param>
            <param name="userToken">A user-defined object that is passed to the method invoked when the asynchronous operation completes.</param>
        </member>
        <member name="M:Cenium.Framework.Net.IHttpClient.DownloadData(System.String)">
            <summary>
            Downloads the resource with the specified URI as a Byte array.
            </summary>
            <param name="address">The URI from which to download data. </param>
            <returns>A Byte array containing the downloaded resource.</returns>
        </member>
        <member name="M:Cenium.Framework.Net.IHttpClient.DownloadDataAsync(System.String,System.Object)">
            <summary>
            Downloads the resource with the specified URI as a Byte array.
            </summary>
            <param name="address">The URI from which to download data. </param>
            <param name="userToken">A user-defined object that is passed to the method invoked when the asynchronous operation completes.</param>
            <returns>A Byte array containing the downloaded resource.</returns>
        </member>
        <member name="M:Cenium.Framework.Net.IHttpClient.DownloadDataTaskAsync(System.String)">
            <summary>
            Downloads the resource as a Byte array from the URI specified as an asynchronous operation using a task object.
            </summary>
            <param name="address">The URI of the resource to download.</param>
            <returns>The task object representing the asynchronous operation. The Result property on the task object returns a Byte array containing the downloaded resource.</returns>
        </member>
        <member name="M:Cenium.Framework.Net.IHttpClient.DownloadString(System.String)">
            <summary>
            Downloads the requested resource as a String. The resource to download is specified as a String containing the URI
            </summary>
            <param name="address">A String containing the URI to download</param>
            <returns>A String containing the requested resource</returns>
        </member>
        <member name="M:Cenium.Framework.Net.IHttpClient.OpenRead(System.String)">
            <summary>
            Opens a readable stream for the data downloaded from a resource with the URI specified as a String
            </summary>
            <param name="address">The URI specified as a String from which to download data. </param>
            <returns>A Stream used to read data from a resource.</returns>
        </member>
        <member name="T:Cenium.Framework.Net.IHttpClientFactory">
            <summary>
            Defines a mechanism for creating IHttpClient and IHttpProxy instances
            </summary>
        </member>
        <member name="M:Cenium.Framework.Net.IHttpClientFactory.Create">
            <summary>
            Creates a new IHttpClient instance
            </summary>
            <returns>A new IHttpClient instance</returns>
        </member>
        <member name="M:Cenium.Framework.Net.IHttpClientFactory.CreateProxy(System.String)">
            <summary>
            Creates a new IHttpProxy instance
            </summary>
            <param name="address">The URI of the proxy server.</param>
            <returns>A new IHttpProxy instance</returns>
        </member>
        <member name="M:Cenium.Framework.Net.IHttpClientFactory.CreateProxy(System.String,System.Int32)">
            <summary>
            Creates a new IHttpProxy instance
            </summary>
            <param name="address">The URI of the proxy server.</param>
            <param name="port">The port of the proxy server</param>
            <returns>A new IHttpProxy instance</returns>
        </member>
        <member name="T:Cenium.Framework.Net.IHttpProxy">
            <summary>
            Provides the base interface for implementation of proxy access for the IHttpClient interface.
            </summary>
        </member>
        <member name="T:Cenium.Framework.Net.NamespaceDoc">
            <summary>
            The Cenium.Framework.Net namespace provides extensions and base classes for network interactions.
            </summary>
        </member>
        <member name="T:Cenium.Framework.Net.ParameterizedUrl">
             <summary>
            
             </summary>
        </member>
        <member name="T:Cenium.Framework.NamespaceDoc">
            <summary>
            Contains classes and interfaces that are used by all framework assemblies.
            </summary>
        </member>
        <member name="T:Cenium.Framework.PackString">
            <summary>
            Represents a collection of key-value pairs packed into a string
            </summary>
        </member>
        <member name="M:Cenium.Framework.PackString.#cctor">
            <summary>
            Performs static initialization of the PackString class
            </summary>
        </member>
        <member name="M:Cenium.Framework.PackString.#ctor">
            <summary>
            Initializes a new instance of the PackString class
            </summary>
        </member>
        <member name="P:Cenium.Framework.PackString.Item(System.String)">
            <summary>
            Gets or sets a value associated with a field
            </summary>
            <param name="name">The name of the field</param>
            <returns>The field value</returns>
        </member>
        <member name="P:Cenium.Framework.PackString.IsEmpty">
            <summary>
            Returns true if the packed string is empty; otherwise false
            </summary>
        </member>
        <member name="M:Cenium.Framework.PackString.Contains(System.String)">
            <summary>
            Determines whether the PackString contains the specified field.
            </summary>
            <param name="name">The name of the field to check for.</param>
            <returns>True if the PackString contains the specified field, otherwise false</returns>
        </member>
        <member name="M:Cenium.Framework.PackString.IsType(System.String,System.Type)">
            <summary>
            Checks if a specified field is of a specified type
            </summary>
            <param name="name">The name of the field to check for.</param>
            <param name="type">The type to check for</param>
            <returns>True if the PackString contains the specified field and the field value is of the specified type, otherwise false</returns>
        </member>
        <member name="M:Cenium.Framework.PackString.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:Cenium.Framework.PackString.GetValue(System.String)">
            <summary>
            Gets the value associated with the field name specified
            </summary>
            <param name="name">The field name</param>
            <returns>The value associated with the field</returns>
        </member>
        <member name="M:Cenium.Framework.PackString.SetValue(System.String,System.Object)">
            <summary>
            Sets the value associated with the field name
            </summary>
            <param name="name">The field name</param>
            <param name="value">The value associated with the field name</param>
        </member>
        <member name="M:Cenium.Framework.PackString.Encode(Cenium.Framework.PackString)">
            <summary>
            Creates a string representation of a PackString
            </summary>
            <param name="packed">The PackString to convert</param>
            <returns>A string representation of the pack string</returns>
        </member>
        <member name="M:Cenium.Framework.PackString.Decode(System.String)">
            <summary>
            Creates a PackString instance from a string
            </summary>
            <param name="str">The string to convert</param>
            <returns>A PackString instance</returns>
        </member>
        <member name="T:Cenium.Framework.IPortableFactory">
            <summary>
            Defines that a factory is a portable factory, i.e. each platform must provide an implementation of this factory.
            </summary>
            <remarks>
            This interface is reserved for future use
            </remarks>
        </member>
        <member name="T:Cenium.Framework.PackStringArray">
            <summary>
            Represents an array of PackString objects
            </summary>
        </member>
        <member name="M:Cenium.Framework.PackStringArray.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Cenium.Framework.PackStringArray.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Cenium.Framework.PackStringArray.Encode(Cenium.Framework.PackStringArray)">
            <summary>
            Encodes the specified PackStringArray into a string representation.
            </summary>
            <param name="packed">The PackStringArray instance to encode</param>
            <returns>A string representation of the PackStringArray</returns>
        </member>
        <member name="M:Cenium.Framework.PackStringArray.Decode(System.String)">
            <summary>
            Decodes the specified string representation of a PackStringArray
            </summary>
            <param name="packedArray">The packed array.</param>
            <returns>A new PackStringArray instance</returns>
        </member>
        <member name="T:Cenium.Framework.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Properties.Resources.Client_AuthorizationError">
            <summary>
              Looks up a localized string similar to Invalid user name or password. .
            </summary>
        </member>
        <member name="P:Cenium.Framework.Properties.Resources.Client_ConnectionError">
            <summary>
              Looks up a localized string similar to The server was not found or was not accessible ({0})..
            </summary>
        </member>
        <member name="P:Cenium.Framework.Properties.Resources.Client_InternalServerError">
            <summary>
              Looks up a localized string similar to An unknown error occured on the server.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Properties.Resources.Client_NotFound">
            <summary>
              Looks up a localized string similar to Invalid server request - the resource requested does not exist on the server..
            </summary>
        </member>
        <member name="P:Cenium.Framework.Properties.Resources.Client_UnspecifiedError">
            <summary>
              Looks up a localized string similar to An unknown error occured ({0})..
            </summary>
        </member>
        <member name="P:Cenium.Framework.Properties.Resources.License_Header">
            <summary>
              Looks up a localized string similar to Your use of the software is subject to the terms and conditions of the agreement you agreed to when you acquired a license for the software. You may not use the software if you have not validly acquired a license from Cenium AS or its licensed distributors..
            </summary>
        </member>
        <member name="P:Cenium.Framework.Properties.Resources.License_ThirdPartyNotice">
            <summary>
              Looks up a localized string similar to This application may incorporate components from the projects listed below..
            </summary>
        </member>
        <member name="T:Cenium.Framework.Reflection.ClassHelper">
            <summary>
            Helper class that assists in creating instances, setting/getting property values and invoking methods using reflection
            </summary>
        </member>
        <member name="M:Cenium.Framework.Reflection.ClassHelper.RegisterTypes(Cenium.Framework.Reflection.RegisterTypeAttribute[])">
            <summary>
            Registers a type for use by reflection.
            </summary>
            <param name="types"></param>
        </member>
        <member name="M:Cenium.Framework.Reflection.ClassHelper.CreateInstance(System.String)">
            <summary>
            Creates an instance of the specified type
            </summary>
            <param name="typeName">The name of the type to create an instance of</param>
            <returns>A reference to the newly created object</returns>
        </member>
        <member name="M:Cenium.Framework.Reflection.ClassHelper.CreateGenericInstance(System.Type,System.Type[])">
            <summary>
            Creates a generic instance of the specified type (s)
            </summary>
            <param name="type">The type to create an instance of</param>
            <param name="typeArgs">An array of types to be substituted for the type parameters of the current generic type</param>
            <returns>A reference to the newly created object</returns>
        </member>
        <member name="M:Cenium.Framework.Reflection.ClassHelper.CreateGenericInstance(System.Type,System.Type[],System.Object[])">
            <summary>
            Creates a generic instance of the specified type(s)
            </summary>
            <param name="type">The type to create an instance of</param>
            <param name="typeArgs">An array of types to be substituted for the type parameters of the current generic type</param>
            <param name="args">Constructor arguments to use</param>
            <returns>A reference to the newly created object</returns>
        </member>
        <member name="M:Cenium.Framework.Reflection.ClassHelper.GetType(System.String)">
            <summary>
            Returns the type for a specified type name
            </summary>
            <param name="typeName">The type name to get the type for</param>
            <returns>A <c>Type</c> instance, or null if the type is not found.</returns>
        </member>
        <member name="M:Cenium.Framework.Reflection.ClassHelper.CreateInstance(System.Type)">
            <summary>
            Creates an instance of the specified type
            </summary>
            <param name="type">The type to create an instance of</param>
            <returns>A reference to the newly created object</returns>
        </member>
        <member name="M:Cenium.Framework.Reflection.ClassHelper.CreateInstance``1">
            <summary>
            Creates an instance of the specified type
            </summary>
            <typeparam name="T">The type to create</typeparam>
            <returns>A reference to the newly created object</returns>
        </member>
        <member name="M:Cenium.Framework.Reflection.ClassHelper.Invoke(System.Object,System.String,System.Object[])">
            <summary>
            Invokes a method given its method name using reflection
            </summary>
            <param name="obj">The object on which to invoke the method</param>
            <param name="method">The name of the method</param>
            <param name="args">An argument list for the invoked method</param>
            <returns>An object containing the return value of the invoked method</returns>
        </member>
        <member name="M:Cenium.Framework.Reflection.ClassHelper.Invoke(System.Object,System.Reflection.MethodInfo,System.Object[])">
            <summary>
            Invokes a method given its method name using reflection
            </summary>
            <param name="obj">The object on which to invoke the method</param>
            <param name="method">The MethodInfo instance for the method</param>
            <param name="args">An argument list for the invoked method</param>
            <returns>An object containing the return value of the invoked method</returns>
        </member>
        <member name="M:Cenium.Framework.Reflection.ClassHelper.InvokeStatic(System.Type,System.String,System.Object[])">
            <summary>
            Invokes a static method given its name using reflection
            </summary>
            <param name="type">The type which contains the specified method</param>
            <param name="method">The method to invoke</param>
            <param name="args">An argument list for the invoked method</param>
            <returns>An object containing the return value of the invoked method</returns>
        </member>
        <member name="M:Cenium.Framework.Reflection.ClassHelper.SetPropertyValue``1(System.Object,System.String,``0)">
            <summary>
            Sets a property value given the object, property name and value
            </summary>
            <typeparam name="T">The property type</typeparam>
            <param name="obj">The instance to set the property on</param>
            <param name="propertyName">The name of the property</param>
            <param name="value">The value to set</param>
        </member>
        <member name="M:Cenium.Framework.Reflection.ClassHelper.GetPropertyValue``1(System.Object,System.String)">
            <summary>
            Gets a property value for a specified object
            </summary>
            <typeparam name="T">The type of the property</typeparam>
            <param name="obj">The instance to get the property value from</param>
            <param name="propertyName">The name of the property</param>
            <returns>The value of the property</returns>
        </member>
        <member name="M:Cenium.Framework.Reflection.ClassHelper.GetPropertyValue(System.Object,System.String)">
            <summary>
            Gets a property value for a specified object
            </summary>
            <param name="obj">The instance to get the property value from</param>
            <param name="propertyName">The name of the property</param>
            <returns>The value of the property</returns>
        </member>
        <member name="M:Cenium.Framework.Reflection.ClassHelper.GetPropertyType(System.Type,System.String)">
            <summary>
            Gets the type for a specified property name
            </summary>
            <param name="parentType">The type that implements the property</param>
            <param name="name">The name of the property to get the type for</param>
            <returns>The property type, or null if the property does not exist</returns>
        </member>
        <member name="T:Cenium.Framework.Reflection.IAssemblyInfo">
            <summary>
            Provides a mechanism for obtaining additional information for an assembly
            </summary>
        </member>
        <member name="M:Cenium.Framework.Reflection.IAssemblyInfo.GetCodeBase(System.Reflection.Assembly)">
            <summary>
            Gets the location of the assembly as specified originally, for example, in an AssemblyName object
            </summary>
            <param name="assembly">The assembly to inspect</param>
            <returns>The location of the assembly</returns>
        </member>
        <member name="M:Cenium.Framework.Reflection.IAssemblyInfo.GetLibraryName(System.Reflection.Assembly)">
            <summary>
            Gets the filename of the assembly without the path
            </summary>
            <param name="assembly">The assembly to inspect</param>
            <returns>The filename of the assembly</returns>
        </member>
        <member name="M:Cenium.Framework.Reflection.IReflectionProvider.GetCreateInstanceFactory(System.Type)">
            <summary>
            Gets a factory method to create a new instance of the specified type
            </summary>
            <param name="type">The type to create</param>
            <returns>A factory delegate to create new instances of the specified type.</returns>
        </member>
        <member name="T:Cenium.Framework.Reflection.ReflectionHelper">
            <summary>
            Explain the purpose of the interface here
            </summary>
        </member>
        <member name="T:Cenium.Framework.Reflection.NamespaceDoc">
            <summary>
            The Cenium.Framework.Reflection namespace contains types that retrieve information about assemblies, modules, members, parameters, and other entities in
            managed code by examining their metadata.
            </summary>
        </member>
        <member name="T:Cenium.Framework.Reflection.RegisterTypeAttribute">
            <summary>
            Registers a type that is not in the normal assembly path so that it can be found using reflection
            </summary>
        </member>
        <member name="M:Cenium.Framework.Reflection.RegisterTypeAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the RegisterTypeAttribute class
            </summary>
            <param name="type">The type to register</param>
        </member>
        <member name="P:Cenium.Framework.Reflection.RegisterTypeAttribute.Type">
            <summary>
            Gets or sets the registered type
            </summary>
        </member>
        <member name="T:Cenium.Framework.Serialization.Json.IJsonSerializer">
            <summary>
            Provides a mechanism for serializing and deserializing types using JSON as protocol
            </summary>
        </member>
        <member name="M:Cenium.Framework.Serialization.Json.IJsonSerializer.Deserialize(System.String)">
            <summary>
            Converts a JSON-formatted string to an object.
            </summary>
            <param name="json">The JSON string to deserialize.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="M:Cenium.Framework.Serialization.Json.IJsonSerializer.Serialize(System.Object)">
            <summary>
            Converts an object to a JSON string.
            </summary>
            <param name="value">The object to serialize.</param>
            <returns>The serialized JSON string.</returns>
        </member>
        <member name="M:Cenium.Framework.Serialization.Json.IJsonSerializer.RegisterTypeConverter(System.Type,Cenium.Framework.Serialization.Json.IJsonTypeConverter)">
            <summary>
            Registers a json type converter and associates it with a type
            </summary>
            <param name="type">The type to use the type converter for</param>
            <param name="converter">The type converter</param>
        </member>
        <member name="M:Cenium.Framework.Serialization.Json.IJsonSerializer.ConvertToType(System.Object,System.Type)">
            <summary>
            Converts the specified object to the specified type.
            </summary>
            <param name="value">The object to convert</param>
            <param name="type">The type to convert to</param>
            <returns>The serialized json string</returns>
        </member>
        <member name="T:Cenium.Framework.Serialization.Json.IJSonSerializerFactory">
            <summary>
            Defines a mechanism to create IJsonSerializer instances
            </summary>
        </member>
        <member name="M:Cenium.Framework.Serialization.Json.IJSonSerializerFactory.CreateSerializer(System.Type)">
            <summary>
            Creates a new IJsonSerializer for the specified type
            </summary>
            <param name="serializeType">The Type to provide a serializer for</param>
            <returns>A IJsonSerializer instance</returns>
        </member>
        <member name="T:Cenium.Framework.StringTokenizer">
            <summary>
            The <c>StringTokenizer</c> class breaks a string into tokens such as words, phrases etc.
            </summary>
        </member>
        <member name="M:Cenium.Framework.StringTokenizer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the StringTokenizer class
            </summary>
        </member>
        <member name="P:Cenium.Framework.StringTokenizer.IgnoreWhiteSpace">
            <summary>
            Gets or sets if whitespace is ignored
            </summary>
        </member>
        <member name="P:Cenium.Framework.StringTokenizer.SymbolChars">
            <summary>
            Gets or sets an array of char that are defined as symbol characters
            </summary>
        </member>
        <member name="P:Cenium.Framework.StringTokenizer.Tokens">
            <summary>
            Gets the tokens. Note that this will be an empty enumerable until the Tokenize method has been called
            </summary>
        </member>
        <member name="M:Cenium.Framework.StringTokenizer.Reset">
            <summary>
            Resets the tokenizer
            </summary>
        </member>
        <member name="M:Cenium.Framework.StringTokenizer.Tokenize">
            <summary>
            Creates the tokens
            </summary>
            <returns>An <c>IEnumerable</c> with <c>Token</c> instances</returns>
        </member>
        <member name="T:Cenium.Framework.StringTokenizer.TokenKind">
            <summary>
            Defines the type of token
            </summary>
        </member>
        <member name="F:Cenium.Framework.StringTokenizer.TokenKind.Unknown">
            <summary>
            Token is an unknown or uncategorized token
            </summary>
        </member>
        <member name="F:Cenium.Framework.StringTokenizer.TokenKind.Control">
            <summary>
            Token is a control character
            </summary>
        </member>
        <member name="F:Cenium.Framework.StringTokenizer.TokenKind.Word">
            <summary>
            Token is a word
            </summary>
        </member>
        <member name="F:Cenium.Framework.StringTokenizer.TokenKind.Number">
            <summary>
            Token is a number
            </summary>
        </member>
        <member name="F:Cenium.Framework.StringTokenizer.TokenKind.Phrase">
            <summary>
            Token is a phrase
            </summary>
        </member>
        <member name="F:Cenium.Framework.StringTokenizer.TokenKind.Whitespace">
            <summary>
            Token is a whitespace
            </summary>
        </member>
        <member name="F:Cenium.Framework.StringTokenizer.TokenKind.Symbol">
            <summary>
            Token is a symbol
            </summary>
        </member>
        <member name="T:Cenium.Framework.StringTokenizer.Token">
            <summary>
            Represents a token
            </summary>
        </member>
        <member name="P:Cenium.Framework.StringTokenizer.Token.Kind">
            <summary>
            Gets the token kind
            </summary>
        </member>
        <member name="P:Cenium.Framework.StringTokenizer.Token.Value">
            <summary>
            Gets the token value
            </summary>
        </member>
        <member name="T:Cenium.Framework.Core.StringValueConverter">
            <summary>
            Static class that performs parameter type conversions from a string type to another type
            </summary>
        </member>
        <member name="M:Cenium.Framework.Core.StringValueConverter.Convert(System.Type,System.String[])">
            <summary>
            Converts an array of strings into an object array with each element converted to the specified type
            </summary>
            <param name="type">The type to convert to</param>
            <param name="values">The string elements to convert</param>
            <returns>an object array with each element converted to the appropriate type</returns>
        </member>
        <member name="M:Cenium.Framework.Core.StringValueConverter.Convert``1(System.String)">
            <summary>
            Converts a string into a specified type
            </summary>
            <typeparam name="T">The type to convert to</typeparam>
            <param name="value">The value as a string</param>
            <returns>A value in the specified type</returns>
        </member>
        <member name="M:Cenium.Framework.Core.StringValueConverter.ConvertToString(System.Object)">
            <summary>
            Converts a value into an invariant string
            </summary>
            <param name="value">The value to convert into a string value</param>
            <returns>The value represented as an invariant string</returns>
        </member>
        <member name="M:Cenium.Framework.Core.StringValueConverter.Convert(System.Type,System.String)">
            <summary>
            Converts a string into a specified type
            </summary>
            <param name="type">The type to convert to</param>
            <param name="value">The value as a string</param>
            <returns>A value in the specified type</returns>
        </member>
        <member name="M:Cenium.Framework.Core.StringValueConverter.Convert(System.Type,System.String,System.Globalization.CultureInfo)">
            <summary>
            Converts a string into a specified type using the specified culture
            </summary>
            <param name="type">The type to convert to</param>
            <param name="value">The value as a string</param>
            <param name="culture">The CultureInfo to use</param>
            <returns>A value in the specified type</returns>
        </member>
        <member name="M:Cenium.Framework.Core.StringValueConverter.CanConvertToBoolFromString(System.String,System.Boolean)">
            <summary>
            Determines if a string value can be converted to a bool value
            </summary>
            <param name="value">The value to check.</param>
            <param name="allowNull">Determines whether null or empty string is allowed.</param>
            <returns><c>true</c> if the string value can be converted; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Cenium.Framework.Core.StringValueConverter.CanConvertToDateTimeFromString(System.String,System.Boolean)">
            <summary>
            Determines if a string value can be converted to a DateTime value
            </summary>
            <param name="value">The value to check.</param>
            <param name="allowNull">Determines whether null or empty string is allowed.</param>
            <returns><c>true</c> if the string value can be converted; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Cenium.Framework.Core.StringValueConverter.CanConvertToIntFromString(System.String,System.Boolean)">
            <summary>
            Determines if a string value can be converted to an integer type value
            </summary>
            <param name="value">The value to check.</param>
            <param name="allowNull">Determines whether null or empty string is allowed.</param>
            <returns><c>true</c> if the string value can be converted; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Cenium.Framework.Core.StringValueConverter.CanConvertToDecimalFromString(System.String,System.Boolean)">
            <summary>
            Determines if a string value can be converted to a decimal value
            </summary>
            <param name="value">The value to check.</param>
            <param name="allowNull">Determines whether null or empty string is allowed.</param>
            <returns><c>true</c> if the string value can be converted; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Cenium.Framework.Telemetry.DefaultTelemetryRequestEntry">
            <summary>
            Default implementation of <c>TelemetryRequestEntry</c>. Use when telemetry is disabled.
            </summary>
        </member>
        <member name="T:Cenium.Framework.Telemetry.TelemetryEntry">
            <summary>
            Base class for all telemetry entries
            </summary>
        </member>
        <member name="P:Cenium.Framework.Telemetry.TelemetryEntry.StartTime">
            <summary>
            Gets the start time.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Telemetry.TelemetryEntry.Duration">
            <summary>
            Gets the duration.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Telemetry.TelemetryEntry.Error">
            <summary>
            Gets the error.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Telemetry.TelemetryEntry.SourceId">
            <summary>
            Gets the source identifier.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Telemetry.TelemetryEntry.SessionId">
            <summary>
            Gets the session identifier
            </summary>
        </member>
        <member name="P:Cenium.Framework.Telemetry.TelemetryEntry.AnonymousUserId">
            <summary>
            Gets the anonymous user identifier.
            </summary>
        </member>
        <member name="T:Cenium.Framework.Telemetry.TelemetryRequestEntry">
            <summary>
            Base class for request based telemetry
            </summary>
            <seealso cref="T:Cenium.Framework.Telemetry.TelemetryEntry" />
        </member>
        <member name="M:Cenium.Framework.Telemetry.TelemetryRequestEntry.#ctor(Cenium.Framework.Telemetry.TelemetryRequestEntryContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Cenium.Framework.Telemetry.TelemetryRequestEntry"/> class.
            </summary>
            <param name="ctx">The context to record.</param>
        </member>
        <member name="P:Cenium.Framework.Telemetry.TelemetryRequestEntry.Uri">
            <summary>
            Gets the URI being called
            </summary>
        </member>
        <member name="P:Cenium.Framework.Telemetry.TelemetryRequestEntry.Method">
            <summary>
            Gets the request HTTP method.
            </summary>
        </member>
        <member name="T:Cenium.Framework.Threading.ICountdownEvent">
            <summary>
            Represents a synchronization primitive that is signaled when its count reaches zero
            </summary>
        </member>
        <member name="P:Cenium.Framework.Threading.ICountdownEvent.CurrentCount">
            <summary>
            Gets the number of remaining signals required to set the event.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Threading.ICountdownEvent.Signal">
            <summary>
            Registers a signal with the ICountdownEvent, decrementing the value of CurrentCount.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Threading.ICountdownEvent.Wait">
            <summary>
            Blocks the current thread until the CountdownEvent is set.
            </summary>
        </member>
        <member name="T:Cenium.Framework.Threading.ILockFactory">
            <summary>
            Defines the contract for classes that implements the creation of locks and wait handles
            </summary>
        </member>
        <member name="M:Cenium.Framework.Threading.ILockFactory.CreateReaderWriterLock">
            <summary>
            Creates an IReaderWriterLock instance
            </summary>
            <returns>an IReaderWriterLock instance</returns>
        </member>
        <member name="M:Cenium.Framework.Threading.ILockFactory.CreateCountdownEvent(System.Int32)">
            <summary>
            Creates an ICoundownEvent instance
            </summary>
            <param name="count">The number of signals initially required to set the countdown event</param>
            <returns>A new ICountdownEvent instance</returns>
        </member>
        <member name="T:Cenium.Framework.Threading.LockManager">
            <summary>
            Provides methods for creating locks and wait handles in a platform independent way
            </summary>
        </member>
        <member name="M:Cenium.Framework.Threading.LockManager.CreateReaderWriterLock">
            <summary>
            Creates and returns a new IReaderWriterLock instance
            </summary>
            <returns>a new IReaderWriterLock instance</returns>
        </member>
        <member name="M:Cenium.Framework.Threading.LockManager.CreateCountdownEvent(System.Int32)">
            <summary>
            Creates and returns a new ICountdownEvent instance
            </summary>
            <returns>a new ICountdownEvent instance</returns>
        </member>
        <member name="M:Cenium.Framework.Threading.LockManager.Register(Cenium.Framework.Threading.ILockFactory)">
            <summary>
            Register the lock factory to use when creating locks and wait handles
            </summary>
            <param name="factory">The factory instance to register</param>
        </member>
        <member name="T:Cenium.Framework.TypeConvertException">
            <summary>
            The exception that is thrown when a type conversion is invalid
            </summary>
            <seealso cref="T:Cenium.Framework.FrameworkException" />
        </member>
        <member name="T:Cenium.Framework.Xml.IXmlFactory">
            <summary>
            Provides a mechanism to load xml schemas and validate xml documents in a portable manner
            </summary>
        </member>
        <member name="M:Cenium.Framework.Xml.IXmlFactory.Load(System.IO.Stream)">
            <summary>
            Loads an XML Schema from the supplied stream.
            </summary>
            <param name="s">The stream to read</param>
            <returns>An XmlSchema object</returns>
        </member>
        <member name="M:Cenium.Framework.Xml.IXmlFactory.Validate(System.Xml.Linq.XDocument,System.Xml.Schema.XmlSchema)">
            <summary>
            Validates a document against a schema
            </summary>
            <param name="document">The document to validate</param>
            <param name="schema">The XmlSchema to validate against</param>
        </member>
        <member name="M:Cenium.Framework.Xml.IXmlFactory.LoadXslt(System.IO.Stream)">
            <summary>
            Load an XSL transformation from the supplied stream
            </summary>
            <param name="s">The stream to read</param>
            <returns>An IXsltProcessor instance</returns>
        </member>
        <member name="T:Cenium.Framework.Xml.IXsltProcessor">
            <summary>
            Defines the mechanism to do XSLT transformations
            </summary>
        </member>
        <member name="M:Cenium.Framework.Xml.IXsltProcessor.TransformToString(System.String)">
            <summary>
            Transforms the specified XML using the stylesheet
            </summary>
            <param name="xml">The XML to transform</param>
            <returns>The transformed XML as a string</returns>
        </member>
        <member name="T:Cenium.Framework.Xml.XmlManager">
            <summary>
            Contains helper methods to handle XML operations in a portable manner
            </summary>
        </member>
        <member name="M:Cenium.Framework.Xml.XmlManager.ReadXslt(System.IO.Stream)">
            <summary>
            Reads an XSLT from a stream and creates an XSLT processor
            </summary>
            <param name="stream">The stream to read the XSLT from</param>
            <returns>An <c>IXsltProcessor</c> instance</returns>
        </member>
        <member name="T:Cenium.Framework.Xml.XmlUtility">
            <summary>
            Contains helper methods for handling XML documents
            </summary>
        </member>
        <member name="T:Mathos.Parser.MathParser">
            <summary>
            This is a mathematical expression parser that allows you to perform calculations on string values.
            </summary>
        </member>
        <member name="P:Mathos.Parser.MathParser.OperatorList">
            <summary>
            All operators should be inside this property.
            The first operator is executed first, et cetera.
            An operator may only be ONE character.
            </summary>
        </member>
        <member name="P:Mathos.Parser.MathParser.OperatorAction">
            <summary>
            When adding a variable in the OperatorList property, you need to assign how that operator should work.
            </summary>
        </member>
        <member name="P:Mathos.Parser.MathParser.LocalFunctions">
            <summary>
            All functions that you want to define should be inside this property.
            </summary>
        </member>
        <member name="P:Mathos.Parser.MathParser.LocalVariables">
            <summary>
            All variables that you want to define should be inside this property.
            </summary>
        </member>
        <member name="P:Mathos.Parser.MathParser.CultureInfo">
            <summary>
            When converting the result from the Parse method or ProgrammaticallyParse method ToString(),
            please use this culture info.
            </summary>
        </member>
        <member name="M:Mathos.Parser.MathParser.#ctor(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the MathParser class, and optionally with
            predefined functions, operators, and variables.
            </summary>
            <param name="loadPreDefinedFunctions">This will load "abs", "cos", "cosh", "arccos", "sin", "sinh", "arcsin", "tan", "tanh", "arctan", "sqrt", "rem", "round"</param>
            <param name="loadPreDefinedOperators">This will load "%", "*", ":", "/", "+", "-", ">", "&lt;", "="</param>
            <param name="loadPreDefinedVariables">This will load "pi", "pi2", "pi05", "pi025", "pi0125", "pitograd", "piofgrad", "e", "phi", "major", "minor"</param>
        </member>
        <member name="M:Mathos.Parser.MathParser.Parse(System.String)">
            <summary>
            Enter the math expression in form of a string.
            </summary>
            <param name="mathExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Mathos.Parser.MathParser.Parse(System.Collections.ObjectModel.ReadOnlyCollection{System.String})">
            <summary>
            Enter the math expression in form of a list of tokens.
            </summary>
            <param name="mathExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Mathos.Parser.MathParser.ProgrammaticallyParse(System.String,System.Boolean,System.Boolean)">
             <summary>
             Enter the math expression in form of a string. You might also add/edit variables using "let" keyword.
             For example, "let sampleVariable = 2+2".
            
             Another way of adding/editing a variable is to type "varName := 20"
            
             Last way of adding/editing a variable is to type "let varName be 20"
             </summary>
             <param name="mathExpression"></param>
             <param name="correctExpression"></param>
             <param name="identifyComments"></param>
             <returns></returns>
        </member>
        <member name="M:Mathos.Parser.MathParser.GetTokens(System.String)">
            <summary>
            This will convert a string expression into a list of tokens that can be later executed by Parse or ProgrammaticallyParse methods.
            </summary>
            <param name="mathExpression"></param>
            <returns>A ReadOnlyCollection</returns>
        </member>
        <member name="M:Mathos.Parser.MathParser.Correction(System.String)">
            <summary>
            This will correct sqrt() and arctan() written in different ways only.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Mathos.Parser.MathParser.Lexer(System.String)">
            <summary>
            Tokenizes <paramref name="expr"/>.
            </summary>
            <param name="expr">The expression to tokenize.</param>
            <returns>The tokens.</returns>
        </member>
        <member name="T:System.Arrays">
            <summary>
            Contains helper methods and extensions for arrays
            </summary>
        </member>
        <member name="M:System.Arrays.Empty``1">
            <summary>
            Returns an empty array of T.
            </summary>
            <typeparam name="T">The type to return an empty array for</typeparam>
            <returns>An empty array of type T</returns>
        </member>
        <member name="T:System.AsyncLazy`1">
            <summary>
            Provides support for lazy asynchronous initialization.
            </summary>
            <typeparam name="T">The type of object that is being lazily initialized.</typeparam>
        </member>
        <member name="M:System.AsyncLazy`1.#ctor(System.Func{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:System.AsyncLazy`1"/> class. When lazy initialization occurs, the specified initialization function is used.
            </summary>
            <param name="valueFactory">The delegate that is invoked to produce the lazily initialized value when it is needed.</param>
        </member>
        <member name="M:System.AsyncLazy`1.#ctor(System.Func{System.Threading.Tasks.Task{`0}})">
            <summary>
            Initializes a new instance of the <see cref="T:System.AsyncLazy`1"/> class. When lazy initialization occurs, the specified initialization function is used.
            </summary>
            <param name="taskFactory">The delegate that is invoked to produce the lazily initialized value when it is needed.</param>
        </member>
        <member name="M:System.AsyncLazy`1.GetAwaiter">
            <summary>
            Gets an awaiter used to await this AsyncLazy
            </summary>
            <returns>An awaiter instance.</returns>
        </member>
        <member name="T:System.Chars">
            <summary>
            Predefined constants for much used character symbols
            </summary>
        </member>
        <member name="T:System.Collections.Generic.CollectionUtility">
             <summary>
            
             </summary>
        </member>
        <member name="T:System.Collections.Generic.EmptyReadOnlyCollection`1">
            <summary>
            Represents an empty read only collection
            </summary>
            <typeparam name="T">The type of the elements</typeparam>
            <seealso cref="T:System.Collections.Generic.IReadOnlyCollection`1" />
        </member>
        <member name="M:System.Collections.Generic.EmptyReadOnlyCollection`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Generic.EmptyReadOnlyCollection`1"/> class.
            </summary>
        </member>
        <member name="P:System.Collections.Generic.EmptyReadOnlyCollection`1.Count">
            <summary>
            Gets the number of elements in the collection.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.EmptyReadOnlyCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <remarks>
            The <c>EmptyReadOnlyCollection</c> class will always return an empty enumerator.
            </remarks>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:System.Collections.Generic.EmptyReadOnlyCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:System.Collections.Generic.DictionaryExtension">
            <summary>
            Contains extension methods for the Dictionary&lt;TKey, TValue&gt; class
            </summary>
        </member>
        <member name="M:System.Collections.Generic.DictionaryExtension.TryGetValue``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            Gets the value associated with the specified key. This is a shortform of the ordinary TryGetValue method.
            </summary>
            <typeparam name="TKey">The key type</typeparam>
            <typeparam name="TValue">The value type</typeparam>
            <param name="dictionary">The dictionary instance to locate the value for</param>
            <param name="key">The key of the value to get</param>
            <returns>The element associated with the key, or default(TValue) if the item does not exist</returns>
        </member>
        <member name="M:System.Collections.Generic.DictionaryExtension.SetOrAdd``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)">
            <summary>
            Sets or adds a value to a dictionary.
            </summary>
            <typeparam name="TKey">The key type</typeparam>
            <typeparam name="TValue">The value type</typeparam>
            <param name="dictionary">The dictionary instance to set or add a value to</param>
            <param name="key">The key for the item to add</param>
            <param name="value">The value for the item to add</param>
        </member>
        <member name="T:System.Collections.Generic.NamespaceDoc">
            <summary>
            Provides extensions to classes in the System.Collections.Generic namespace
            </summary>
        </member>
        <member name="T:System.ComponentModel.Events">
            <summary>
            Contains common methods and fields for events and event handling
            </summary>
        </member>
        <member name="F:System.ComponentModel.Events.PropertyChangedEventArgsEmpty">
            <summary>
            Provides a value to use with property changed events that do not have event data.
            </summary>
        </member>
        <member name="T:System.DateRange">
            <summary>
            This value type represents a range between two dates
            </summary>
            <seealso cref="T:System.IComparable" />
            <seealso cref="!:System.IComparable&lt;Cenium.Framework.System.DateRange&gt;" />
            <seealso cref="!:System.IEquatable&lt;Cenium.Framework.System.DateRange&gt;" />
        </member>
        <member name="F:System.DateRange.Empty">
            <summary>
            Gets an empty DateRange instance
            </summary>
        </member>
        <member name="M:System.DateRange.#ctor(System.DateTime,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:System.DateRange"/> struct.
            </summary>
            <param name="startDate">The start date.</param>
            <param name="endDate">The end date.</param>
        </member>
        <member name="P:System.DateRange.StartDate">
            <summary>
            Gets the start date of the date range.
            </summary>
        </member>
        <member name="P:System.DateRange.EndDate">
            <summary>
            Gets the end date of the date range.
            </summary>
        </member>
        <member name="P:System.DateRange.DaysBetween">
            <summary>
            Gets number of days between the start and the end date
            </summary>
            <value>Number of days between the start and the end date.</value>
        </member>
        <member name="M:System.DateRange.CompareTo(System.DateRange)">
            <summary>
            Compares the current DateRange with another DateRange
            </summary>
            <param name="other">A DateRange to compare with this DateRange.</param>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other" /> parameter.Zero This object is equal to <paramref name="other" />. Greater than zero This object is greater than <paramref name="other" />.
            </returns>
        </member>
        <member name="M:System.DateRange.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes <paramref name="obj" /> in the sort order. Zero This instance occurs in the same position in the sort order as <paramref name="obj" />. Greater than zero This instance follows <paramref name="obj" /> in the sort order.
            </returns>
        </member>
        <member name="M:System.DateRange.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.DateRange.Equals(System.DateRange)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:System.DateRange.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:System.DateRange.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:System.DateRange.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the dates in the DateRange instance.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the dates.</returns>
        </member>
        <member name="M:System.DateRange.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the dates in the DateRange instance.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the dates.</returns>
        </member>
        <member name="P:System.DateRange.IsValid">
            <summary>
            Returns true if the date range is valid (i.e. end date is same as or greater than start date).
            </summary>
            <value>
              <c>true</c> if this instance is valid; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:System.DateRange.Equals(System.DateRange,System.DateRange)">
            <summary>
            Returns a value indicating whether two DateRange instances have the same date and time value
            </summary>
            <param name="dr1">The first object to compare.</param>
            <param name="dr2">The second object to compare.</param>
            <returns>true if the two values are equal; otherwise, false</returns>
        </member>
        <member name="M:System.DateRange.Compare(System.DateRange,System.DateRange)">
            <summary>
            Compares two <c>DateRange</c> values, returning an integer that indicates their relationship
            </summary>
            <param name="dr1">The first DateRange value to compare.</param>
            <param name="dr2">The second DateRange value to compare.</param>
            <returns>Returns 0 if the values are equal, 1 if first value is larger than the second value and -1 if the first value is less than the second value.</returns>
        </member>
        <member name="M:System.DateRange.GetCurrentWeek">
            <summary>
            Gets the <c>DateRange</c> instance for the current week
            </summary>
            <returns>The <c>DateRange</c> instance for the current week.</returns>
        </member>
        <member name="M:System.DateRange.GetPreviousWeek">
            <summary>
            Gets the <c>DateRange</c> instance for the previous week
            </summary>
            <returns>The <c>DateRange</c> instance for the previous week.</returns>
        </member>
        <member name="M:System.DateRange.GetCurrentMonth">
            <summary>
            Gets the <c>DateRange</c> instance for the current month
            </summary>
            <returns>The <c>DateRange</c> instance for the current month.</returns>
        </member>
        <member name="M:System.DateRange.GetPreviousMonth">
            <summary>
            Gets the <c>DateRange</c> instance for the previous month
            </summary>
            <returns>The <c>DateRange</c> instance for the month month.</returns>
        </member>
        <member name="M:System.DateRange.GetLastDays(System.Int32,System.Boolean)">
            <summary>
            Gets the <c>DateRange</c> instance for the specified number of days up to today (or up to yesterday if the includeToday argument is false).
            </summary>
            <param name="days">Number of days to include.</param>
            <param name="includeToday">If the current day should be included.</param>
            <returns>The <c>DateRange</c> instance for specified number of days up to today.</returns>
        </member>
        <member name="T:System.DayOfMonthFlags">
            <summary>
            Contains methods to handle day of month flags
            </summary>
        </member>
        <member name="F:System.DayOfMonthFlags.Last">
            <summary>
            Represents the last day of month
            </summary>
        </member>
        <member name="F:System.DayOfMonthFlags.None">
            <summary>
            Represents no days set
            </summary>
        </member>
        <member name="M:System.DayOfMonthFlags.GetFlagForDay(System.Int32)">
            <summary>
            Gets the flag value for a specified day. Day must be a value between 0 and 32, where 32 indicates 0 indicates none and 32 indicates last day.
            </summary>
            <param name="day">The day to get a flag value for</param>
            <returns>A flag value representing the specified day.</returns>
        </member>
        <member name="M:System.DayOfMonthFlags.HasFlag(System.Int64,System.Int32)">
            <summary>
            Determines whether a day bit field is set
            </summary>
            <param name="value">The value to check</param>
            <param name="day">The day to check for</param>
            <returns><c>true</c> if the specified day is set; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:System.ExceptionUtility">
            <summary>
            Contains utility and extension methods for <c>Exception</c>
            </summary>
        </member>
        <member name="T:System.InvalidTypeParameterException">
            <summary>
            The exception that is thrown when one of the type parameter provided to a method or class is not valid
            </summary>
            <seealso cref="T:System.ArgumentException" />
        </member>
        <member name="M:System.InvalidTypeParameterException.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:System.InvalidTypeParameterException"/> class.
            </summary>
            <param name="typeArg">The type argument.</param>
        </member>
        <member name="M:System.InvalidTypeParameterException.#ctor(System.Type,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.InvalidTypeParameterException"/> class.
            </summary>
            <param name="typeArg">The type argument.</param>
            <param name="message">The message.</param>
            <param name="typeArgumentName">Name of the type argument.</param>
        </member>
        <member name="T:System.Linq.LinqHelper">
            <summary>
            Contains helper methods for LINQ expressions
            </summary>
        </member>
        <member name="M:System.Linq.LinqHelper.ToHashSet``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Creates a System.Collections.Generic.HashSet&lt;TKey&gt; from an System.Collections.Generic.IEnumerable&lt;TSource&gt; according to specified key selector.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <typeparam name="TKey">The type of the key returned by keySelector.</typeparam>
            <param name="source">System.Collections.Generic.IEnumerable&lt;TSource&gt; to create a System.Collections.Generic.HashSet&lt;TKey&gt; from.</param>
            <param name="keySelector">A function to extract a key from each element.</param>
            <param name="comparer">An System.Collections.Generic.IEqualityComparer&lt;TKey&gt; to compare keys.</param>
            <returns>A System.Collections.Generic.HashSet&lt;TKey&gt; that contains values of type TElement selected from the input sequence.</returns>
        </member>
        <member name="T:System.Linq.Dynamic.DynamicExtensions">
            <summary>
            Provides LINQ extension methods for dynamic LINQ
            </summary>
        </member>
        <member name="M:System.Linq.Dynamic.DynamicExtensions.Where``1(System.Linq.IQueryable{``0},System.String,System.Object[])">
            <summary>
            Filters a sequence of values based on a predicate
            </summary>
            <typeparam name="T">The type of the elements of source</typeparam>
            <param name="source">An IQueryable&lt;T&gt; to filter</param>
            <param name="predicate">A function to test each element for a condition, expressed as a string</param>
            <param name="values">Values to use in the predicate</param>
            <returns>An IQueryable&lt;T&gt; that contains elements from the input sequence that satisfy the condition.</returns>
        </member>
        <member name="M:System.Linq.Dynamic.DynamicExtensions.Where(System.Linq.IQueryable,System.String,System.Object[])">
            <summary>
            Filters a sequence of values based on a predicate
            </summary>
            <param name="source">An IQueryable to filter</param>
            <param name="predicate">A function to test each element for a condition, expressed as a string</param>
            <param name="values">Values to use in the predicate</param>
            <returns>An IQueryable that contains elements from the input sequence that satisfy the condition.</returns>
        </member>
        <member name="M:System.Linq.Dynamic.DynamicExtensions.Select(System.Linq.IQueryable,System.String,System.Object[])">
            <summary>
            Projects each element of a sequence into a new form
            </summary>
            <param name="source">A sequence of values to invoke a transform function on</param>
            <param name="selector">A transform function to apply to each element</param>
            <param name="values">Values to use in the selector</param>
            <returns>An IQueryable  whose elements are the result of invoking the transform function on each element of source</returns>
        </member>
        <member name="M:System.Linq.Dynamic.DynamicExtensions.OrderBy``1(System.Linq.IQueryable{``0},System.String,System.Object[])">
            <summary>
            Sorts the elements of a sequence in ascending order
            </summary>
            <typeparam name="T">The type of the elements of source</typeparam>
            <param name="source">A sequence of values to order.</param>
            <param name="ordering">The ordering expression as a string</param>
            <param name="values">The values to use in ordering</param>
            <returns>A IQueryable&lt;T&gt; whose elements are sorted according to a key</returns>
        </member>
        <member name="M:System.Linq.Dynamic.DynamicExtensions.OrderBy(System.Linq.IQueryable,System.String,System.Object[])">
            <summary>
            Sorts the elements of a sequence in ascending order
            </summary>
            <param name="source">A sequence of values to order.</param>
            <param name="ordering">The ordering expression as a string</param>
            <param name="values">The values to use in ordering</param>
            <returns>A IQueryable whose elements are sorted according to a key</returns>
        </member>
        <member name="M:System.Linq.Dynamic.DynamicExtensions.Take(System.Linq.IQueryable,System.Int32)">
            <summary>
            Returns a specified number of contiguous elements from the start of a sequence
            </summary>
            <param name="source">The sequence to return elements from</param>
            <param name="count">The number of elements to return</param>
            <returns>An IQueryable that contains the specified number of elements from the start of the input sequence.</returns>
        </member>
        <member name="M:System.Linq.Dynamic.DynamicExtensions.Skip(System.Linq.IQueryable,System.Int32)">
            <summary>
            Bypasses a specified number of elements in a sequence and then returns the remaining elements
            </summary>
            <param name="source">The IQueryable to return elements from</param>
            <param name="count">The number of elements to skip before returning the remaining elements</param>
            <returns>An IQueryable that contains the elements that occur after the specified index in the input sequence</returns>
        </member>
        <member name="M:System.Linq.Dynamic.DynamicExtensions.GroupBy(System.Linq.IQueryable,System.String,System.String,System.Object[])">
            <summary>
            Groups the elements of a sequence
            </summary>
            <param name="source">An IQueryable whose elements to group</param>
            <param name="keySelector">A function to extract the key for each element, expressed as a string</param>
            <param name="elementSelector">A function to map each source element to an element</param>
            <param name="values">The values to use in grouping</param>
            <returns>A collection of elements of type IQueryable where each element represents a projection over a group and its key</returns>
        </member>
        <member name="M:System.Linq.Dynamic.DynamicExtensions.Any(System.Linq.IQueryable)">
            <summary>
            Determines whether a sequence contains any elements.
            </summary>
            <param name="source">The IQueryable to check for emptiness.</param>
            <returns>true if the source sequence contains any elements; otherwise, false</returns>
        </member>
        <member name="M:System.Linq.Dynamic.DynamicExtensions.Count(System.Linq.IQueryable)">
            <summary>
            Returns the number of elements in a sequence
            </summary>
            <param name="source">A sequence that contains elements to be counted</param>
            <returns>The number of elements in the input sequence</returns>
        </member>
        <member name="M:System.Linq.Dynamic.DynamicExtensions.LongCount(System.Linq.IQueryable)">
            <summary>
            Returns the number of elements in a sequence
            </summary>
            <param name="source">A sequence that contains elements to be counted</param>
            <returns>The number of elements in the input sequence</returns>
        </member>
        <member name="T:System.GuidExtension">
            <summary>
            Contains static methods that are extensions to Guid types
            </summary>
        </member>
        <member name="M:System.GuidExtension.IsEmpty(System.Guid)">
            <summary>
            Returns true if the Guid consist of all zero's; otherwise false
            </summary>
            <param name="guid">The Guid instance to check.</param>
            <returns>true if the Guid consist of all zero's; otherwise false</returns>
        </member>
        <member name="T:System.EnumExtension">
            <summary>
            Contains static methods that are extensions to Enum types
            </summary>
        </member>
        <member name="M:System.EnumExtension.TryParse``1(System.String,``0)">
            <summary>
            Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.
            </summary>
            <typeparam name="T">The enumeration type to which to convert value.</typeparam>
            <param name="value">The string representation of the enumeration name or underlying value to convert.</param>
            <param name="defaultValue">The default value to use if the parse operation fails</param>
            <returns>When this method returns, result contains an object of type T whose value is represented by value if the parse operation succeeds. If the parse operation fails, the defaulValue argument is returned</returns>
        </member>
        <member name="T:System.ArrayExtension">
            <summary>
            Contains static methods that are extensions to arrays
            </summary>
        </member>
        <member name="M:System.ArrayExtension.ConvertArray``1(System.Object[])">
            <summary>
            Converts an object array into an array of a specified type
            </summary>
            <typeparam name="T">The array type to convert the array into</typeparam>
            <param name="array">The array to convert</param>
            <returns>A strongly typed array</returns>
        </member>
        <member name="M:System.ArrayExtension.Initialize``1(``0[])">
            <summary>
            Initializes every element of the value-type Array by calling the default constructor of the type
            </summary>
            <typeparam name="T">The array type</typeparam>
            <param name="array">The array to initialize</param>
        </member>
        <member name="M:System.ArrayExtension.ToHex(System.Byte[])">
            <summary>
            Returns a hex string representation of an array of bytes.
            </summary>
            <param name="value">The array of bytes.</param>
            <returns>A hex string representation of the array of bytes.</returns>
        </member>
        <member name="T:System.DateExtension">
            <summary>
            Contains static methods that serves as extensions to DateTime
            </summary>
        </member>
        <member name="M:System.DateExtension.ConvertToTimezone(System.TimeZoneInfo,System.DateTime)">
            <summary>
            Converts a <c>DateTime</c> from local timezone to the specified timezone
            </summary>
            <param name="tz">The timezone to convert to</param>
            <param name="dt">The DateTime to convert</param>
            <returns>The converted DateTime</returns>
        </member>
        <member name="M:System.DateExtension.GetTimezoneOffsetHours(System.TimeZoneInfo)">
            <summary>
            Gets the offset in hours from the local timezone
            </summary>
            <param name="tz">The timezone to calculate offset for</param>
            <returns>The offset in hours</returns>
        </member>
        <member name="M:System.DateExtension.ToRelativeDateTime(System.DateTime,System.RelativeDateFormat)">
            <summary>
            Converts a <c>DateTime</c> to a relative date.
            </summary>
            <param name="dt">The <c>DateTime</c> to convert.</param>
            <returns>A string representation of the datetime relative to the system time.</returns>
        </member>
        <member name="T:System.Net.NamespaceDoc">
            <summary>
            Contains extension methods to various classes in the System.Net namespace
            </summary>
        </member>
        <member name="T:System.Net.WebExceptionExtension">
            <summary>
            Provides extension methods to the WebException class.
            </summary>
        </member>
        <member name="M:System.Net.WebExceptionExtension.IsConnectionError(System.Net.WebException)">
            <summary>
            Returns true if the error is related to a connection problem
            </summary>
            <param name="ex">The WebException instance</param>
            <returns>true if the error is related to a connection problem, otherwise false</returns>
        </member>
        <member name="M:System.Net.WebExceptionExtension.IsProtocolError(System.Net.WebException)">
            <summary>
            Returns true if the error is related to a protocol problem
            </summary>
            <param name="ex">The WebException instance</param>
            <returns>true if the error is related to a protocol problem, otherwise false</returns>
        </member>
        <member name="M:System.Net.WebExceptionExtension.GetProtocolStatusCode(System.Net.WebException)">
            <summary>
            Gets the status code returned by the HTTP protocol
            </summary>
            <param name="ex">The WebException instance</param>
            <returns>the status code returned by the HTTP protocol</returns>
        </member>
        <member name="M:System.Net.WebExceptionExtension.GetErrorMessage(System.Net.WebException)">
            <summary>
            Creates friendly error messages based on the WebException error
            </summary>
            <param name="ex">The WebException instance</param>
            <returns>Error message as a string</returns>
        </member>
        <member name="T:System.Reflection.AssemblyExtensions">
            <summary>
            Contains static methods that are extensions to the Assembly class
            </summary>
        </member>
        <member name="M:System.Reflection.AssemblyExtensions.GetTypesByAttribute(System.Reflection.Assembly,System.Type,System.Boolean)">
            <summary>
            Gets the types defined in this assembly that are annotated with the specified attribute type.
            </summary>
            <param name="assembly">The assembly to inspect</param>
            <param name="attributeType">The type of attribute to search for.</param>
            <param name="inherit">true to search this member's inheritance chain to find the attributes; otherwise, false.</param>
            <returns>An array that contains all the types that are defined in this assembly annotated with the specified attribute type</returns>
        </member>
        <member name="M:System.Reflection.AssemblyExtensions.GetTypesByAttribute``1(System.Reflection.Assembly,System.Boolean)">
            <summary>
            Gets the types defined in this assembly that are annotated with the specified attribute type.
            </summary>
            <param name="assembly">The assembly to inspect</param>
            <typeparam name="T">The type of attribute to search for.</typeparam>
            <param name="inherit">true to search this member's inheritance chain to find the attributes; otherwise, false.</param>
            <returns>An array that contains all the types that are defined in this assembly annotated with the specified attribute type</returns>
        </member>
        <member name="M:System.Reflection.AssemblyExtensions.GetTypesByInterface(System.Reflection.Assembly,System.Type)">
            <summary>
            Returns the types that implements a specified interface
            </summary>
            <param name="assembly">The assembly to inspect</param>
            <param name="interfaceType">The interface the classes must implement</param>
            <returns></returns>
        </member>
        <member name="M:System.Reflection.AssemblyExtensions.GetAssemblyPath(System.Reflection.Assembly)">
            <summary>
            Gets the file path of the assembly
            </summary>
            <param name="assembly">The assembly to inspect</param>
            <returns>The file path of the assembly</returns>
        </member>
        <member name="M:System.Reflection.AssemblyExtensions.GetFullAssemblyPath(System.Reflection.Assembly)">
            <summary>
            Returns the full path for an assembly
            </summary>
            <param name="assembly">The assembly to get the path for</param>
            <returns>The full path to the assembly</returns>
        </member>
        <member name="M:System.Reflection.AssemblyExtensions.GetLibraryName(System.Reflection.Assembly)">
            <summary>
            Gets the filename of the assembly without the path
            </summary>
            <param name="assembly">The assembly to inspect</param>
            <returns>The filename for the assembly</returns>
        </member>
        <member name="M:System.Reflection.AssemblyExtensions.GetCustomAssemblyAttribute``1(System.Reflection.Assembly)">
            <summary>
            Returns a assembly level attribute if it is defined within the assembly, or null if not found
            </summary>
            <typeparam name="T">The attribute type to find</typeparam>
            <param name="assembly">The assembly to inspect</param>
            <returns>The attribute type if found, otherwise null</returns>
        </member>
        <member name="M:System.Reflection.AssemblyExtensions.GetCustomAssemblyAttributes``1(System.Reflection.Assembly)">
            <summary>
            Gets the custom attributes of the specified type for this assembly
            </summary>
            <typeparam name="T">The attribute type to locate</typeparam>
            <param name="assembly">The assembly instance to locate the attributes within</param>
            <returns>An array that contains the custom attributes for this assembly</returns>
        </member>
        <member name="M:System.Reflection.AssemblyExtensions.GetComponentName(System.Reflection.Assembly)">
            <summary>
            Returns the component name that an assembly belongs to, or null if the assembly is missing the ComponentAttribute annotation
            </summary>
            <param name="assembly">The assembly to inspect</param>
            <returns>The component name for an assembly</returns>
        </member>
        <member name="T:System.Reflection.NamespaceDoc">
            <summary>
            Contains extension methods to various classes in the System.Reflection namespace
            </summary>
        </member>
        <member name="T:System.Reflection.TypeExtensions">
            <summary>
            Contains extension methods for the <c>Type</c> class
            </summary>
        </member>
        <member name="M:System.Reflection.TypeExtensions.IsStringType(System.Type)">
            <summary>
            Determines whether the type is a string type
            </summary>
            <param name="type">The type to check</param>
            <returns>True if the type is a string type; otherwise false</returns>
        </member>
        <member name="M:System.Reflection.TypeExtensions.IsNumericIntType(System.Type)">
            <summary>
            Determines whether the type is an integer type (byte, short, int, long)
            </summary>
            <param name="type">The type to check</param>
            <returns>True if the type is an integer type; otherwise false</returns>
        </member>
        <member name="M:System.Reflection.TypeExtensions.IsNumericDecimalType(System.Type)">
            <summary>
            Determines whether the type is an decimal or floating point type (float, double, decimal)
            </summary>
            <param name="type">The type to check</param>
            <returns>True if the type is a decimal type; otherwise false</returns>
        </member>
        <member name="M:System.Reflection.TypeExtensions.IsGuidType(System.Type)">
            <summary>
            Determines whether the type is an Guid type
            </summary>
            <param name="type">The type to check</param>
            <returns>True if the type is a Guid type; otherwise false</returns>
        </member>
        <member name="M:System.Reflection.TypeExtensions.IsBoolType(System.Type)">
            <summary>
            Determines whether the type is an bool type
            </summary>
            <param name="type">The type to check</param>
            <returns>True if the type is a bool type; otherwise false</returns>
        </member>
        <member name="M:System.Reflection.TypeExtensions.IsDateTimeType(System.Type)">
            <summary>
            Determines whether the type is an DateTime type
            </summary>
            <param name="type">The type to check</param>
            <returns>True if the type is a DateTime type; otherwise false</returns>
        </member>
        <member name="M:System.Reflection.TypeExtensions.IsNullableDateTimeType(System.Type)">
            <summary>
            Determines if a Type represents a DateTime? type
            </summary>
            <param name="type">The type to determine</param>
            <returns>true if the type is a DateTime? type; otherwise false.</returns>
        </member>
        <member name="M:System.Reflection.TypeExtensions.IsTimeSpanType(System.Type)">
            <summary>
            Determines whether the type is a TimeSpan type
            </summary>
            <param name="type">The type to check</param>
            <returns>True if the type is a TimeSpan type; otherwise false</returns>
        </member>
        <member name="M:System.Reflection.TypeExtensions.IsNullableType(System.Type)">
            <summary>
            Determines whether the type is a nullable type (Nullable&lt;T&gt;)/>
            </summary>
            <param name="type">The type to check</param>
            <returns>True if the type is a Nullable type; otherwise false</returns>
        </member>
        <member name="M:System.Reflection.TypeExtensions.IsBinaryType(System.Type)">
            <summary>
            Determines whether the type is a binary type (byte array)
            </summary>
            <param name="type">The type to check</param>
            <returns>True if the type is a byte array type; otherwise false</returns>
        </member>
        <member name="M:System.Reflection.TypeExtensions.GetValueTypeBaseType(System.Type)">
            <summary>
            Gets the base type for a value type.
            </summary>
            <remarks>
            If the value type is a Nullable the base type is returned; otherwise the type argument is returned.
            </remarks>
            <param name="type">The type to check</param>
            <returns>The base type for the argument type</returns>
        </member>
        <member name="M:System.Reflection.Types.IsGuidType(System.Type,System.Boolean)">
            <summary>
            Determines if a Type represents a Guid type
            </summary>
            <param name="type">The type to determine</param>
            <param name="includeNullable">Whether to include the nullable type.</param>
            <returns>true if the type is a Guid type; otherwise false.</returns>
        </member>
        <member name="M:System.Reflection.Types.IsDateTimeType(System.Type,System.Boolean)">
            <summary>
            Determines if a Type represents a DateTime type
            </summary>
            <param name="type">The type to determine</param>
            <param name="includeNullable">Whether to include the nullable type.</param>
            <returns>true if the type is a DateTime type; otherwise false.</returns>
        </member>
        <member name="M:System.Reflection.Types.IsNullableDateTimeType(System.Type)">
            <summary>
            Determines if a Type represents a DateTime? type
            </summary>
            <param name="type">The type to determine</param>
            <returns>true if the type is a DateTime? type; otherwise false.</returns>
        </member>
        <member name="M:System.Reflection.Types.IsTimeSpanType(System.Type,System.Boolean)">
            <summary>
            Determines if a Type represents a TimeSpan type
            </summary>
            <param name="type">The type to determine</param>
            <param name="includeNullable">Whether to include the nullable type.</param>
            <returns>true if the type is a TimeSpan type; otherwise false.</returns>
        </member>
        <member name="M:System.Reflection.Types.IsStringType(System.Type)">
            <summary>
            Determines if a Type represents a string type
            </summary>
            <param name="type">The type to determine</param>
            <returns>true if the type is a string type; otherwise false.</returns>
        </member>
        <member name="M:System.Reflection.Types.IsBoolType(System.Type,System.Boolean)">
            <summary>
            Determines if a Type represents a bool type
            </summary>
            <param name="type">The type to determine</param>
            <param name="includeNullable">Whether to include the nullable type.</param>
            <returns>true if the type is a bool type; otherwise false.</returns>
        </member>
        <member name="M:System.Reflection.Types.IsNumericIntegerType(System.Type,System.Boolean)">
            <summary>
            Determines if a Type represents an integer type (byte, short, int, long)
            </summary>
            <param name="type">The type to determine</param>
            <param name="includeNullable">Whether to include the nullable type.</param>
            <returns>true if the type is an integer type; otherwise false.</returns>
        </member>
        <member name="M:System.Reflection.Types.IsNumericDecimalType(System.Type,System.Boolean)">
            <summary>
            Determines if a Type represents a decimal type (float, double, decimal)
            </summary>
            <param name="type">The type to determine</param>
            <param name="includeNullable">Whether to include the nullable type.</param>
            <returns>true if the type is a decimal type; otherwise false.</returns>
        </member>
        <member name="M:System.Reflection.Types.IsDecimalType(System.Type,System.Boolean)">
            <summary>
            Determines if a Type represents a decimal
            </summary>
            <param name="type">The type to determine</param>
            <param name="includeNullable">Whether to include the nullable type.</param>
            <returns>true if the type is a decimal type; otherwise false.</returns>
        </member>
        <member name="T:System.RelativeDateFormat">
            <summary>
            Specifies possible formatting options for relative dates
            </summary>
        </member>
        <member name="T:System.RelativeDateTimeType">
            <summary>
            Represents a calculation type to get a date relative to todays date
            </summary>
        </member>
        <member name="F:System.RelativeDateTimeType.None">
            <summary>
            No calculation is performed
            </summary>
        </member>
        <member name="F:System.RelativeDateTimeType.Today">
            <summary>
            Gets todays date
            </summary>
        </member>
        <member name="F:System.RelativeDateTimeType.Yesterday">
            <summary>
            Gets yesterdays date
            </summary>
        </member>
        <member name="F:System.RelativeDateTimeType.StartOfWeek">
            <summary>
            Gets the start of the week date
            </summary>
        </member>
        <member name="F:System.RelativeDateTimeType.StartOfMonth">
            <summary>
            Gets the start of the month date
            </summary>
        </member>
        <member name="F:System.RelativeDateTimeType.StartOfYear">
            <summary>
            Gets the start of the year date
            </summary>
        </member>
        <member name="F:System.RelativeDateTimeType.OneYearAgo">
            <summary>
            Gets todays date one year ago
            </summary>
        </member>
        <member name="T:System.Resources.ResourceFolder">
            <summary>
            Represents a folder of embedded resources
            </summary>
        </member>
        <member name="M:System.Resources.ResourceFolder.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Resources.ResourceFolder"/> class.
            </summary>
            <param name="assemblyType">A type in the assembly that contains the resource folder.</param>
            <param name="path">The folder path.</param>
        </member>
        <member name="M:System.Resources.ResourceFolder.#ctor(System.Reflection.Assembly,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Resources.ResourceFolder"/> class.
            </summary>
            <param name="assembly">The assembly that contains the resource folder.</param>
            <param name="path">The folder path.</param>
        </member>
        <member name="P:System.Resources.ResourceFolder.Assembly">
            <summary>
            Gets the assembly where the folder resides
            </summary>
        </member>
        <member name="P:System.Resources.ResourceFolder.Path">
            <summary>
            Gets the path for the folder where the resources reside.
            </summary>
        </member>
        <member name="M:System.Resources.ResourceFolder.GetResources(System.Func{System.String,System.Boolean})">
            <summary>
            Gets the resources for the folder. This includes any sub-folders.
            </summary>
            <param name="filter">A function that returns true if the resource should be included. This may be null.</param>
            <returns>A read-only collection of resources.</returns>
        </member>
        <member name="T:System.Runtime.Serialization.DataContractSerializerExtension">
            <summary>
            Provides extension methods to the DataContractSerializer class
            </summary>
        </member>
        <member name="M:System.Runtime.Serialization.DataContractSerializerExtension.Deserialize(System.Runtime.Serialization.DataContractSerializer,System.String)">
            <summary>
            Extension method that deserialize a string
            </summary>
            <param name="serializer">The DataContractSerializer to use</param>
            <param name="value">The value to deserialize</param>
            <returns>The deserialized object</returns>
        </member>
        <member name="M:System.Runtime.Serialization.DataContractSerializerExtension.Serialize(System.Runtime.Serialization.DataContractSerializer,System.Object)">
            <summary>
            Extension method that serializes an object graph into a string
            </summary>
            <param name="serializer">The DataContractSerializer to use</param>
            <param name="value">The value to serialize</param>
            <returns>The object graph represented as a string</returns>
        </member>
        <member name="M:System.Runtime.Serialization.DataContractSerializerExtension.Deserialize(System.Runtime.Serialization.Json.DataContractJsonSerializer,System.String)">
            <summary>
            Extension method that deserialize a string
            </summary>
            <param name="serializer">The DataContractJsonSerializer to use</param>
            <param name="value">The value to deserialize</param>
            <returns>The deserialized object</returns>
        </member>
        <member name="M:System.Runtime.Serialization.DataContractSerializerExtension.Serialize(System.Runtime.Serialization.Json.DataContractJsonSerializer,System.Object)">
            <summary>
            Extension method that serializes an object graph into a string
            </summary>
            <param name="serializer">The DataContractSerializer to use</param>
            <param name="value">The value to serialize</param>
            <returns>The object graph represented as a JSON string</returns>
        </member>
        <member name="T:System.DayOfWeekFlags">
            <summary>
            Specifies one or more days of a week
            </summary>
        </member>
        <member name="F:System.DayOfWeekFlags.Sunday">
            <summary>
            Indicates Sunday
            </summary>
        </member>
        <member name="F:System.DayOfWeekFlags.Monday">
            <summary>
            Indicates Monday
            </summary>
        </member>
        <member name="F:System.DayOfWeekFlags.Tuesday">
            <summary>
            Indicates Tuesday
            </summary>
        </member>
        <member name="F:System.DayOfWeekFlags.Wednesday">
            <summary>
            Indicates Wednesday
            </summary>
        </member>
        <member name="F:System.DayOfWeekFlags.Thursday">
            <summary>
            Indicates Thursday
            </summary>
        </member>
        <member name="F:System.DayOfWeekFlags.Friday">
            <summary>
            Indicates Friday
            </summary>
        </member>
        <member name="F:System.DayOfWeekFlags.Saturday">
            <summary>
            Indicates Saturday
            </summary>
        </member>
        <member name="F:System.DayOfWeekFlags.All">
            <summary>
            Indicates all days set
            </summary>
        </member>
        <member name="F:System.DayOfWeekFlags.None">
            <summary>
            Indicates no days set
            </summary>
        </member>
        <member name="T:System.MonthFlags">
            <summary>
            Specifies one or more months in a year
            </summary>
        </member>
        <member name="F:System.MonthFlags.January">
            <summary>
            Indicates January
            </summary>
        </member>
        <member name="F:System.MonthFlags.February">
            <summary>
            Indicates February
            </summary>
        </member>
        <member name="F:System.MonthFlags.March">
            <summary>
            Indicates March
            </summary>
        </member>
        <member name="F:System.MonthFlags.April">
            <summary>
            Indicates April
            </summary>
        </member>
        <member name="F:System.MonthFlags.May">
            <summary>
            Indicates May
            </summary>
        </member>
        <member name="F:System.MonthFlags.June">
            <summary>
            Indicates June
            </summary>
        </member>
        <member name="F:System.MonthFlags.July">
            <summary>
            Indicates July
            </summary>
        </member>
        <member name="F:System.MonthFlags.August">
            <summary>
            Indicates August
            </summary>
        </member>
        <member name="F:System.MonthFlags.September">
            <summary>
            Indicates September
            </summary>
        </member>
        <member name="F:System.MonthFlags.October">
            <summary>
            Indicates October
            </summary>
        </member>
        <member name="F:System.MonthFlags.November">
            <summary>
            Indicates November
            </summary>
        </member>
        <member name="F:System.MonthFlags.December">
            <summary>
            Indicates December
            </summary>
        </member>
        <member name="F:System.MonthFlags.All">
            <summary>
            Indicates all months
            </summary>
        </member>
        <member name="F:System.MonthFlags.None">
            <summary>
            Indicates no month
            </summary>
        </member>
        <member name="T:System.StringExtension">
            <summary>
            Contains static methods that are extensions to the string class
            </summary>
        </member>
        <member name="M:System.StringExtension.EqualsAny(System.String,System.String[])">
            <summary>
            Determines whether this instance and any value of a string array have the same value
            </summary>
            <remarks>
            This method performs an ordinal (case-sensitive and culture-insensitive) comparison (StringComparison.Ordinal).
            </remarks>
            <param name="str">this instance</param>
            <param name="compare">The string array to compare to this instance</param>
            <returns>true if the string equals any value of the string array, otherwise false</returns>
        </member>
        <member name="M:System.StringExtension.EqualsAny(System.String,System.StringComparison,System.String[])">
            <summary>
            Determines whether this instance and any value of a string array have the same value.  A parameter specifies the culture, case, and sort rules used in the comparison
            </summary>
            <param name="str">this instance</param>
            <param name="comparisonType">One of the enumeration values that specifies how the strings will be compared</param>
            <param name="compare">The string array to compare to this instance</param>
            <returns>true if the string equals any value of the string array, otherwise false</returns>
        </member>
        <member name="M:System.StringExtension.TrimToLength(System.String,System.Int32)">
            <summary>
            Convenience method that truncates a string if it exceeds the specified length and removes any preceeding or trailing whitespaces.
            </summary>
            <param name="str">The string instance to trim and truncate</param>
            <param name="maxLength">The max length for the string</param>
            <returns>The string instance, trimmed and truncated. Note that null is returned if the string is empty or just contains whitespaces</returns>
        </member>
        <member name="M:System.StringExtension.ContainsAll(System.String,System.String[])">
            <summary>
            Returns a value indicating whether the all of the specified String objects occurs within this string
            </summary>
            <param name="str">The string instance</param>
            <param name="args">The strings to seek for</param>
            <returns>true if the value parameter occurs within this string, otherwise, false.</returns>
        </member>
        <member name="M:System.StringExtension.Pack(System.String[],System.String)">
            <summary>
            Packs an array of strings into a separated string
            </summary>
            <param name="strarr">The string array to pack</param>
            <param name="separator">The separator to add between elements</param>
            <returns>A packed string</returns>
        </member>
        <member name="M:System.StringExtension.Concatenate(System.String,System.String[])">
            <summary>
            Concatenates the elements of a specified String array. The elements are separated by the specified delimiter
            </summary>
            <param name="delimiter">The delimiter to add between each element</param>
            <param name="values">An array of string instances.</param>
            <returns>The concatenated elements of values</returns>
        </member>
        <member name="M:System.StringExtension.ToKeyValuePairs(System.String)">
            <summary>
            Converts a string into an enumerable of key-value pairs.
            </summary>
            <param name="str">The string to convert</param>
            <returns>An IEnumerable of KeyValuePair</returns>
        </member>
        <member name="M:System.StringExtension.EqualsOrdinalIgnoreCase(System.String,System.String)">
            <summary>
            Determines whether this string and a specified String object have the same value using ordinal sort rules and ignoring the case of the strings being compared.
            </summary>
            <param name="str">this instance</param>
            <param name="value">The string to compare to this instance.</param>
            <returns>true if the value of the value parameter is the same as this string; otherwise, false</returns>
        </member>
        <member name="M:System.StringExtension.EqualsIgnoreCase(System.String,System.String)">
            <summary>
            Determines whether this string and a specified String object have the same value using culture-sensitive sort rules, the current culture, and ignoring the case of the strings being compared.
            </summary>
            <param name="str">this instance</param>
            <param name="value">The string to compare to this instance.</param>
            <returns>true if the value of the value parameter is the same as this string; otherwise, false</returns>
        </member>
        <member name="M:System.StringExtension.StartsWithOrdinalIgnoreCase(System.String,System.String)">
            <summary>
            Determines whether the beginning of this string instance matches the specified string. This method uses the StringComparison.OrdinalIgnoreCase option
            </summary>
            <param name="str">This string instance.</param>
            <param name="value">The string to compare with.</param>
            <returns>true if this instance begins with value; otherwise, false.</returns>
        </member>
        <member name="M:System.StringExtension.Fill(System.String,System.Char)">
            <summary>
            Fills a string with the specificed fill character
            </summary>
            <param name="str">The string to fill</param>
            <param name="fillChar">The fill character.</param>
            <returns>A string instance where all original characters have been replaced by a fill character.</returns>
        </member>
        <member name="T:System.Strings">
            <summary>
            Predefined constants for much used string symbols
            </summary>
        </member>
        <member name="T:System.StringUtility">
            <summary>
            Contains helper methods for handling string operations and string collections
            </summary>
        </member>
        <member name="F:System.StringUtility.EmptyArray">
            <summary>
            Represents an empty string array
            </summary>
        </member>
        <member name="M:System.StringUtility.ToSingleLine(System.String,System.Int32)">
            <summary>
            Creates a single line string. This method will remove double spaces and any control characters.
            </summary>
            <param name="str">The string to convert to single line</param>
            <param name="maxLength">The maximum length.</param>
            <returns></returns>
        </member>
        <member name="T:System.NamespaceDoc">
            <summary>
            Contains extension methods to various classes in the System namespace
            </summary>
        </member>
        <member name="T:System.TypeExtensions">
            <summary>
            Contains static methods that are extensions to the Type class
            </summary>
        </member>
        <member name="M:System.TypeExtensions.GetMethods(System.Type,System.Type,System.Boolean)">
            <summary>
            Finds all methods in a class that have a given attribute type.
            </summary>
            <param name="classType">The type to inspect</param>
            <param name="attributeType">The attribute to search for</param>
            <param name="inherit">true to search this member's inheritance chain to find the attributes; otherwise, false.</param>
            <returns>An array of MethodInfo objects representing all the public methods that have the specified attribute</returns>
        </member>
        <member name="M:System.TypeExtensions.GetCustomMemberAttribute``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Returns an attribute for a member, or null if the attribute is not specified on the member
            </summary>
            <typeparam name="T">The attribute type to look for</typeparam>
            <param name="type">The member to inspect</param>
            <param name="inherit">true to search this member's inheritance chain to find the attributes; otherwise, false.</param>
            <returns>The attribute applied to this member, or null if the attribute was not found</returns>
        </member>
        <member name="M:System.TypeExtensions.GetCustomMemberAttributes``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Returns an array of attributes for a member, or null if the attribute is not specified on the member
            </summary>
            <typeparam name="T">The attribute type to look for</typeparam>
            <param name="type">The member to inspect</param>
            <param name="inherit">true to search this member's inheritance chain to find the attributes; otherwise, false.</param>
            <returns>The attributes applied to this member, or null if the attribute was not found</returns>
        </member>
        <member name="M:System.TypeExtensions.GetGenericArgumentType(System.Type)">
            <summary>
            Returns the generic argument type
            </summary>
            <param name="type">The generic type to inspect</param>
            <returns>The argument type</returns>
        </member>
        <member name="M:System.TypeExtensions.IsSimpleType(System.Type)">
            <summary>
            Returns true if the type is either a primitive type or one of string, decimal, byte[], DateTime, DateTimeOffset or Guid
            </summary>
            <param name="t">a Type instance</param>
            <returns>true if the type is a simple type, otherwise false</returns>
        </member>
        <member name="M:System.TypeExtensions.IsNullable(System.Type)">
            <summary>
            Returns true if the type is a nullable type, otherwise false
            </summary>
            <param name="t">The type to inspect</param>
            <returns>true if the type is nullable, otherwise false</returns>
        </member>
        <member name="M:System.TypeExtensions.GetDefault(System.Type)">
            <summary>
            Returns the default for a specific type
            </summary>
            <param name="type">The type instance</param>
            <returns>The default for a type</returns>
        </member>
        <member name="T:System.DayOccurrenceInMonthFlags">
            <summary>
            Specifies the day occurence within a month, e.g. first sunday in month
            </summary>
        </member>
        <member name="F:System.DayOccurrenceInMonthFlags.First">
            <summary>
            Represents the first occurence of a in a month
            </summary>
        </member>
        <member name="F:System.DayOccurrenceInMonthFlags.Second">
            <summary>
            Represents the second occurence of a in a month
            </summary>
        </member>
        <member name="F:System.DayOccurrenceInMonthFlags.Third">
            <summary>
            Represents the third occurence of a in a month
            </summary>
        </member>
        <member name="F:System.DayOccurrenceInMonthFlags.Fourth">
            <summary>
            Represents the fourth occurence of a in a month
            </summary>
        </member>
        <member name="F:System.DayOccurrenceInMonthFlags.Last">
            <summary>
            Represents the last occurence of a in a month
            </summary>
        </member>
        <member name="F:System.DayOccurrenceInMonthFlags.All">
            <summary>
            Represents all occurences
            </summary>
        </member>
        <member name="F:System.DayOccurrenceInMonthFlags.None">
            <summary>
            Represents no occurences
            </summary>
        </member>
        <member name="T:System.Xml.Serialization.Json.DataContractJsonSerializerExtension">
            <summary>
            Contains extension methods to the DataContractJsonSerializer class
            </summary>
        </member>
        <member name="T:System.Xml.Serialization.XmlSerializerExtension">
            <summary>
            The <c>XmlSerializerExtension</c> class contains XmlSerializer extension methods
            </summary>
        </member>
        <member name="M:System.Xml.Serialization.XmlSerializerExtension.Serialize``1(System.Xml.Serialization.XmlSerializer,``0)">
            <summary>
            Serializes the specified object and writes the XML document to a string
            </summary>
            <typeparam name="T">The type to serialize</typeparam>
            <param name="serializer">The serializer</param>
            <param name="obj">The object to serialize</param>
            <returns>The serialized object as a string</returns>
        </member>
        <member name="M:System.Xml.Serialization.XmlSerializerExtension.Deserialize``1(System.Xml.Serialization.XmlSerializer,System.String)">
            <summary>
            Deserializes the XML document in the specified text string
            </summary>
            <typeparam name="T">The type to serialize</typeparam>
            <param name="serializer">The serializer</param>
            <param name="text">The string containing the serialized object</param>
            <returns>The deserialized object</returns>
        </member>
    </members>
</doc>
