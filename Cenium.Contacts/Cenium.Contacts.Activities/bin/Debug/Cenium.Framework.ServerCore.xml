<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cenium.Framework.ServerCore</name>
    </assembly>
    <members>
        <member name="T:Cenium.Framework.Activities.AbstractContextActivityResultHandler`1">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="M:Cenium.Framework.Activities.AbstractContextActivityResultHandler`1.#ctor">
            <summary>
            Initializes a new instance of the AbstractActivityResultHandler class
            </summary>
        </member>
        <member name="M:Cenium.Framework.Activities.AbstractContextActivityResultHandler`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Cenium.Framework.Activities.AbstractActivityResultHandlerFactory">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="M:Cenium.Framework.Activities.AbstractActivityResultHandlerFactory.#ctor(System.Type,System.String,System.String)">
            <summary>
            Initializes a new instance of the AbstractActivityResultHandlerFactory class
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Cenium.Framework.Activities.ActivityExportGroup" -->
        <member name="M:Cenium.Framework.Activities.ActivityExportGroup.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the ActivityExportGroup class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Activities.ActivityExportGroup.Name">
            <summary>
            Gets the name of the export group
            </summary>
        </member>
        <member name="P:Cenium.Framework.Activities.ActivityExportGroup.DisplayName">
            <summary>
            Gets the display name of the export group
            </summary>
        </member>
        <member name="P:Cenium.Framework.Activities.ActivityExportGroup.Description">
            <summary>
            Gets the description of the export group
            </summary>
        </member>
        <member name="P:Cenium.Framework.Activities.ActivityExportGroup.Members">
            <summary>
            Gets an <c>IEnumerable</c> of <c>ActivityMemberInfo</c> instances, representing the members of the export group
            </summary>
        </member>
        <member name="T:Cenium.Framework.Activities.ActivityExportGroupMember">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="M:Cenium.Framework.Activities.ActivityExportGroupMember.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the ActivityExportGroupMember class
            </summary>
        </member>
        <member name="T:Cenium.Framework.Activities.ActivityExtensionContext">
            <summary>
            Represents a context for activity result extensions
            </summary>
        </member>
        <member name="M:Cenium.Framework.Activities.ActivityExtensionContext.#ctor">
            <summary>
            Initializes a new instance of the ActivityExtensionContext class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Activities.ActivityExtensionContext.Entity">
            <summary>
            Gets the entity associated with the context
            </summary>
        </member>
        <member name="P:Cenium.Framework.Activities.ActivityExtensionContext.PropertyContextId">
            <summary>
            Gets the property context identifier associated with the context
            </summary>
        </member>
        <member name="P:Cenium.Framework.Activities.ActivityExtensionContext.Current">
            <summary>
            Gets the context for the current session
            </summary>
        </member>
        <member name="T:Cenium.Framework.Activities.ActivityInfo">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="M:Cenium.Framework.Activities.ActivityInfo.#ctor(System.Type,Cenium.Framework.Core.Attributes.ActivityAttribute)">
            <summary>
            Initializes a new instance of the ActivityInfo class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Activities.ActivityInfo.Component">
            <summary>
            Gets the component that owns the activity
            </summary>
        </member>
        <member name="P:Cenium.Framework.Activities.ActivityInfo.ActivityType">
            <summary>
            Gets the type that implements the activity
            </summary>
        </member>
        <member name="P:Cenium.Framework.Activities.ActivityInfo.Name">
            <summary>
            Gets the name of the activity
            </summary>
        </member>
        <member name="P:Cenium.Framework.Activities.ActivityInfo.Description">
            <summary>
            Gets the description of the activity
            </summary>
        </member>
        <member name="P:Cenium.Framework.Activities.ActivityInfo.LookupMethods">
            <summary>
            Gets a read-only collection of all available lookup methods.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Activities.ActivityInfo.CacheableMethods">
            <summary>
            Gets a read-only collection of all available methods that are cacheable.
            </summary>
        </member>
        <member name="T:Cenium.Framework.Activities.ActivityInspector">
            <summary>
            Contains helper methods for inspecting an activity class. This class is an infrastructure class and should not be used outside the framework.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Activities.ActivityInspector.GetActivityMetods(System.Type)">
            <summary>
            Gets the query methods for an activity
            </summary>
            <param name="activityType">The Type that implements the activity</param>
            <returns>A collection of MethodInfo instances that represents the query methods; or null if no query methods are defined.</returns>
        </member>
        <member name="M:Cenium.Framework.Activities.ActivityInspector.GetActivityCacheableMethods(System.Type)">
            <summary>
            Gets the query methods that have been defined as cacheable
            </summary>
            <param name="activityType">Type of the activity.</param>
            <returns>A read-only collection of activity methods that have been defined as cacheable</returns>
        </member>
        <member name="M:Cenium.Framework.Activities.ActivityInspector.GetActivityLookupMethods(System.Type)">
            <summary>
            Gets the methods that have been defined as lookup methods
            </summary>
            <param name="activityType">Type of the activity.</param>
            <returns>A read-only collection of activity methods that have been defined as lookup methods.</returns>
        </member>
        <member name="T:Cenium.Framework.Activities.ActivityManager">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="M:Cenium.Framework.Activities.ActivityManager.Initialize">
            <summary>
            Initializes the activity manager
            </summary>
            <remarks>
            This is an infrastructure method and should only be used by the framework
            </remarks>
        </member>
        <member name="T:Cenium.Framework.Activities.ActivityMemberInfo">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="M:Cenium.Framework.Activities.ActivityMemberInfo.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the ActivityMemberInfo class
            </summary>
        </member>
        <member name="T:Cenium.Framework.Activities.ActivityMethodInfo">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="M:Cenium.Framework.Activities.ActivityMethodInfo.#ctor(Cenium.Framework.Activities.ActivityInfo,System.Reflection.MethodInfo)">
            <summary>
            Initializes a new instance of the ActivityMethodInfo class
            </summary>
        </member>
        <member name="T:Cenium.Framework.Activities.ActivityMethods">
            <summary>
            Contains constants and helper methods for activities
            </summary>
        </member>
        <member name="T:Cenium.Framework.Activities.ActivityResultExtensionAttribute">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="M:Cenium.Framework.Activities.ActivityResultExtensionAttribute.#ctor(System.String,System.String[])">
            <summary>
            Initializes a new instance of the ActivityResultExtensionAttribute class
            </summary>
        </member>
        <member name="T:Cenium.Framework.Activities.ActivityResultHandlerHelper">
            <summary>
            Contains helper methods for activity result handlers
            </summary>
        </member>
        <member name="M:Cenium.Framework.Activities.ActivityResultHandlerHelper.GetParentEntityPropertyContext(System.String,System.Object)">
            <summary>
            Gets the property context for a parent entity
            </summary>
            <param name="parentEntity">The parent entity name.</param>
            <param name="parentKey">The parent key.</param>
            <returns>The property context identity associated with a parent entity</returns>
        </member>
        <member name="T:Cenium.Framework.Activities.ActivityResultInfo">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="M:Cenium.Framework.Activities.ActivityResultInfo.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the ActivityResultInfo class
            </summary>
        </member>
        <member name="T:Cenium.Framework.Activities.ActivitySearchHandler">
            <summary>
            Base class for search handlers
            </summary>
        </member>
        <member name="M:Cenium.Framework.Activities.ActivitySearchHandler.#ctor">
            <summary>
            Initializes a new instance of the ActivitySearchHandler class
            </summary>
        </member>
        <member name="M:Cenium.Framework.Activities.ActivitySearchHandler.ApplySearch(System.Object,System.Collections.IEnumerable,System.String)">
            <summary>
            Applies the search expression to the <c>IEnumerable</c>
            </summary>
            <param name="context">The activity that invokes the search handler</param>
            <param name="source">The IEnumerable to apply the search expression to</param>
            <param name="expression">The search expression to apply</param>
            <returns>
            An <c>IEnumerable</c> with the search expression applied
            </returns>
        </member>
        <member name="M:Cenium.Framework.Activities.ActivitySearchHandler.ApplySearch(System.Collections.IEnumerable,System.String)">
            <summary>
            Applies the search expression to the <c>IEnumerable</c>
            </summary>
            <param name="source">The IEnumerable to apply the search expression to</param>
            <param name="expression">The search expression to apply</param>
            <returns>
            An <c>IEnumerable</c> with the search expression applied
            </returns>
        </member>
        <member name="M:Cenium.Framework.Activities.ActivitySearchHandler.CreateSearchExpression(System.String)">
            <summary>
            Creates a full-text search expression from text string
            </summary>
            <param name="value">The text to create a search expression from</param>
            <returns>A full-text search expression </returns>
        </member>
        <member name="M:Cenium.Framework.Activities.ActivitySearchHandler.CreateSearchExpression(System.String,System.Boolean)">
            <summary>
            Creates a full-text search expression from text string.
            </summary>
            <param name="value">The text to create a search expression from</param>
            <param name="useWildCard">True if wildcard should be applied to each term; otherwise false</param>
            <returns>A full-text search expression </returns>
        </member>
        <member name="T:Cenium.Framework.Activities.BinaryActivityMethodAttribute">
            <summary>
            Marks an activity method as a binary method, i.e. a method that returns a binary result (byte array)
            </summary>
        </member>
        <member name="M:Cenium.Framework.Activities.BinaryActivityMethodAttribute.#ctor">
            <summary>
            Initializes a new instance of the BinaryActivityMethodAttribute class
            </summary>
        </member>
        <member name="M:Cenium.Framework.Activities.BinaryActivityMethodAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the BinaryActivityMethodAttribute class
            </summary>
        </member>
        <member name="T:Cenium.Framework.Activities.ExportMemberAttribute">
            <summary>
            Marks a member method as an exportable service method, i.e. a method that is part of a service set
            </summary>
        </member>
        <member name="M:Cenium.Framework.Activities.ExportMemberAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ExportMember class
            </summary>
        </member>
        <member name="T:Cenium.Framework.Activities.IActivityResultExtensionHandler">
            <summary>
            Explain the purpose of the interface here
            </summary>
        </member>
        <member name="T:Cenium.Framework.Activities.IActivityResultExtensionHandlerFactory">
            <summary>
            Explain the purpose of the interface here
            </summary>
        </member>
        <member name="T:Cenium.Framework.Activities.ActivityBase`1">
            <summary>
            Base class for activities
            </summary>
        </member>
        <member name="M:Cenium.Framework.Activities.ActivityBase`1.#ctor">
            <summary>
            Initializes a new instance of the ActivityBase class
            </summary>
        </member>
        <member name="M:Cenium.Framework.Activities.ActivityBase`1.#ctor(`0,System.Boolean)">
            <summary>
            Initializes a new instance of the ActivityBase class using an existing entity context
            </summary>
            <remarks>
            If the <c>isContextOwner</c> is true, the <c>Dispose</c> method will dispose of the context, otherwise not.
            </remarks>
            <param name="context">The context to use</param>
            <param name="isContextOwner">Whether the activity owns the context or not</param>
        </member>
        <member name="M:Cenium.Framework.Activities.ActivityBase`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Activities.ActivityBase`1.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="dispose"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="P:Cenium.Framework.Activities.ActivityBase`1.Context">
            <summary>
            Gets the data context for the activity. This property will create a context if none exists.
            </summary>
        </member>
        <member name="T:Cenium.Framework.Activities.IValidatingActivityResultExtensionHandler">
            <summary>
            Explain the purpose of the interface here
            </summary>
        </member>
        <member name="M:Cenium.Framework.Activities.IValidatingActivityResultExtensionHandler.Validate(System.String,System.Object,System.Object)">
            <summary>
            Validates the extension entity
            </summary>
            <remarks>
            The Validate method is called during create, update and delete
            </remarks>
            <param name="parentEntity">The identity of the parent entity.</param>
            <param name="parentKey">The parent key.</param>
            <param name="entity">The entity to validate</param>
        </member>
        <member name="T:Cenium.Framework.Activities.VariableParameterList">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="M:Cenium.Framework.Activities.VariableParameterList.#ctor">
            <summary>
            Initializes a new instance of the VariableParameterList class
            </summary>
        </member>
        <member name="T:Cenium.Framework.Activities.ISearchHandler">
            <summary>
            Defines the mechanism for for applying a search expression to an IEnumerable
            </summary>
        </member>
        <member name="M:Cenium.Framework.Activities.ISearchHandler.ApplySearch(System.Collections.IEnumerable,System.String)">
            <summary>
            Applies the search expression to the <c>IEnumerable</c>
            </summary>
            <param name="source">The IEnumerable to apply the search expression to</param>
            <param name="expression">The search expression to apply</param>
            <returns>An <c>IEnumerable</c> with the search expression applied</returns>
        </member>
        <member name="T:Cenium.Framework.Core.Attributes.ActivityExportGroupAttribute">
            <summary>
            Specifies an export group. Multiple activity classes can be assigned to be a member of a group
            </summary>
        </member>
        <member name="M:Cenium.Framework.Core.Attributes.ActivityExportGroupAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the ActivityExportGroupAttribute class
            </summary>
            <param name="name">The name of the group</param>
            <param name="displayName">The display name of the group</param>
        </member>
        <member name="P:Cenium.Framework.Core.Attributes.ActivityExportGroupAttribute.Name">
            <summary>
            Gets the name of the group. This should be a unique identifier
            </summary>
        </member>
        <member name="P:Cenium.Framework.Core.Attributes.ActivityExportGroupAttribute.DisplayName">
            <summary>
            Gets the display name of the group
            </summary>
        </member>
        <member name="P:Cenium.Framework.Core.Attributes.ActivityExportGroupAttribute.Description">
            <summary>
            Gets the description of the group
            </summary>
        </member>
        <member name="T:Cenium.Framework.Core.Attributes.ActivityExportGroupMemberAttribute">
            <summary>
            Specifies that an activity class is a member of a specified export group
            </summary>
        </member>
        <member name="M:Cenium.Framework.Core.Attributes.ActivityExportGroupMemberAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ActivityExportGroupMember class
            </summary>
            <param name="name">The name of the group the activity is a member of</param>
        </member>
        <member name="P:Cenium.Framework.Core.Attributes.ActivityExportGroupMemberAttribute.Name">
            <summary>
            Gets the name of the group the activity is a member of
            </summary>
        </member>
        <member name="T:Cenium.Framework.Core.Attributes.ActivityMethodOptions">
            <summary>
            Specifies options for the behavior of an activity method
            </summary>
            <remarks>
            This enumeration has a <c>FlagsAttribute</c> attribute that allows a bitwise combination of its member values.
            </remarks>
        </member>
        <member name="F:Cenium.Framework.Core.Attributes.ActivityMethodOptions.None">
            <summary>
            Use no additional options
            </summary>
        </member>
        <member name="F:Cenium.Framework.Core.Attributes.ActivityMethodOptions.DisablePageLimit">
            <summary>
            Disable paging limits for the method (this only affects query methods)
            </summary>
            <remarks>
            This option should be used with care on methods where either the data volume is known to be low or where the caller is a trused caller (such as an interface)
            </remarks>
        </member>
        <member name="F:Cenium.Framework.Core.Attributes.ActivityMethodOptions.Searchable">
            <summary>
            The method supports search (this only affects query methods)
            </summary>
        </member>
        <member name="F:Cenium.Framework.Core.Attributes.ActivityMethodOptions.Cacheable">
            <summary>
            The result of the method are suitable for client-side caching
            </summary>
        </member>
        <member name="T:Cenium.Framework.Core.Attributes.ActivityAttribute">
            <summary>
            Specifies that a class is an activity type class (i.e. business logic) and may contain methods that are exposed externally through
            services or component interfaces.
            </summary>
            <remarks>
            This attribute is used to identify classes that should be inspected upon generating services and component interfaces.
            </remarks>
            <seealso cref="T:Cenium.Framework.Core.Attributes.ActivityMethodAttribute"/>
        </member>
        <member name="M:Cenium.Framework.Core.Attributes.ActivityAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ActivityAttribute class with the specified name
            </summary>
            <param name="name">The name of the activity</param>
        </member>
        <member name="P:Cenium.Framework.Core.Attributes.ActivityAttribute.Name">
            <summary>
            Gets the name of the activity
            </summary>
            <value>String containing the name of the activity</value>
        </member>
        <member name="P:Cenium.Framework.Core.Attributes.ActivityAttribute.Description">
            <summary>
            Gets the description of the activity
            </summary>
        </member>
        <member name="T:Cenium.Framework.Core.Attributes.ActivityMethodAttribute">
            <summary>
            Specified that a method is to be made available externally.
            </summary>
            <remarks>
            In order for the framework to correctly find and identify activity methods, the class the method belongs to must be annotated with the
            ActivityAttribute class.
            </remarks>
            <seealso cref="T:Cenium.Framework.Core.Attributes.ActivityAttribute"/>
            <seealso cref="T:Cenium.Framework.Core.Attributes.ActivityResultAttribute"/>
        </member>
        <member name="T:Cenium.Framework.Core.Attributes.ActivityMethodAttribute.SearchHandlerDelegate">
            <summary>
            Represents a search handler method
            </summary>
            <param name="source">The IEnumerable to apply the search expression to</param>
            <param name="expression">The search expression to apply</param>
            <returns>An <c>IEnumerable</c> with the search expression applied</returns>
        </member>
        <member name="M:Cenium.Framework.Core.Attributes.ActivityMethodAttribute.#ctor(Cenium.Framework.Core.Attributes.MethodType)">
            <summary>
            Initializes a new instance of the ActivityMethodAttribute class with the specificed ActivityMethodType enumeration value.
            </summary>
            <param name="methodType">type of method</param>
        </member>
        <member name="M:Cenium.Framework.Core.Attributes.ActivityMethodAttribute.#ctor(System.String,Cenium.Framework.Core.Attributes.MethodType)">
            <summary>
            Initializes a new instance of the ActivityMethodAttribute class with the specificed name and ActivityMethodType enumeration value.
            </summary>
            <param name="name">the name to use externally</param>
            <param name="methodType">type of method</param>
        </member>
        <member name="P:Cenium.Framework.Core.Attributes.ActivityMethodAttribute.Name">
            <summary>
            Gets or sets a string value representing the name used to identify the method externally. If the name is null or an empty
            string, the name of the method itself is used.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Core.Attributes.ActivityMethodAttribute.MethodType">
            <summary>
            Gets or sets a ActivityMethodType value indicating the type of method
            </summary>
        </member>
        <member name="P:Cenium.Framework.Core.Attributes.ActivityMethodAttribute.IsDefault">
            <summary>
            Gets or sets if the activity method is the default method for the specified method type
            </summary>
            <remarks>
            Default methods are propagated to the service meta-data to identify which methods to call automatically. These metadata can then be used
            by e.g. client frameworks to infer relationships between services automatically
            </remarks>
        </member>
        <member name="P:Cenium.Framework.Core.Attributes.ActivityMethodAttribute.Options">
            <summary>
            Gets or sets the options for the activity method
            </summary>
            <remarks>
            The <c>ActivityMethodOptions</c> enumeration has the <c>FlagAttribute</c> attribute, that allows a bitwise combination of its member values
            </remarks>
        </member>
        <member name="P:Cenium.Framework.Core.Attributes.ActivityMethodAttribute.SearchHandler">
            <summary>
            Gets or sets the search handler type. The search handler must be a method that implements the ISearchHandler interface
            </summary>
        </member>
        <member name="P:Cenium.Framework.Core.Attributes.ActivityMethodAttribute.LookupIdentity">
            <summary>
            Gets or sets the lookup identity of the activity method.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Core.Attributes.ActivityMethodAttribute.IsSearchable">
            <summary>
            Gets a value indicating whether the method is searchable.
            </summary>
        </member>
        <member name="T:Cenium.Framework.Core.Attributes.MethodType">
            <summary>
            Defines a set of values indicating what type of service call to generate for a specific method.
            </summary>
            <seealso cref="T:Cenium.Framework.Core.Attributes.ActivityMethodAttribute"/>
        </member>
        <member name="F:Cenium.Framework.Core.Attributes.MethodType.Query">
            <summary>
            Indicates a query method returning a set of values
            </summary>
        </member>
        <member name="F:Cenium.Framework.Core.Attributes.MethodType.Get">
            <summary>
            Indicates a query method returning a single result
            </summary>
        </member>
        <member name="F:Cenium.Framework.Core.Attributes.MethodType.Create">
            <summary>
            Indicates a service method that will create a new entity
            </summary>
        </member>
        <member name="F:Cenium.Framework.Core.Attributes.MethodType.Update">
            <summary>
            Indicates a service method that will update an existing entity
            </summary>
        </member>
        <member name="F:Cenium.Framework.Core.Attributes.MethodType.Delete">
            <summary>
            Indicates a service method that will delete an existing entity
            </summary>
        </member>
        <member name="F:Cenium.Framework.Core.Attributes.MethodType.Invoke">
            <summary>
            Indicates an invokation method
            </summary>
        </member>
        <member name="T:Cenium.Framework.Core.Attributes.ActivityResultAttribute">
            <summary>
            Specifies lazy-loaded properties in the result to include
            </summary>
        </member>
        <member name="M:Cenium.Framework.Core.Attributes.ActivityResultAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ActivityResultAttribute class
            </summary>
            <param name="includeProperty">The name of the property</param>
        </member>
        <member name="P:Cenium.Framework.Core.Attributes.ActivityResultAttribute.IncludeProperty">
            <summary>
            Gets or sets the property name to include
            </summary>
        </member>
        <member name="P:Cenium.Framework.Core.Attributes.ActivityResultAttribute.Validate">
            <summary>
            Gets or sets whether the included entities should be validated.
            </summary>
        </member>
        <member name="T:Cenium.Framework.Core.Attributes.NamespaceDoc">
            <summary>
            The Cenium.Framework.Core.Attributes namespace provides Attribute classes used when generating code, either dynamically or through templates.
            </summary>
        </member>
        <member name="T:Cenium.Framework.Cache.CachedValueHolder`1">
            <summary>
            Represents an item that is cached for a certain time period. Typically used as a static variable or in a long-lived object.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Cache.CachedValueHolder`1.#ctor(System.Int32,System.Func{`0})">
            <summary>
            Initializes a new instance of the CachedValueHolder class
            </summary>
            <param name="maxTTL">Max time to live for the value</param>
            <param name="valueFactory">The factory method that refresh the value</param>
        </member>
        <member name="P:Cenium.Framework.Cache.CachedValueHolder`1.TTL">
            <summary>
            Gets the max time to live for the value
            </summary>
        </member>
        <member name="P:Cenium.Framework.Cache.CachedValueHolder`1.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="T:Cenium.Framework.Cache.CacheEntryValue`1">
            <summary>
            Represents a cache entry value that contains a value
            </summary>
        </member>
        <member name="M:Cenium.Framework.Cache.CacheEntryValue`1.#ctor(System.Int64,`0)">
            <summary>
            Initializes a new instance of the CacheEntryValue class
            </summary>
            <param name="item">The item to cache</param>
            <param name="propertyContextId">The property context this cache value is valid for. This value can be zero.</param>
        </member>
        <member name="P:Cenium.Framework.Cache.CacheEntryValue`1.Updated">
            <summary>
            Gets the <c>DateTime</c> when the cache value entry was updated
            </summary>
        </member>
        <member name="P:Cenium.Framework.Cache.CacheEntryValue`1.PropertyContextId">
            <summary>
            Gets the property context identifier.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Cache.CacheEntryValue`1.Index">
            <summary>
            Gets the cached index
            </summary>
        </member>
        <member name="T:Cenium.Framework.Cache.CacheEntryHelper`2">
            <summary>
            Helper class for loading CacheEntryValue instances
            </summary>
            <remarks>This class assists loading collections inside a single cache entry and ensuring the cache is not stale.</remarks>
        </member>
        <member name="M:Cenium.Framework.Cache.CacheEntryHelper`2.#ctor(System.String,System.String,Cenium.Framework.Cache.CacheEntryHelper{`0,`1}.LoadCacheDataFactory)">
            <summary>
            Initializes a new instance of the CacheHelper class
            </summary>
        </member>
        <member name="T:Cenium.Framework.Cache.CacheManager">
            <summary>
            Provides access to local and session cache
            </summary>
        </member>
        <member name="M:Cenium.Framework.Cache.CacheManager.GetSessionCache(System.String)">
            <summary>
            Gets the session cache for the region specified by the regionName argument
            </summary>
            <param name="regionName">The name of the region</param>
            <returns>An ICache session cache instance</returns>
        </member>
        <member name="M:Cenium.Framework.Cache.CacheManager.GetLocalCache(System.String)">
            <summary>
            Gets the local cache for the region specified by the regionName argument
            </summary>
            <param name="regionName">The name of the region</param>
            <returns>An ICache local cache instance</returns>
        </member>
        <member name="M:Cenium.Framework.Cache.CacheManager.GetInternalSessionCache">
            <summary>
            Gets the internal session cache. This is an infrastructure method and should not be called outside the framework.
            </summary>
            <returns>An ICache session cache instance</returns>
        </member>
        <member name="T:Cenium.Framework.Cache.CacheRegionAttribute">
            <summary>
            Use the <c>CacheRegion</c> attribute to declare a cache region
            </summary>
        </member>
        <member name="M:Cenium.Framework.Cache.CacheRegionAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the CacheRegionAttribute class
            </summary>
            <param name="id">The region unique identifier</param>
            <param name="displayName">A display-friendly name for the region</param>
        </member>
        <member name="P:Cenium.Framework.Cache.CacheRegionAttribute.Id">
            <summary>
            Gets the region identifier
            </summary>
        </member>
        <member name="P:Cenium.Framework.Cache.CacheRegionAttribute.DisplayName">
            <summary>
            Gets the region display name
            </summary>
        </member>
        <member name="P:Cenium.Framework.Cache.CacheRegionAttribute.Description">
            <summary>
            Gets or sets a description for the region. The description should reflect the regions usage
            </summary>
        </member>
        <member name="P:Cenium.Framework.Cache.CacheRegionAttribute.IsEnabled">
            <summary>
            Gets or sets whether the region is enabled by default. This value is true if nothing is specified
            </summary>
        </member>
        <member name="P:Cenium.Framework.Cache.CacheRegionAttribute.Ttl">
            <summary>
            Gets or sets the default time-to-live in seconds. This value is set to 300 seconds (5 minutes) if nothing is specified
            </summary>
        </member>
        <member name="T:Cenium.Framework.Cache.CacheType">
            <summary>
            Defines the type of cache
            </summary>
        </member>
        <member name="F:Cenium.Framework.Cache.CacheType.Local">
            <summary>
            The cache is a local cache
            </summary>
        </member>
        <member name="F:Cenium.Framework.Cache.CacheType.Session">
            <summary>
            The cache is a session cache
            </summary>
        </member>
        <member name="T:Cenium.Framework.Cache.ICacheConfiguration">
            <summary>
            Defines a mechanism for configuration of cache regions
            </summary>
        </member>
        <member name="P:Cenium.Framework.Cache.ICacheConfiguration.IsEnabled">
            <summary>
            Gets or sets if the cache is enabled
            </summary>
        </member>
        <member name="P:Cenium.Framework.Cache.ICacheConfiguration.DefaultIsEnabled">
            <summary>
            Gets or sets if the cache is enabled by default
            </summary>
        </member>
        <member name="P:Cenium.Framework.Cache.ICacheConfiguration.Ttl">
            <summary>
            Gets or sets the time-to-live for the cache
            </summary>
        </member>
        <member name="P:Cenium.Framework.Cache.ICacheConfiguration.DefaultTtl">
            <summary>
            Gets or sets the default time-to-live value
            </summary>
        </member>
        <member name="T:Cenium.Framework.Cache.ICacheEntry">
            <summary>
            Represents an entry in the cache
            </summary>
        </member>
        <member name="P:Cenium.Framework.Cache.ICacheEntry.IsCached">
            <summary>
            Gets whether the entry contains a cached item or not
            </summary>
        </member>
        <member name="M:Cenium.Framework.Cache.ICacheEntry.Set(System.Object)">
            <summary>
            Sets an instance to be cached
            </summary>
            <param name="entry">The instance to cache</param>
        </member>
        <member name="P:Cenium.Framework.Cache.ICacheEntry.Item">
            <summary>
            Gets the cached item
            </summary>
        </member>
        <member name="T:Cenium.Framework.Cache.ICacheEntryCollection">
            <summary>
            Explain the purpose of the interface here
            </summary>
        </member>
        <member name="P:Cenium.Framework.Cache.ICacheEntryCollection.Item(System.Object)">
            <summary>
            Gets a cache entry based on its item key
            </summary>
            <remarks>
            Note that this property will always return a cache entry, even if one does not exist in the cache
            </remarks>
            <param name="itemKey">The key associated with an item</param>
            <returns>The cache entry found associated with item key</returns>
        </member>
        <member name="T:Cenium.Framework.Cache.ICache">
            <summary>
            Represents a cache associated with a cache region
            </summary>
        </member>
        <member name="P:Cenium.Framework.Cache.ICache.Name">
            <summary>
            Gets the region name for the cache
            </summary>
        </member>
        <member name="P:Cenium.Framework.Cache.ICache.Type">
            <summary>
            Gets the cache type
            </summary>
        </member>
        <member name="P:Cenium.Framework.Cache.ICache.IsEnabled">
            <summary>
            Gets whether this cache is enabled or not
            </summary>
        </member>
        <member name="P:Cenium.Framework.Cache.ICache.Entries">
            <summary>
            Returns a collection that gives access to an entry in the cache
            </summary>
        </member>
        <member name="T:Cenium.Framework.Cache.ICacheInfo">
            <summary>
            Defines information about a cache
            </summary>
        </member>
        <member name="P:Cenium.Framework.Cache.ICacheInfo.Name">
            <summary>
            Gets the name of the cache
            </summary>
        </member>
        <member name="P:Cenium.Framework.Cache.ICacheInfo.DisplayName">
            <summary>
            Gets the display name for the cache
            </summary>
        </member>
        <member name="P:Cenium.Framework.Cache.ICacheInfo.Description">
            <summary>
            Gets the description for the cache
            </summary>
        </member>
        <member name="P:Cenium.Framework.Cache.ICacheInfo.Ttl">
            <summary>
            Gets the time-to-live for the entries in the cache
            </summary>
        </member>
        <member name="P:Cenium.Framework.Cache.ICacheInfo.IsEnabled">
            <summary>
            Gets whether the cache is enabled or not
            </summary>
        </member>
        <member name="P:Cenium.Framework.Cache.ICacheInfo.Count">
            <summary>
            Gets the current number of items in cache
            </summary>
        </member>
        <member name="P:Cenium.Framework.Cache.ICacheInfo.MissCount">
            <summary>
            Gets the number of cache misses
            </summary>
        </member>
        <member name="P:Cenium.Framework.Cache.ICacheInfo.HitCount">
            <summary>
            Gets the number of cache hits
            </summary>
        </member>
        <member name="P:Cenium.Framework.Cache.ICacheInfo.HitRatio">
            <summary>
            Gets the hit ratio (hits/total lookups)
            </summary>
        </member>
        <member name="P:Cenium.Framework.Cache.ICacheInfo.MemoryLimit">
            <summary>
            Gets the amount of memory on the computer, in bytes, that can be used by the cache.
            </summary>
        </member>
        <member name="T:Cenium.Framework.Cache.LocalCache">
            <summary>
            Provides an implementation of the local cache
            </summary>
        </member>
        <member name="M:Cenium.Framework.Cache.LocalCache.#ctor(System.String,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the LocalCache class
            </summary>
            <param name="regionName">The identifier for the cache</param>
            <param name="displayName">The display name of the region</param>
            <param name="description">The description associated with the cache region</param>
            <param name="ttl">Specifies the initial time-to-live for cache entries</param>
            <param name="isEnabled">Specifies if this region is enabled or not</param>
        </member>
        <member name="P:Cenium.Framework.Cache.LocalCache.DisplayName">
            <summary>
            Gets or sets the display name.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Cache.LocalCache.Description">
            <summary>
            Gets or sets the description.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Cache.LocalCache.Name">
            <summary>
            Gets the region name for the cache
            </summary>
        </member>
        <member name="P:Cenium.Framework.Cache.LocalCache.Ttl">
            <summary>
            Gets or sets the time-to-live.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Cache.LocalCache.IsEnabled">
            <summary>
            Gets whether this cache is enabled or not
            </summary>
        </member>
        <member name="P:Cenium.Framework.Cache.LocalCache.Count">
            <summary>
            Gets the current number of entries in the cache
            </summary>
        </member>
        <member name="P:Cenium.Framework.Cache.LocalCache.MissCount">
            <summary>
            Gets the number of misses in the cache
            </summary>
        </member>
        <member name="P:Cenium.Framework.Cache.LocalCache.HitCount">
            <summary>
            Gets the number of hits in the cache
            </summary>
        </member>
        <member name="P:Cenium.Framework.Cache.LocalCache.MemoryLimit">
            <summary>
            Gets the maximum available memory in bytes
            </summary>
        </member>
        <member name="P:Cenium.Framework.Cache.LocalCache.Item(System.Object)">
            <summary>
            Gets the <see cref="T:Cenium.Framework.Cache.ICacheEntry"/> with the specified item key.
            </summary>
            <value>
            The <see cref="T:Cenium.Framework.Cache.ICacheEntry"/>.
            </value>
            <param name="itemKey">The item key.</param>
            <returns></returns>
        </member>
        <member name="P:Cenium.Framework.Cache.LocalCache.Entries">
            <summary>
            Returns a collection that gives access to an entry in the cache
            </summary>
        </member>
        <member name="P:Cenium.Framework.Cache.LocalCache.Type">
            <summary>
            Gets the cache type
            </summary>
        </member>
        <member name="T:Cenium.Framework.Cache.NamespaceDoc">
            <summary>
            Provides caching services for an application.
            </summary>
        </member>
        <member name="T:Cenium.Framework.Cache.SessionCache">
            <summary>
            Provides an implementation of the session cache
            </summary>
        </member>
        <member name="M:Cenium.Framework.Cache.SessionCache.#ctor(System.String)">
            <summary>
            Initializes a new instance of the SessionCache class
            </summary>
            <param name="name">The name of the cache region</param>
        </member>
        <member name="P:Cenium.Framework.Cache.SessionCache.Name">
            <summary>
            Gets the region name for the cache
            </summary>
        </member>
        <member name="P:Cenium.Framework.Cache.SessionCache.Type">
            <summary>
            Gets the cache type
            </summary>
        </member>
        <member name="P:Cenium.Framework.Cache.SessionCache.IsEnabled">
            <summary>
            Gets whether this cache is enabled or not
            </summary>
        </member>
        <member name="P:Cenium.Framework.Cache.SessionCache.Entries">
            <summary>
            Returns a collection that gives access to an entry in the cache
            </summary>
        </member>
        <member name="P:Cenium.Framework.Cache.SessionCache.Item(System.Object)">
            <summary>
            Gets the <see cref="T:Cenium.Framework.Cache.ICacheEntry"/> with the specified item key.
            </summary>
            <value>
            The <see cref="T:Cenium.Framework.Cache.ICacheEntry"/>.
            </value>
            <param name="itemKey">The item key.</param>
            <returns></returns>
        </member>
        <member name="M:Cenium.Framework.Cache.SessionCache.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Cache.SessionCache.GetCacheRegion(System.String)">
            <summary>
            Gets the cache for a specified region
            </summary>
            <param name="regionName">The region to get the cache for</param>
            <returns>A SessionCache instance</returns>
        </member>
        <member name="T:Cenium.Framework.CodeDom.DynamicAssemblyGenerator">
            <summary>
            Represents a dynamically generated assembly (an assembly created at runtime).
            </summary>
        </member>
        <member name="M:Cenium.Framework.CodeDom.DynamicAssemblyGenerator.#ctor(System.String)">
            <summary>
            Initializes a new instance of the DynamicAssemblyGenerator class
            </summary>
            <param name="ns">The namespace for the assembly</param>
        </member>
        <member name="M:Cenium.Framework.CodeDom.DynamicAssemblyGenerator.AddImports(System.String,System.String)">
            <summary>
            Adds namespaces and external assemblies to the assembly
            </summary>
            <param name="ns">The namespace to add</param>
            <param name="assembly">The assembly the namespace belongs to</param>
        </member>
        <member name="M:Cenium.Framework.CodeDom.DynamicAssemblyGenerator.AddCustomAttribute(System.String)">
            <summary>
            Adds a custom attribute at assembly level
            </summary>
            <param name="name">The name of the attribute to add</param>
            <returns>A CodeAttributeDeclaration instance representing the attribute</returns>
        </member>
        <member name="M:Cenium.Framework.CodeDom.DynamicAssemblyGenerator.AddClass(System.String)">
            <summary>
            Adds a new class to the assembly
            </summary>
            <param name="className">The name of the class to add</param>
            <returns>A DynamicClassGenerator instance representing the newly added class</returns>
        </member>
        <member name="M:Cenium.Framework.CodeDom.DynamicAssemblyGenerator.Compile(System.String)">
            <summary>
            Compiles the assembly
            </summary>
            <param name="name">The file name of the assembly to generate</param>
        </member>
        <member name="P:Cenium.Framework.CodeDom.DynamicAssemblyGenerator.CompilerOutput">
            <summary>
            Gets the compiler output
            </summary>
        </member>
        <member name="P:Cenium.Framework.CodeDom.DynamicAssemblyGenerator.Results">
            <summary>
            Gets the compiler results
            </summary>
        </member>
        <member name="P:Cenium.Framework.CodeDom.DynamicAssemblyGenerator.Assembly">
            <summary>
            Gets the generated assembly reference
            </summary>
        </member>
        <member name="M:Cenium.Framework.CodeDom.DynamicAssemblyGenerator.ToString">
            <summary>
            Returns a string representation of the assembly in the form of source code
            </summary>
            <returns>a string representation of the assembly</returns>
        </member>
        <member name="T:Cenium.Framework.CodeDom.DynamicClassGenerator">
            <summary>
            Represents a dynamically generated class (class generated at runtime)
            </summary>
        </member>
        <member name="M:Cenium.Framework.CodeDom.DynamicClassGenerator.#ctor(System.CodeDom.CodeNamespace,System.String)">
            <summary>
            Initializes a new instance of the DynamicClassGenerator class
            </summary>
            <param name="ns">The CodeNamespace instance the class is a member of</param>
            <param name="name">The name of the class</param>
        </member>
        <member name="P:Cenium.Framework.CodeDom.DynamicClassGenerator.Declaration">
            <summary>
            Gets the CodeTypeDeclaration instance for this class
            </summary>
        </member>
        <member name="M:Cenium.Framework.CodeDom.DynamicClassGenerator.AddField(System.Type,System.String,System.CodeDom.MemberAttributes)">
            <summary>
            Adds a new field to the class
            </summary>
            <param name="type">The field type</param>
            <param name="name">The field name</param>
            <param name="attributes">The attributes associated with the field</param>
            <returns>A CodeMemberField instance representing the new field</returns>
        </member>
        <member name="M:Cenium.Framework.CodeDom.DynamicClassGenerator.AddField(System.String,System.String,System.CodeDom.MemberAttributes)">
            <summary>
            Adds a new field to the class
            </summary>
            <param name="type">The field type as a string value</param>
            <param name="name">The field name</param>
            <param name="attributes">The attributes associated with the field</param>
            <returns>A CodeMemberField instance representing the new field</returns>
        </member>
        <member name="M:Cenium.Framework.CodeDom.DynamicClassGenerator.AddField(System.CodeDom.CodeTypeReference,System.String,System.CodeDom.MemberAttributes)">
            <summary>
            Adds a new field to the class
            </summary>
            <param name="type">The field type</param>
            <param name="name">The field name</param>
            <param name="attributes">The attributes associated with the field</param>
            <returns>A CodeMemberField instance representing the new field</returns>
        </member>
        <member name="M:Cenium.Framework.CodeDom.DynamicClassGenerator.AddCustomAttribute(System.String)">
            <summary>
            Adds a custom attribute to the class
            </summary>
            <param name="name">The name of the attribute</param>
            <returns>A CodeAttributeDeclaration instance representing the new attribute</returns>
        </member>
        <member name="M:Cenium.Framework.CodeDom.DynamicClassGenerator.AddProperty(System.Type,System.String,System.String,System.CodeDom.MemberAttributes)">
            <summary>
            Adds a new property to the class
            </summary>
            <param name="type">The return type of the property</param>
            <param name="name">The name of the property</param>
            <param name="field">The field used by the property</param>
            <param name="attributes">The property attributes</param>
            <returns>A new CodeMemberProperty instance representing the new property</returns>
        </member>
        <member name="M:Cenium.Framework.CodeDom.DynamicClassGenerator.AddProperty(System.CodeDom.CodeTypeReference,System.String,System.String,System.CodeDom.MemberAttributes)">
            <summary>
            Adds a new property to the class
            </summary>
            <param name="type">The return type of the property</param>
            <param name="name">The name of the property</param>
            <param name="field">The field used by the property</param>
            <param name="attributes">The property attributes</param>
            <returns>A new CodeMemberProperty instance representing the new property</returns>
        </member>
        <member name="M:Cenium.Framework.CodeDom.DynamicClassGenerator.AddMethod(System.Type,System.String,System.CodeDom.MemberAttributes)">
            <summary>
            Adds a new method to the class
            </summary>
            <param name="returnType">The return type of the method</param>
            <param name="name">The name of the method</param>
            <param name="attributes">The attributes of the method</param>
            <returns>A new CodeMemberMethod instance representing the new method</returns>
        </member>
        <member name="M:Cenium.Framework.CodeDom.DynamicClassGenerator.AddMethod(System.String,System.String,System.CodeDom.MemberAttributes)">
            <summary>
            Adds a new method to the class
            </summary>
            <param name="returnType">The return type of the method</param>
            <param name="name">The name of the method</param>
            <param name="attributes">The attributes of the method</param>
            <returns>A new CodeMemberMethod instance representing the new method</returns>
        </member>
        <member name="M:Cenium.Framework.CodeDom.DynamicClassGenerator.AddMethod(System.CodeDom.CodeTypeReference,System.String,System.CodeDom.MemberAttributes)">
            <summary>
            Adds a new method to the class
            </summary>
            <param name="returnType">The return type of the method</param>
            <param name="name">The name of the method</param>
            <param name="attributes">The attributes of the method</param>
            <returns>A new CodeMemberMethod instance representing the new method</returns>
        </member>
        <member name="M:Cenium.Framework.CodeDom.DynamicClassGenerator.ToString">
            <summary>
            Returns a string representation of the dynamically created class
            </summary>
            <returns>A string representation of this object</returns>
        </member>
        <member name="T:Cenium.Framework.CodeDom.DynamicCodeHelper">
            <summary>
            Contains static helper methods and extensions for creating code dynamically
            </summary>
        </member>
        <member name="M:Cenium.Framework.CodeDom.DynamicCodeHelper.AddCustomAttribute(System.CodeDom.CodeTypeMember,System.String)">
            <summary>
            Adds a custom attribute to a CodeTypeMember instance
            </summary>
            <param name="member">The CodeTypeMember instance to add the attribute to</param>
            <param name="name">The name of the attribute</param>
            <returns>A CodeAttributeDeclaration instance representing the new attribute</returns>
        </member>
        <member name="M:Cenium.Framework.CodeDom.DynamicCodeHelper.AddArgument(System.CodeDom.CodeAttributeDeclaration,System.String,System.Object)">
            <summary>
            Adds an argument to a custom attribute
            </summary>
            <param name="attr">The CodeAttributeDeclaration instance to add the argument to</param>
            <param name="name">The name of the argument (or null if the name is part of the attribute constructor)</param>
            <param name="value">The value for the argument</param>
            <returns>The CodeAttributeDeclaration representing the attribute</returns>
        </member>
        <member name="M:Cenium.Framework.CodeDom.DynamicCodeHelper.AddDataContractAttribute(System.CodeDom.CodeTypeMember,System.String,System.String)">
            <summary>
            Adds a DataContractAttribute declaration to a CodeTypeMember instance
            </summary>
            <param name="member">The CodeTypeMember instance to add the DataContractAttribute to</param>
            <param name="name">The DataContractAttribute Name parameter</param>
            <param name="ns">The DataContractAttribute Namespace parameter</param>
        </member>
        <member name="M:Cenium.Framework.CodeDom.DynamicCodeHelper.AddDataMemberAttribute(System.CodeDom.CodeTypeMember,System.String)">
            <summary>
            Adds a DataMemberAttribute to a CodeTypeMember instance
            </summary>
            <param name="member">The CodeTypeMember instance to add the DataContractAttribute to</param>
            <param name="name">The DataMemberAttribute Name parameter</param>
        </member>
        <member name="T:Cenium.Framework.CodeDom.NamespaceDoc">
            <summary>
            Provides classes to aid in generate assemblies dynamically at runtime.
            </summary>
        </member>
        <member name="T:Cenium.Framework.Communication.BulkSMSMessage">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="M:Cenium.Framework.Communication.BulkSMSMessage.#ctor">
            <summary>
            Initializes a new instance of the BulkSMSMessage class
            </summary>
        </member>
        <member name="T:Cenium.Framework.Communication.CommunicationManager">
            <summary>
            Defines methods for sending a communication message
            </summary>
        </member>
        <member name="M:Cenium.Framework.Communication.CommunicationManager.Send(Cenium.Framework.Communication.ICommunicationMessage)">
            <summary>
            Sens a communication message
            </summary>
            <remarks>
            Note that this method does not raise any exceptions (except if the message is null). To handle any errors, look at the result of the Send method.
            </remarks>
            <param name="message">The message to send</param>
            <returns>An <c>ICommunicationResponse</c> instance</returns>
        </member>
        <member name="M:Cenium.Framework.Communication.CommunicationManager.RegisterProvider``1(Cenium.Framework.Communication.ICommunicationProvider)">
            <summary>
            Registers a communication provider and associates the provider with a message type
            </summary>
            <typeparam name="TMessageType">The message type to associate the provider with</typeparam>
            <param name="provider">The provider to register</param>
        </member>
        <member name="M:Cenium.Framework.Communication.CommunicationManager.CreateMailAddress(System.String,System.String)">
            <summary>
            Creates a new mail address
            </summary>
            <param name="address">the email address</param>
            <param name="displayName">The display name associated with the email address</param>
            <returns>An <c>ICommunicationAddress</c> instance representing a mail address</returns>
        </member>
        <member name="M:Cenium.Framework.Communication.CommunicationManager.CreatePhoneAddress(System.String,System.String)">
            <summary>
            Creates a new phone number address
            </summary>
            <param name="address">the phone number</param>
            <param name="displayName">The display name associated with the phone number</param>
            <returns>An <c>ICommunicationAddress</c> instance representing a phone number</returns>
        </member>
        <member name="T:Cenium.Framework.Communication.ICommunicationAddress">
            <summary>
            Defines a communication address
            </summary>
        </member>
        <member name="P:Cenium.Framework.Communication.ICommunicationAddress.DisplayName">
            <summary>
            Gets or sets the display name
            </summary>
        </member>
        <member name="P:Cenium.Framework.Communication.ICommunicationAddress.Address">
            <summary>
            Gets the address
            </summary>
        </member>
        <member name="T:Cenium.Framework.Communication.ICommunicationMessage">
            <summary>
            Explain the purpose of the interface here
            </summary>
        </member>
        <member name="T:Cenium.Framework.Communication.ICommunicationProvider">
            <summary>
            Explain the purpose of the interface here
            </summary>
        </member>
        <member name="T:Cenium.Framework.Communication.ICommunicationResponse">
            <summary>
            Explain the purpose of the interface here
            </summary>
        </member>
        <member name="T:Cenium.Framework.Communication.SimpleMessage">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="M:Cenium.Framework.Communication.SimpleMessage.#ctor">
            <summary>
            Initializes a new instance of the SimpleMessage class
            </summary>
        </member>
        <member name="T:Cenium.Framework.Communication.SMSMessage">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="M:Cenium.Framework.Communication.SMSMessage.#ctor">
            <summary>
            Initializes a new instance of the SMSMessage class
            </summary>
        </member>
        <member name="T:Cenium.Framework.Communication.MailFormat">
            <summary>
            Defines possible mail formats
            </summary>
        </member>
        <member name="F:Cenium.Framework.Communication.MailFormat.Text">
            <summary>
            Mail is in text format
            </summary>
        </member>
        <member name="F:Cenium.Framework.Communication.MailFormat.Html">
            <summary>
            Mail is in HTML format
            </summary>
        </member>
        <member name="T:Cenium.Framework.Communication.SimpleMailMessage">
            <summary>
            Defines a simplified mail message
            </summary>
        </member>
        <member name="M:Cenium.Framework.Communication.SimpleMailMessage.#ctor">
            <summary>
            Initializes a new instance of the SimpleMailMessage class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Communication.SimpleMailMessage.Recipients">
            <summary>
            Gets a collection of <c>ICommunicationAddress</c> that represents the recipients of the mail message
            </summary>
        </member>
        <member name="P:Cenium.Framework.Communication.SimpleMailMessage.CCRecipients">
            <summary>
            Gets a collection of <c>ICommunicationAddress</c> that represents the carbon-copy recipients of the mail message
            </summary>
        </member>
        <member name="P:Cenium.Framework.Communication.SimpleMailMessage.Subject">
            <summary>
            Gets or sets the subject
            </summary>
        </member>
        <member name="P:Cenium.Framework.Communication.SimpleMailMessage.Attachments">
            <summary>
            Gets a collection of <c>SimpleMailMessageAttachement</c>
            </summary>
        </member>
        <member name="P:Cenium.Framework.Communication.SimpleMailMessage.Format">
            <summary>
            Gets or sets the format of the content. Default is <c>MailFormat.Text</c>
            </summary>
        </member>
        <member name="T:Cenium.Framework.Communication.SimpleMailMessageAttachment">
            <summary>
            Defines a mail attachment
            </summary>
        </member>
        <member name="M:Cenium.Framework.Communication.SimpleMailMessageAttachment.#ctor(System.String,System.Byte[])">
            <summary>
            Initializes a new instance of the SimpleMailMessageAttachment class
            </summary>
            <param name="name">The name of the attachment</param>
            <param name="content">The content of the attachment in binary form</param>
        </member>
        <member name="M:Cenium.Framework.Communication.SimpleMailMessageAttachment.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the SimpleMailMessageAttachment class
            </summary>
            <param name="name">The name of the attachment</param>
            <param name="content">The content of the attachment as a string</param>
        </member>
        <member name="T:Cenium.Framework.ComponentModel.DateTimeFormat">
            <summary>
            Defines the components used for a DateTime type
            </summary>
        </member>
        <member name="F:Cenium.Framework.ComponentModel.DateTimeFormat.DateTime">
            <summary>
            Use both date and time
            </summary>
        </member>
        <member name="F:Cenium.Framework.ComponentModel.DateTimeFormat.Date">
            <summary>
            Use date only
            </summary>
        </member>
        <member name="T:Cenium.Framework.ComponentModel.DateTimeFormatAttribute">
            <summary>
            Specifies how a <c>DateTime</c> property is formatted
            </summary>
        </member>
        <member name="M:Cenium.Framework.ComponentModel.DateTimeFormatAttribute.#ctor(Cenium.Framework.ComponentModel.DateTimeFormat)">
            <summary>
            Initializes a new instance of the DateTimeFormatAttribute class
            </summary>
            <param name="format">The format to use</param>
        </member>
        <member name="P:Cenium.Framework.ComponentModel.DateTimeFormatAttribute.Format">
            <summary>
            Gets the format used
            </summary>
        </member>
        <member name="T:Cenium.Framework.ComponentModel.DecimalFormat">
            <summary>
            Represents the format of a decimal
            </summary>
        </member>
        <member name="F:Cenium.Framework.ComponentModel.DecimalFormat.Default">
            <summary>
            Default decimal format with precision = 18 and scale = 2
            </summary>
        </member>
        <member name="M:Cenium.Framework.ComponentModel.DecimalFormat.#ctor(System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the DecimalFormat class
            </summary>
        </member>
        <member name="P:Cenium.Framework.ComponentModel.DecimalFormat.Precision">
            <summary>
            Gets the precision of the decimal, i.e. number of digits
            </summary>
        </member>
        <member name="P:Cenium.Framework.ComponentModel.DecimalFormat.Scale">
            <summary>
            Gets the scale of the decimal, i.e. number of digits after the decimal point
            </summary>
        </member>
        <member name="M:Cenium.Framework.ComponentModel.DecimalFormat.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Cenium.Framework.ComponentModel.DecimalFormat.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Cenium.Framework.ComponentModel.DecimalFormatAttribute">
            <summary>
            Specifies how a decimal property is formatted
            </summary>
        </member>
        <member name="M:Cenium.Framework.ComponentModel.DecimalFormatAttribute.#ctor">
            <summary>
            Initializes a new instance of the DecimalFormatAttribute class
            </summary>
        </member>
        <member name="P:Cenium.Framework.ComponentModel.DecimalFormatAttribute.Precision">
            <summary>
            Gets or sets the precision of the decimal property
            </summary>
        </member>
        <member name="P:Cenium.Framework.ComponentModel.DecimalFormatAttribute.Scale">
            <summary>
            Gets or sets the scale of the decimal property
            </summary>
        </member>
        <member name="T:Cenium.Framework.ComponentModel.FormatAttribute">
            <summary>
            Base class for defining how properties are formatted
            </summary>
        </member>
        <member name="M:Cenium.Framework.ComponentModel.FormatAttribute.#ctor">
            <summary>
            Initializes a new instance of the FormatAttribute class
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.ComponentInitializerBase">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.ComponentInitializerBase.#ctor">
            <summary>
            Initializes a new instance of the ComponentInitializerBase class
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.IComponentInitializer">
            <summary>
            Allows a class to perform tasks during startup or shutdown
            </summary>
            <remarks>
            Note that classes that implements the <c>IComponentInitializer</c> interface must also provide a parameter-less constructor. The framework will automatically locate
            and execute the startup and shutdown methods.
            </remarks>
        </member>
        <member name="M:Cenium.Framework.Component.IComponentInitializer.OnStartup">
            <summary>
            Executed during server startup
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.IComponentInitializer.OnShutdown">
            <summary>
            Executed during server shutdown
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.Interface.EntityProxy">
            <summary>
            Base class for all entity proxies
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.Interface.EntityProxy.#ctor(System.String)">
            <summary>
            Initializes a new instance of the EntityProxy class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.Interface.EntityProxy.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:System.Object"/> with the specified property name.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="P:Cenium.Framework.Component.Interface.EntityProxy.EntityType">
            <summary>
            Returns the name of the entity
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.Interface.EntityProxy.RowVersion">
            <summary>
            Gets the row version for the entity
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.Interface.EntityProxy.TenantId">
            <summary>
            Gets the tenant id for the entity
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.Interface.EntityProxy.GetValue``1(System.String)">
            <summary>
            Gets a strongly typed value from the proxy entity, if the property is available
            </summary>
            <typeparam name="T">The value type</typeparam>
            <param name="propertyName">The name of the property</param>
            <returns>
            The value of the property, or default(T) if the property does not exist, is the wrong type or is null
            </returns>
        </member>
        <member name="M:Cenium.Framework.Component.Interface.EntityProxy.IsPropertyAvailable(System.String)">
            <summary>
            Returns true if a specified property is available, otherwise false
            </summary>
            <param name="propertyName">The name of the property to check for</param>
            <returns>true if a specified property is available, otherwise false.</returns>
        </member>
        <member name="T:Cenium.Framework.Component.Interface.EntityProxyConfiguration">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.Interface.EntityProxyConfiguration.#ctor">
            <summary>
            Initializes a new instance of the EntityProxySettings class
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.Interface.EntityProxyList`1">
            <summary>
            List containing entity proxies
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.Interface.EntityProxyList`1.#ctor">
            <summary>
            Initializes a new instance of the EntityProxyList class
            </summary>
        </member>
        <member name="T:Cenium.Framework.Component.Interface.IEntityProxy">
            <summary>
            Provides the mechanisms for accessing an entity located in another component
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.Interface.IEntityProxy.Item(System.String)">
            <summary>
            Gets or sets the value of a property
            </summary>
            <param name="propertyName">The name of the property to get or set</param>
            <returns>The value of the property</returns>
        </member>
        <member name="P:Cenium.Framework.Component.Interface.IEntityProxy.EntityType">
            <summary>
            Returns the name of the entity
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.Interface.IEntityProxy.RowVersion">
            <summary>
            Gets the row version for the entity
            </summary>
        </member>
        <member name="P:Cenium.Framework.Component.Interface.IEntityProxy.TenantId">
            <summary>
            Gets the tenant id for the entity
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.Interface.IEntityProxy.IsPropertyAvailable(System.String)">
            <summary>
            Returns true if a specified property is available, otherwise false
            </summary>
            <param name="propertyName">The name of the property to check for</param>
            <returns>true if a specified property is available, otherwise false</returns>
        </member>
        <member name="M:Cenium.Framework.Component.Interface.IEntityProxy.GetValue``1(System.String)">
            <summary>
            Gets a strongly typed value from the proxy entity, if the property is available
            </summary>
            <typeparam name="T">The value type</typeparam>
            <param name="propertyName">The name of the property</param>
            <returns>The value of the property, or default(T) if the property does not exist, is the wrong type or is null</returns>
        </member>
        <member name="M:Cenium.Framework.Component.Interface.IEntityProxy.SetValue(System.String,System.Object)">
            <summary>
            Sets a value if the property exists
            </summary>
            <param name="propertyName">The name of the property</param>
            <param name="value">The value to set</param>
        </member>
        <member name="T:Cenium.Framework.Component.Interface.InvalidNavigationPropertyValue">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="M:Cenium.Framework.Component.Interface.InvalidNavigationPropertyValue.#ctor">
            <summary>
            Initializes a new instance of the InvalidNavigationPropertyValue class
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Cenium.Framework.Component.Interface.IProxyQueryable`1" -->
        <member name="T:Cenium.Framework.Configuration.AppConfigurationEntityAttribute">
            <summary>
            Defines a class as an application configuration entity.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Configuration.AppConfigurationEntityAttribute.#ctor(System.String,Cenium.Framework.Configuration.AppConfigurationEntityOptions)">
            <summary>
            Initializes a new instance of the AppConfigurationEntityAttribute class
            </summary>
            <param name="group">The identity of the configuration group the entity belongs to.</param>
            <param name="options">The options applicable to the configuration entity.</param>
        </member>
        <member name="P:Cenium.Framework.Configuration.AppConfigurationEntityAttribute.Group">
            <summary>
            Gets the group identity the configuration entity is associated with.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Configuration.AppConfigurationEntityAttribute.Options">
            <summary>
            Gets the options the configuration entity is associated with.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Configuration.AppConfigurationEntityAttribute.IsCacheable">
            <summary>
            Gets a value indicating whether the configuration entity is cacheable.
            </summary>
        </member>
        <member name="T:Cenium.Framework.Configuration.AppConfigurationEntityOptions">
            <summary>
            Defines the options associated with an application configuration entity.
            </summary>
        </member>
        <member name="F:Cenium.Framework.Configuration.AppConfigurationEntityOptions.None">
            <summary>
            No options
            </summary>
        </member>
        <member name="F:Cenium.Framework.Configuration.AppConfigurationEntityOptions.Cacheable">
            <summary>
            The configuration is cacheable.
            </summary>
        </member>
        <member name="T:Cenium.Framework.Configuration.AppConfigurationEntry">
            <summary>
            Base class for all application configuration types
            </summary>
        </member>
        <member name="M:Cenium.Framework.Configuration.AppConfigurationEntry.#ctor">
            <summary>
            Initializes a new instance of the AppConfigurationEntry class
            </summary>
        </member>
        <member name="M:Cenium.Framework.Configuration.AppConfigurationEntry.Validate">
            <summary>
            Performs validation of the entry
            </summary>
        </member>
        <member name="M:Cenium.Framework.Configuration.AppConfigurationEntry.Copy">
            <summary>
            Creates a copy of this instance. Implementers must override this method to provide a deep copy of the instance.
            </summary>
            <returns>A copy of this instance</returns>
        </member>
        <member name="T:Cenium.Framework.Configuration.AppConfigurations">
            <summary>
            Provides access to application configuration settings
            </summary>
        </member>
        <member name="M:Cenium.Framework.Configuration.AppConfigurations.SetConfigurationStore(Cenium.Framework.Configuration.AppConfigurationStore)">
            <summary>
            Sets the configuration storage handler. This is an infrastructure method and should not be used outside the framework.
            </summary>
            <param name="store">The configuration storage handler to use</param>
        </member>
        <member name="M:Cenium.Framework.Configuration.AppConfigurations.Register``1">
            <summary>
            Registers an entity as an application configuration object
            </summary>
        </member>
        <member name="M:Cenium.Framework.Configuration.AppConfigurations.GetConfiguration``1(System.Boolean)">
            <summary>
            Gets the configuration settings for a configuration entity
            </summary>
            <typeparam name="TEntity">The application configuration entity type.</typeparam>
            <param name="forceLoad">When <c>true</c>, forces the method to load the configuration from storage, even if the entry supports caching.</param>
            <returns>A application configuration entity with the current configuration values.</returns>
            <exception cref="T:Cenium.Framework.Language.TranslatableException"></exception>
        </member>
        <member name="M:Cenium.Framework.Configuration.AppConfigurations.SetConfiguration``1(``0)">
            <summary>
            Creates or updates a configuration setting.
            </summary>
            <typeparam name="TEntity">The application configuration entity type.</typeparam>
            <param name="value">The configuration values to set.</param>
            <returns>The stored configuration settings.</returns>
            <exception cref="T:Cenium.Framework.Language.TranslatableException"></exception>
        </member>
        <member name="T:Cenium.Framework.Configuration.AppConfigurationStore">
            <summary>
            Defines an application storage handler. Implementers must inherit from this class.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Configuration.AppConfigurationStore.#ctor">
            <summary>
            Initializes a new instance of the AppConfigurationStore class
            </summary>
        </member>
        <member name="M:Cenium.Framework.Configuration.AppConfigurationStore.GetConfiguration(System.String)">
            <summary>
            Gets the configuration associated with the identity argument from storage.
            </summary>
            <param name="identity">The identity of the configuration to get.</param>
            <returns>The configuration associated with the identity argument.</returns>
        </member>
        <member name="M:Cenium.Framework.Configuration.AppConfigurationStore.SetConfiguration(Cenium.Framework.Configuration.AppConfigurationStoreEntry)">
            <summary>
            Adds or updates the configuration to the storage.
            </summary>
            <param name="entry">The configuration entry to add or update.</param>
        </member>
        <member name="T:Cenium.Framework.Configuration.AppConfigurationStoreEntry">
            <summary>
            Represents an entry in the application configuration store
            </summary>
            <remarks>This is an infrastructure class and should not be used outside the framework.</remarks>
        </member>
        <member name="M:Cenium.Framework.Configuration.AppConfigurationStoreEntry.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the AppConfigurationStoreEntry class
            </summary>
            <param name="identity">The identity of the entry</param>
            <param name="values">The values associated with the entry, as a json document.</param>
        </member>
        <member name="P:Cenium.Framework.Configuration.AppConfigurationStoreEntry.Identity">
            <summary>
            Gets the identity.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Configuration.AppConfigurationStoreEntry.Values">
            <summary>
            Gets the values represented as a json document.
            </summary>
        </member>
        <member name="T:Cenium.Framework.Configuration.AuthenticationType">
            <summary>
            Defines possible authentication types for a server connection
            </summary>
        </member>
        <member name="F:Cenium.Framework.Configuration.AuthenticationType.Anonymous">
            <summary>
            The connection does not require authentication
            </summary>
        </member>
        <member name="F:Cenium.Framework.Configuration.AuthenticationType.SpecificUser">
            <summary>
            The connection requires a username and password
            </summary>
        </member>
        <member name="F:Cenium.Framework.Configuration.AuthenticationType.ApplicationUser">
            <summary>
            The connection uses the credentials of the process user
            </summary>
        </member>
        <member name="T:Cenium.Framework.Configuration.ClusterSection">
            <summary>
            Defines a configuration section for a cluster
            </summary>
        </member>
        <member name="M:Cenium.Framework.Configuration.ClusterSection.#ctor">
            <summary>
            Initializes a new instance of the ClusterSection class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Configuration.ClusterSection.Id">
            <summary>
            Gets or sets the cluster identifier
            </summary>
        </member>
        <member name="P:Cenium.Framework.Configuration.ClusterSection.Configuration">
            <summary>
            Gets the cluster section from the web.config
            </summary>
        </member>
        <member name="T:Cenium.Framework.Configuration.ServerConnectionSection">
            <summary>
            Defines a configuration section for a uri-based server connection
            </summary>
        </member>
        <member name="M:Cenium.Framework.Configuration.ServerConnectionSection.#ctor">
            <summary>
            Initializes a new instance of the ServerConnectionSection class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Configuration.ServerConnectionSection.Uri">
            <summary>
            Gets or sets the uri for the server connection
            </summary>
        </member>
        <member name="P:Cenium.Framework.Configuration.ServerConnectionSection.AuthenticationType">
            <summary>
            Gets or sets the authentication type to use for the connection
            </summary>
        </member>
        <member name="P:Cenium.Framework.Configuration.ServerConnectionSection.User">
            <summary>
            Gets or sets the user that is passed to the connection
            </summary>
        </member>
        <member name="P:Cenium.Framework.Configuration.ServerConnectionSection.Password">
            <summary>
            Gets or sets the password that is passed to the connection
            </summary>
        </member>
        <member name="P:Cenium.Framework.Configuration.ServerConnectionSection.Configuration">
            <summary>
            Gets the serverConnection section from the web.config
            </summary>
        </member>
        <member name="T:Cenium.Framework.Configuration.TelemetryConfiguration">
            <summary>
            Represents a configuration entry for telemetry
            </summary>
        </member>
        <member name="M:Cenium.Framework.Configuration.TelemetryConfiguration.#ctor">
            <summary>
            Initializes a new instance of the TelemetryConfiguration class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Configuration.TelemetryConfiguration.IsEnabled">
            <summary>
            Gets or sets a value indicating whether telemetry is enabled.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Configuration.TelemetryConfiguration.UseStandardKey">
            <summary>
            Gets or sets a value indicating whether telemetry is logged using the standard key. Only applicable if <c>IsEnabled</c> is true.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Configuration.TelemetryConfiguration.EnvironmentName">
            <summary>
            Gets or sets the environment short name. This must be specified if <c>IsEnabled</c> is true.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Configuration.TelemetryConfiguration.Environment">
            <summary>
            Gets or sets the environment identifier.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Configuration.TelemetryConfiguration.EnvironmentPostfix">
            <summary>
            Gets the environment prefix.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Configuration.TelemetryConfiguration.ApplicationKey">
            <summary>
            Gets or sets the application key. This must be specified if <c>UseStandardKey</c> is false.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Configuration.TelemetryConfiguration.Validate">
            <summary>
            Performs validation of the <c>TelemetryConfiguration</c> entry.
            </summary>
        </member>
        <member name="T:Cenium.Framework.Context.NamespaceDoc">
            <summary>
            Contains interfaces and classes related to property context
            </summary>
        </member>
        <member name="T:Cenium.Framework.Context.IPropertyContextFactory">
            <summary>
            Defines the interface for a factory capable of interacting with property contexts
            </summary>
        </member>
        <member name="M:Cenium.Framework.Context.IPropertyContextFactory.GetFirstOrDefault">
            <summary>
            Gets the first or default property context.
            </summary>
            <returns>An <c>IPropertyContext</c> instance</returns>
        </member>
        <member name="M:Cenium.Framework.Context.IPropertyContextFactory.GetById(System.Int64)">
            <summary>
            Gets a property context by its identifier
            </summary>
            <param name="propertyContextId">The property context identifier</param>
            <returns>An <c>IPropertyContext</c> instance</returns>
        </member>
        <member name="M:Cenium.Framework.Context.IPropertyContextFactory.GetByName(System.String)">
            <summary>
            Gets a property context by its name
            </summary>
            <param name="name">The property context name</param>
            <returns>An <c>IPropertyContext</c> instance</returns>
        </member>
        <member name="P:Cenium.Framework.Context.IPropertyContextFactory.PropertyContexts">
            <summary>
            Gets all property contexts
            </summary>
            <returns>An IEnumerable of PropertyContextReference instances</returns>
        </member>
        <member name="M:Cenium.Framework.Context.IPropertyContextFactory.Create(System.String,System.String)">
            <summary>
            Creates a new property context instance
            </summary>
            <param name="name">The name of the property context</param>
            <param name="description">The description for the property context</param>
            <returns>The <c>IPropertyContext</c> instance that was created</returns>
        </member>
        <member name="T:Cenium.Framework.Context.PropertyContextEntityAttribute">
            <summary>
            Identifies an entity class as a PropertyContext class
            </summary>
        </member>
        <member name="M:Cenium.Framework.Context.PropertyContextEntityAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the PropertyContextEntityAttribute class
            </summary>
            <param name="propertyName">The name of the property which contains the property context id</param>
        </member>
        <member name="P:Cenium.Framework.Context.PropertyContextEntityAttribute.PropertyName">
            <summary>
            Gets the name of the property which contains the property context id
            </summary>
        </member>
        <member name="T:Cenium.Framework.Context.PropertyContextManager">
            <summary>
            Static class that contains methods to access property contexts
            </summary>
        </member>
        <member name="M:Cenium.Framework.Context.PropertyContextManager.Register(Cenium.Framework.Context.IPropertyContextFactory)">
            <summary>
            Registers a factory that provides the actual implementation of the methods
            </summary>
            <param name="factory">The factory to register</param>
        </member>
        <member name="M:Cenium.Framework.Context.PropertyContextManager.GetDefault">
            <summary>
            Gets the first or default property context
            </summary>
            <returns>An <c>IPropertyContext</c> instance</returns>
        </member>
        <member name="M:Cenium.Framework.Context.PropertyContextManager.GetById(System.Int64)">
            <summary>
            Gets a specific property context by its identifier
            </summary>
            <param name="propertyContextId">The property context identifier</param>
            <returns>An PropertyContextReference instance</returns>
        </member>
        <member name="M:Cenium.Framework.Context.PropertyContextManager.GetByName(System.String)">
            <summary>
            Gets a specific property context by its identifier
            </summary>
            <param name="propertyContextName">The property context name</param>
            <returns>An PropertyContextReference instance</returns>
        </member>
        <member name="P:Cenium.Framework.Context.PropertyContextManager.PropertyContexts">
            <summary>
            Returns all property contexts
            </summary>
            <returns>An enumerable with all property contexts</returns>
        </member>
        <member name="M:Cenium.Framework.Context.PropertyContextManager.Create(System.String,System.String)">
            <summary>
            Creates a new property context
            </summary>
            <param name="name">The name of the property context</param>
            <param name="description">The description for the property context. This value may be null.</param>
            <returns>The created <c>IPropertyContext</c> instance</returns>
        </member>
        <member name="T:Cenium.Framework.Data.AbstractEntityReferenceFactory">
            <summary>
            Basic implementation of the IEntityReferenceFactory interface.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.AbstractEntityReferenceFactory.#ctor">
            <summary>
            Initializes a new instance of the AbstractEntityReferenceFactory class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.AbstractEntityReferenceFactory.ReferenceType">
            <summary>
            Gets the reference type name for the factory. This name is used to lookup an entity factory and should be unqiue for each <c>IEntityReferenceFactory</c> implementation
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.AbstractEntityReferenceFactory.EntityType">
            <summary>
            Gets the entity type that factory implements
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.AbstractEntityReferenceFactory.IsQueryable">
            <summary>
            Gets if the entity reference implements a query mechanism
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.AbstractEntityReferenceFactory.GetEntityReference">
            <summary>
            Gets an IEntityReference instance for the current thread or HTTP context
            </summary>
            <returns>
            an IEntityReference instance
            </returns>
        </member>
        <member name="M:Cenium.Framework.Data.AbstractEntityReferenceFactory.CreateQueryHandler(System.String,System.String)">
            <summary>
            Creates a <c>IQueryHandler</c> instance for an entity reference
            </summary>
            <param name="propertyName">The property name to create the query handler for</param>
            <param name="keyPropertyName">The key property which references the entity reference</param>
            <returns>
            An <c>IQueryHandler</c> instance
            </returns>
        </member>
        <member name="M:Cenium.Framework.Data.AbstractEntityReferenceFactory.CreateLookupInstance">
            <summary>
            Abstract method to create an IEntityReferenceLookup instance
            </summary>
            <returns>an IEntityReferenceLookup instance</returns>
        </member>
        <member name="M:Cenium.Framework.Data.AbstractEntityReferenceFactory.CreateQueryHandlerInstance(System.String,System.String)">
            <summary>
            Abstract method to create an IQueryHandler instance
            </summary>
            <returns>an IEntityReferenceLookup instance</returns>
        </member>
        <member name="T:Cenium.Framework.Data.AbstractEntityReferenceLookup">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.AbstractEntityReferenceLookup.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the AbstractEntityReferenceLookup class
            </summary>
        </member>
        <member name="T:Cenium.Framework.Data.Configuration.EnumerationConfiguration">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.Configuration.EnumerationConfiguration.Identity">
            <summary>
            Gets the identity of the enumeration
            </summary>
        </member>
        <member name="T:Cenium.Framework.Data.Configuration.EnumerationConfigurationOptions">
            <summary>
            Explain the purpose of the enumeration here
            </summary>
        </member>
        <member name="T:Cenium.Framework.Data.Configuration.EnumerationValue">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.Configuration.EnumerationValue.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the EnumerationValue class
            </summary>
        </member>
        <member name="T:Cenium.Framework.Data.ConnectionString">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.ConnectionString.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the ConnectionString class
            </summary>
        </member>
        <member name="T:Cenium.Framework.Data.ContextEntityReferenceLookupBase`3">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.ContextEntityReferenceLookupBase`3.#ctor">
            <summary>
            Initializes a new instance of the ContextEntityReferenceLookupBase class
            </summary>
        </member>
        <member name="T:Cenium.Framework.Data.CustomPropertyInfo">
            <summary>
            Represents information about a custom property
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.CustomPropertyInfo.#ctor(System.Guid,System.String)">
            <summary>
            Initializes a new instance of the CustomProperty class
            </summary>
            <param name="group">The group the property belongs to.</param>
            <param name="name">The name of the custom property.</param>
        </member>
        <member name="P:Cenium.Framework.Data.CustomPropertyInfo.GroupIdentity">
            <summary>
            Gets the group identity.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.CustomPropertyInfo.Group">
            <summary>
            Gets the group the property belongs to
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.CustomPropertyInfo.PropertyId">
            <summary>
            Gets or sets the property identifier.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.CustomPropertyInfo.Name">
            <summary>
            Gets or sets the property name.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.CustomPropertyInfo.DisplayName">
            <summary>
            Gets or sets the property display name (label).
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.CustomPropertyInfo.PropertyType">
            <summary>
            Gets or sets the property type
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.CustomPropertyInfo.Validation">
            <summary>
            Gets or sets the validation logic for the property
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.CustomPropertyInfo.IsValueRequired">
            <summary>
            Gets or sets a value indicating whether a value is required for this property
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.CustomPropertyInfo.DefaultValue">
            <summary>
            Gets or sets a default value for the property
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.CustomPropertyInfo.SortOrder">
            <summary>
            Gets or sets the sort order for this property
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.CustomPropertyInfo.Values">
            <summary>
            Gets or sets a list of acceptable values for this property.
            </summary>
        </member>
        <member name="T:Cenium.Framework.Data.CustomPropertyGroup">
            <summary>
            Represents a group of custom properties
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.CustomPropertyGroup.#ctor(System.Guid,Cenium.Framework.Language.LanguageConstant,Cenium.Framework.Language.LanguageConstant)">
            <summary>
            Initializes a new instance of the CustomPropertyGroup class
            </summary>
            <param name="identity">The identity of the group.</param>
            <param name="name">A display-friendly name for the group.</param>
            <param name="description">A description associated with the group.</param>
        </member>
        <member name="P:Cenium.Framework.Data.CustomPropertyGroup.Identity">
            <summary>
            Gets the property group identity
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.CustomPropertyGroup.Name">
            <summary>
            Gets the name of the group
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.CustomPropertyGroup.Description">
            <summary>
            Gets the description of the group
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.CustomPropertyGroup.Configure``1">
            <summary>
            Associates a specific entity with the custom property group.
            </summary>
            <typeparam name="TValueEntity">The entity type to associate with the property group</typeparam>
            <returns>The configuration for the value entity</returns>
        </member>
        <member name="M:Cenium.Framework.Data.CustomPropertyGroup.GetConfigurationForEntity(System.String)">
            <summary>
            Gets the configuration for a value entity by the entity type identifies
            </summary>
            <param name="entityTypeName">The identity associated with the entity type</param>
            <returns>The configuration associated with the specified entity type if one exists; otherwise null.</returns>
        </member>
        <member name="M:Cenium.Framework.Data.CustomPropertyGroup.GetDefaultValues``1(System.Action{``0})">
            <summary>
            Creates a collection of default custom property values
            </summary>
            <typeparam name="TValueEntity">The entity type that contains the custom property values.</typeparam>
            <param name="forEachAction">Action to execute for each custom property value. Can be null</param>
            <returns>A collection of the value entity type, initialized with default values.</returns>
        </member>
        <member name="M:Cenium.Framework.Data.CustomPropertyGroup.Get``1(System.Collections.Generic.ICollection{``0},System.Action{``0})">
            <summary>
            Gets the current set of values.
            </summary>
            <remarks>
            This method returns values for custom properties. Any missing properties will be added and non-existing properties removed from the current set. This method is typically
            used in a get-scenario (i.e. when getting values from a database) to normalize the set of values.
            </remarks>
            <typeparam name="TValueEntity">The entity type that contains the custom property values.</typeparam>
            <param name="values">A collection containing the current values.</param>
            <param name="forEachAction">Action to execute for each new property</param>
            <returns>A collection with all values for the custom property group.</returns>
        </member>
        <member name="M:Cenium.Framework.Data.CustomPropertyGroup.Merge``2(``0,System.Collections.Generic.ICollection{``1},System.Collections.Generic.ICollection{``1},System.Action{``1},System.Boolean)">
            <summary>
            Merge an existing set of custom properties with a new set of values.
            </summary>
            <remarks>
            This method merges an existing set of values with updated values. Any missing values will be added and obsolete values will be removed. Only changed values are updated.
            </remarks>
            <typeparam name="TContext">The data context type to use when adding/removing entries.</typeparam>
            <typeparam name="TValueEntity">The entity type that contains the custom property values.</typeparam>
            <param name="context">The entity context to use</param>
            <param name="original">The set of currently stored values.</param>
            <param name="newValues">The set of values to update.</param>
            <param name="forEachAction">Action to execute for each item</param>
            <param name="validate">Performs validation if set to true.</param>
        </member>
        <member name="T:Cenium.Framework.Data.CustomPropertyValueConfiguration">
            <summary>
            Represents configuration information for a custom property
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.CustomPropertyValueConfiguration.#ctor">
            <summary>
            Initializes a new instance of the CustomPropertyValueConfiguration class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.CustomPropertyValueConfiguration.HasIdentity">
            <summary>
            Returns true if the identity property has been set.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.CustomPropertyValueConfiguration.HasName">
            <summary>
            Returns true if the name property has been set
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.CustomPropertyValueConfiguration.NamePropertyName">
            <summary>
            Gets the name of the name property.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.CustomPropertyValueConfiguration.IdentityPropertyName">
            <summary>
            Gets the name of the identity property.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.CustomPropertyValueConfiguration.ValuePropertyName">
            <summary>
            Gets the name of the value property.
            </summary>
        </member>
        <member name="T:Cenium.Framework.Data.CustomPropertyValueConfiguration`1">
            <summary>
            Represents a generic configuration information for a specific entity type
            </summary>
            <typeparam name="TValueEntity">The type of the value entity.</typeparam>
        </member>
        <member name="P:Cenium.Framework.Data.CustomPropertyValueConfiguration`1.HasIdentity">
            <summary>
            Returns true if the identity property has been set.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.CustomPropertyValueConfiguration`1.HasName">
            <summary>
            Returns true if the name property has been set
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.CustomPropertyValueConfiguration`1.IdentityPropertyName">
            <summary>
            Gets the name of the identity property.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.CustomPropertyValueConfiguration`1.NamePropertyName">
            <summary>
            Gets the name of the name property.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.CustomPropertyValueConfiguration`1.ValuePropertyName">
            <summary>
            Gets the name of the value property.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.CustomPropertyValueConfiguration`1.HasValueProperty``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Sets the value property for the entity type (i.e. the property that contains the custom property value).
            </summary>
            <typeparam name="TProperty">The property type</typeparam>
            <param name="propertyExpression">An expression identifying the value property for the entity type.</param>
            <returns>The property value configuration object</returns>
        </member>
        <member name="M:Cenium.Framework.Data.CustomPropertyValueConfiguration`1.HasIdentityProperty``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Sets the identity property for the entity type (i.e. the property that contains the custom property identity).
            </summary>
            <typeparam name="TProperty">The property type</typeparam>
            <param name="propertyExpression">An expression identifying the identity property for the entity type.</param>
            <returns>The property value configuration object</returns>
        </member>
        <member name="M:Cenium.Framework.Data.CustomPropertyValueConfiguration`1.HasNameProperty``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Sets the name property for the entity type (i.e. the property that contains the custom property name).
            </summary>
            <typeparam name="TProperty">The property type</typeparam>
            <param name="propertyExpression">An expression identifying the name property for the entity type.</param>
            <returns>The property value configuration object</returns>
        </member>
        <member name="T:Cenium.Framework.Data.Entities.BoolValueResult">
            <summary>
            Represents an entity that contains a bool result value
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.Entities.BoolValueResult.#ctor">
            <summary>
            Initializes a new instance of the BoolValueResult class
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.Entities.BoolValueResult.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the BoolValueResult class
            </summary>
            <param name="value">The result value to set.</param>
        </member>
        <member name="P:Cenium.Framework.Data.Entities.BoolValueResult.Result">
            <summary>
            Gets or sets the result as a boolean value
            </summary>
        </member>
        <member name="T:Cenium.Framework.Data.Entities.EntityKeyReferenceInfo">
            <summary>
            Entity that represents an entity key reference
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.Entities.EntityKeyReferenceInfo.#ctor">
            <summary>
            Initializes a new instance of the EntityKeyReferenceInfo class
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.Entities.EntityKeyReferenceInfo.#ctor(Cenium.Framework.Data.EntityKeyReference)">
            <summary>
            Initializes a new instance of the EntityKeyReferenceInfo class
            </summary>
            <param name="reference">An <c>EntityKeyReference</c> used to initialize this instance.</param>
        </member>
        <member name="M:Cenium.Framework.Data.Entities.EntityKeyReferenceInfo.#ctor(Cenium.Framework.Data.EntityInstanceDescription)">
            <summary>
            Initializes a new instance of the EntityKeyReferenceInfo class
            </summary>
            <param name="description">An <c>EntityInstanceDescription</c> instance used to initialize this instance.</param>
        </member>
        <member name="P:Cenium.Framework.Data.Entities.EntityKeyReferenceInfo.EntityKey">
            <summary>
            Gets or sets the entity key.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.Entities.EntityKeyReferenceInfo.EntityName">
            <summary>
            Gets or sets the name of the entity.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.Entities.EntityKeyReferenceInfo.Description">
            <summary>
            Gets or sets the description.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.Entities.EntityKeyReferenceInfo.ReferenceType">
            <summary>
            Gets or sets the reference type
            </summary>
        </member>
        <member name="T:Cenium.Framework.Data.Entities.EntityNameEntry">
            <summary>
            Represents an entity that contains an entity identifier and display name
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.Entities.EntityNameEntry.#ctor">
            <summary>
            Initializes a new instance of the EntityNameEntry class
            </summary>
        </member>
        <member name="T:Cenium.Framework.Data.Entities.EntitySummaryInfo">
            <summary>
            Represents an entity that can be used to get summary information for an entity instance
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.Entities.EntitySummaryInfo.#ctor">
            <summary>
            Initializes a new instance of the EntitySummaryInfo class
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.Entities.EntitySummaryInfo.#ctor(System.Int64,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cenium.Framework.Data.Entities.EntitySummaryInfo"/> class.
            </summary>
            <param name="identity">The key associated with the entity</param>
            <param name="title">The title</param>
            <param name="subTitle">The sub title.</param>
            <param name="text">The text to display</param>
            <param name="imageRef">The image reference.</param>
        </member>
        <member name="T:Cenium.Framework.Data.Entities.IntValueResult">
            <summary>
            Represents an entity that contains an integer result value
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.Entities.IntValueResult.#ctor">
            <summary>
            Initializes a new instance of the IntValueResult class
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.Entities.IntValueResult.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the IntValueResult class
            </summary>
            <param name="value">The result value to set.</param>
        </member>
        <member name="P:Cenium.Framework.Data.Entities.IntValueResult.Result">
            <summary>
            Gets or sets the result as an integer value
            </summary>
        </member>
        <member name="T:Cenium.Framework.Data.Entities.StringValueResult">
            <summary>
            Represents an entity that contains a bool result value
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.Entities.StringValueResult.#ctor">
            <summary>
            Initializes a new instance of the StringValueResult class
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.Entities.StringValueResult.#ctor(System.String)">
            <summary>
            Initializes a new instance of the StringValueResult class
            </summary>
            <param name="value">The result value to set.</param>
        </member>
        <member name="P:Cenium.Framework.Data.Entities.StringValueResult.Result">
            <summary>
            Gets or sets the result as a string value
            </summary>
        </member>
        <member name="T:Cenium.Framework.Data.Entities.MessageItemEntry">
            <summary>
            Represents a user message, i.e. a message from the application to a user
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.Entities.MessageItemEntry.#ctor">
            <summary>
            Initializes a new instance of the MessageItemEntry class
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.Entities.MessageItemEntry.#ctor(Cenium.Framework.Language.LanguageConstant,Cenium.Framework.Language.LanguageConstant,Cenium.Framework.Data.Entities.MessageItemType)">
            <summary>
            Initializes a new instance of the MessageItemEntry class
            </summary>
            <param name="title">The language constant to use as a translatable title.</param>
            <param name="text">The language constant to use as a translatable text.</param>
            <param name="type">The type of message</param>
        </member>
        <member name="P:Cenium.Framework.Data.Entities.MessageItemEntry.Title">
            <summary>
            Gets or sets the message title.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.Entities.MessageItemEntry.Text">
            <summary>
            Gets or sets the message text.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.Entities.MessageItemEntry.MessageType">
            <summary>
            Gets or sets the type of the message.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.Entities.MessageItemEntry.MessageTypeValue">
            <summary>
            Gets the message type as an integer
            </summary>
        </member>
        <member name="T:Cenium.Framework.Data.Entities.MessageItemType">
            <summary>
            Defines the type for a MessageItemEntry
            </summary>
        </member>
        <member name="F:Cenium.Framework.Data.Entities.MessageItemType.Generic">
            <summary>
            Message is a generic message
            </summary>
        </member>
        <member name="F:Cenium.Framework.Data.Entities.MessageItemType.Success">
            <summary>
            Message is a success message
            </summary>
        </member>
        <member name="F:Cenium.Framework.Data.Entities.MessageItemType.Info">
            <summary>
            Message is an information message
            </summary>
        </member>
        <member name="F:Cenium.Framework.Data.Entities.MessageItemType.Warning">
            <summary>
            Message is a warning message
            </summary>
        </member>
        <member name="F:Cenium.Framework.Data.Entities.MessageItemType.Error">
            <summary>
            Message is an error message
            </summary>
        </member>
        <member name="T:Cenium.Framework.Data.Entities.GuidListEntry">
            <summary>
            Standard entity for use in lists where the identifier is a GUID
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.Entities.GuidListEntry.Id">
            <summary>
            Gets or sets the entry identifier.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.Entities.GuidListEntry.Name">
            <summary>
            Gets or sets the entry name.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.Entities.GuidListEntry.Description">
            <summary>
            Gets or sets the entry description.
            </summary>
        </member>
        <member name="T:Cenium.Framework.Data.Entities.ListEntry">
            <summary>
            Standard entity for use in lists where the identifier is a long value
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.Entities.ListEntry.Id">
            <summary>
            Gets or sets the entry identifier.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.Entities.ListEntry.DisplayName">
            <summary>
            Gets or sets the entry display name.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.Entities.ListEntry.Description">
            <summary>
            Gets or sets the entry description.
            </summary>
        </member>
        <member name="T:Cenium.Framework.Data.Entities.StringListEntry">
            <summary>
            Standard entity for use in lists where the identifier is a string value
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.Entities.StringListEntry.Id">
            <summary>
            Gets or sets the entry identifier.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.Entities.StringListEntry.Name">
            <summary>
            Gets or sets the entry display name.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.Entities.StringListEntry.Description">
            <summary>
            Gets or sets the entry description.
            </summary>
        </member>
        <member name="T:Cenium.Framework.Data.Entities.TextParameter">
            <summary>
            Simple entity with a single text property
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.Entities.TextParameter.#ctor">
            <summary>
            Initializes a new instance of the StringParameter class
            </summary>
        </member>
        <member name="T:Cenium.Framework.Data.EntityInstanceDescription">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.EntityInstanceDescription.#ctor(Cenium.Framework.Data.EntityKeyReference,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the EntityInstanceDescription class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.EntityInstanceDescription.KeyReference">
            <summary>
            Gets the entity key.
            </summary>
        </member>
        <member name="T:Cenium.Framework.Data.EntityVariantInfo">
            <summary>
            Represents information about an entity variant (i.e. an entity that is a variant or view of a base entity)
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.EntityVariantInfo.#ctor">
            <summary>
            Initializes a new instance of the EntityVariantInfo class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.EntityVariantInfo.IsVariant">
            <summary>
            Gets if the entity is a variant
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.EntityVariantInfo.VariantOfEntityName">
            <summary>
            Gets the name of the entity that is the base entity, or null if the entity is not a variant
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.EntityVariantInfo.VariantOfType">
            <summary>
            Gets the type that the entity is a variant of, or null if the entity is not a variant
            </summary>
            <value>The type of the variant of.</value>
        </member>
        <member name="M:Cenium.Framework.Data.EntityVariantInfo.GetVariantInfo(System.String)">
            <summary>
            Gets the variant information for an entity name
            </summary>
            <param name="entityName">Name of the entity.</param>
            <returns>A <c>EntityVariantInfo</c> instance for the entity.</returns>
        </member>
        <member name="T:Cenium.Framework.Data.Enumeration">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.Enumeration.#ctor">
            <summary>
            Initializes a new instance of the Enumeration class
            </summary>
        </member>
        <member name="T:Cenium.Framework.Data.EnumerationReferenceAttribute">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.EnumerationReferenceAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the EnumerationReferenceAttribute class. Use this variant when setting the attribute on the class
            </summary>
            <param name="identity">The enumeration identity.</param>
            <param name="propertyName">The name of the property that is an enumeration value.</param>
        </member>
        <member name="M:Cenium.Framework.Data.EnumerationReferenceAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the EnumerationReferenceAttribute class. Use this variant when setting the attribute on a property.
            </summary>
            <param name="identity">The enumeration identity.</param>
            <param name="propertyName">The name of the property that is an enumeration value.</param>
        </member>
        <member name="T:Cenium.Framework.Data.Enumerations">
            <summary>
            Contains methods for defining enumerations
            </summary>
        </member>
        <member name="T:Cenium.Framework.Data.IEntityCollection">
            <summary>
            Explain the purpose of the interface here
            </summary>
        </member>
        <member name="T:Cenium.Framework.Data.IEntityContext">
            <summary>
            Explain the purpose of the interface here
            </summary>
        </member>
        <member name="T:Cenium.Framework.Data.Infrastructure.DbBulkOperations">
            <summary>
            Defines database bulk operations
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.Infrastructure.DbBulkOperations.#ctor">
            <summary>
            Initializes a new instance of the DbBulkOperations class
            </summary>
        </member>
        <member name="T:Cenium.Framework.Data.Infrastructure.EntityOperationHandler">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.Infrastructure.EntityOperationHandler.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the EntityCopyHandler class
            </summary>
        </member>
        <member name="T:Cenium.Framework.Data.Infrastructure.EntityPropertyValueHandler">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.Infrastructure.EntityPropertyValueHandler.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            Initializes a new instance of the EntityPropertyValueHandler class
            </summary>
        </member>
        <member name="T:Cenium.Framework.Data.Infrastructure.Query.DefaultQueryHandler">
            <summary>
            Provides a default implementation of a query handler
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.Infrastructure.Query.DefaultQueryHandler.#ctor">
            <summary>
            Initializes a new instance of the DefaultQueryHandler class
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.Infrastructure.Query.DefaultQueryHandler.Apply(System.Linq.IQueryable,Cenium.Framework.Data.IQueryExpression)">
            <summary>
            Applies the query expression to the IQueryable
            </summary>
            <param name="query">The IQueryable to apply the expression to</param>
            <param name="expression">The expression to apply</param>
            <returns>
            A modified IQueryable with the expression applied
            </returns>
            <exception cref="T:Cenium.Framework.Data.QueryException">InvalidPropertyName;Invalid property name {0} in query.</exception>
        </member>
        <member name="M:Cenium.Framework.Data.Infrastructure.Query.DefaultQueryHandler.GetPropertyInfo(System.Type,System.String)">
            <summary>
            Gets the PropertyInfo instance for the property name. This method handles nested properties
            </summary>
            <param name="type">The type which contains the property</param>
            <param name="propertyName">The name of the property</param>
            <returns>The PropertyInfo instance for the property</returns>
        </member>
        <member name="T:Cenium.Framework.Data.Infrastructure.Query.DefaultQuery">
            <summary>
            Represents a query expression for a Query method
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.Infrastructure.Query.DefaultQuery.#ctor">
            <summary>
            Initializes a new instance of the QueryExpression class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.Infrastructure.Query.DefaultQuery.Expressions">
            <summary>
            Gets an IEnumerable of IQueryExpression instances the query contains
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.Infrastructure.Query.DefaultQuery.GetQueryHandler(System.String)">
            <summary>
            Gets the query handler for a specified property
            </summary>
            <param name="propertyName">The property to get the query handler for</param>
            <returns></returns>
        </member>
        <member name="P:Cenium.Framework.Data.Infrastructure.Query.DefaultQuery.SortExpression">
            <summary>
            Gets the sort order expression
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.Infrastructure.Query.DefaultQuery.Add(System.String,Cenium.Framework.Data.QueryOperator,System.String[])">
            <summary>
            Adds a query expression to the query
            </summary>
            <param name="propertyName">The name of the property to query on</param>
            <param name="oper">The QueryOperator to use</param>
            <param name="operands">The operands in the query expression</param>
        </member>
        <member name="M:Cenium.Framework.Data.Infrastructure.Query.DefaultQuery.Add(Cenium.Framework.Data.IQueryExpression)">
            <summary>
            Adds a query expression to the query
            </summary>
            <param name="expression">The expression to add</param>
        </member>
        <member name="P:Cenium.Framework.Data.Infrastructure.Query.DefaultQuery.IsEmpty">
            <summary>
            Returns true if the query is empty
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.Infrastructure.Query.DefaultQuery.SetDefaultQueryHandler(Cenium.Framework.Data.IQueryHandler)">
            <summary>
            Sets the default query handler to use when no property specific handlers are found
            </summary>
            <param name="handler">The query handler to use</param>
        </member>
        <member name="M:Cenium.Framework.Data.Infrastructure.Query.DefaultQuery.SetQueryHandler(System.String,Cenium.Framework.Data.IQueryHandler)">
            <summary>
            Sets the query handler to use for a specific property
            </summary>
            <param name="propertyName">The name of the property which will use this query handler</param>
            <param name="handler">The handler to use</param>
        </member>
        <member name="M:Cenium.Framework.Data.Infrastructure.Query.DefaultQuery.ToString">
            <summary>
            Returns a string representation of the query
            </summary>
            <returns>a string representation of the query</returns>
        </member>
        <member name="M:Cenium.Framework.Data.Infrastructure.Query.DefaultQuery.ParseQuery(System.String)">
            <summary>
            Implementation of the parsing logic
            </summary>
            <param name="query">The query string to parse</param>
        </member>
        <member name="M:Cenium.Framework.Data.Infrastructure.Query.DefaultQuery.ParseSortOrder(System.String)">
            <summary>
            Implementation of the sort order parsing logic
            </summary>
            <param name="orderBy">The orderby expression to parse</param>
        </member>
        <member name="T:Cenium.Framework.Data.Infrastructure.Query.DefaultQueryExpression">
            <summary>
            Represents a query expression element
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.Infrastructure.Query.DefaultQueryExpression.#ctor(System.String)">
            <summary>
            Initializes a new instance of the QueryExpression class
            </summary>
            <param name="expression">The expression to evaluate</param>
        </member>
        <member name="M:Cenium.Framework.Data.Infrastructure.Query.DefaultQueryExpression.#ctor(System.String,Cenium.Framework.Data.QueryOperator,System.String[])">
            <summary>
            Initializes a new instance of the QueryExpression class
            </summary>
            <param name="propertyName">The property name of the expression</param>
            <param name="oper">The operator to use</param>
            <param name="operands">The operands to use in the expression</param>
        </member>
        <member name="P:Cenium.Framework.Data.Infrastructure.Query.DefaultQueryExpression.PropertyName">
            <summary>
            Gets the property name for this expression
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.Infrastructure.Query.DefaultQueryExpression.Operator">
            <summary>
            Gets the operator name for this expression
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.Infrastructure.Query.DefaultQueryExpression.Operands">
            <summary>
            Gets the list of parameters for this expression
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.Infrastructure.Query.DefaultQueryExpression.ToString">
            <summary>
            Returns a string representation of the expression
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cenium.Framework.Data.Infrastructure.Query.DefaultQueryExpression.PackOperands">
            <summary>
            Creates a string list of the operands
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cenium.Framework.Data.Infrastructure.Query.DefaultQueryExpression.Validate">
            <summary>
            Validates the QueryExpression instance
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.Infrastructure.Query.DefaultQueryExpression.Parse(System.String)">
            <summary>
            Parses a string expression into a QueryExpression
            </summary>
            <param name="condition"></param>
        </member>
        <member name="M:Cenium.Framework.Data.Infrastructure.Query.DefaultQueryExpression.GetConditionElement(System.String@,System.Char,System.Boolean)">
            <summary>
            Returns an element of the expression string
            </summary>
            <param name="condition">The condition to evaluate.</param>
            <param name="delim">The delimiter that ends the element</param>
            <param name="requireDelimiter">Determines if a delimiter is required</param>
            <returns>The element</returns>
        </member>
        <member name="T:Cenium.Framework.Data.Infrastructure.Query.QueryParser">
            <summary>
            The QueryParser class takes a query string and parses it into a set of query conditions. The Apply method will apply the query to an IEnumerable
            as a set of Linq queries.
            </summary>
            <remarks>
            <para>
            A query string is expressed in terms of property to evaluate, operator to apply and parameters on the form
            <c>[property name]:[operator]([parameters])</c>, for instance <c>MyProperty:Equals(100)</c>. Each query expression is separated by ampersand (&amp;).
            </para>
            <para>
            The query parser will also evaluate sort order. Sort orders are expressed on the form <c>[property name]:[direction]</c> where direction is either <c>asc</c>
            or <c>desc</c>, for instance <c>MyProperty:asc</c>. Multiple sort order criterias are separated by ampersand (&amp;). The direction
            qualifier is optional, if not specified ascending is assumed.
            </para>
            </remarks>
        </member>
        <member name="M:Cenium.Framework.Data.Infrastructure.Query.QueryParser.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ServiceQuery class
            </summary>
            <param name="orderby">The order by to apply</param>
        </member>
        <member name="P:Cenium.Framework.Data.Infrastructure.Query.QueryParser.OrderBy">
            <summary>
            Gets the orderby statement from the parsed order by statement
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.Infrastructure.Query.QueryParser.ParseOrderBy(System.String)">
            <summary>
            Implementation of the sort order parsing logic
            </summary>
            <param name="orderBy">The orderby expression to parse</param>
        </member>
        <member name="T:Cenium.Framework.Data.Providers.CustomPropertyProvider">
            <summary>
            Base class for custom property providers. This is an infrastucture class and should only be used in the framework.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.Providers.CustomPropertyProvider.#ctor">
            <summary>
            Initializes a new instance of the CustomPropertyProvider class
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.Providers.CustomPropertyProvider.Add(System.Collections.Generic.IEnumerable{Cenium.Framework.Data.CustomPropertyInfo})">
            <summary>
            Adds a group of custom properties to a storage
            </summary>
            <param name="properties">The properties to add.</param>
        </member>
        <member name="M:Cenium.Framework.Data.Providers.CustomPropertyProvider.Get(System.Guid)">
            <summary>
            Gets a read-only collection of custom properties for a specified group identity
            </summary>
            <param name="group">The group identity associated with the custom properties.</param>
            <returns>A read-only collection of custom properties for a specified group identity.</returns>
        </member>
        <member name="M:Cenium.Framework.Data.Providers.CustomPropertyProvider.Add``2(``0,``1)">
            <summary>
            Adds an entity to the specified entity context.
            </summary>
            <typeparam name="TContext">The entity context type.</typeparam>
            <typeparam name="TEntity">The entity type</typeparam>
            <param name="context">The context to add the entity to.</param>
            <param name="entity">The entity to add.</param>
            <returns>The newly added entity.</returns>
        </member>
        <member name="M:Cenium.Framework.Data.Providers.CustomPropertyProvider.Remove``2(``0,``1)">
            <summary>
            Removes an entity from the specified entity context.
            </summary>
            <typeparam name="TContext">The entity context type.</typeparam>
            <typeparam name="TEntity">The entity type</typeparam>
            <param name="context">The context to remove the entity from.</param>
            <param name="entity">The entity to remove.</param>
            <returns>The removed entity.</returns>
        </member>
        <member name="M:Cenium.Framework.Data.Providers.CustomPropertyProvider.Query``2(``0)">
            <summary>
            Creates a query for the specified entity type
            </summary>
            <typeparam name="TContext">The entity context type.</typeparam>
            <typeparam name="TEntity">The entity type</typeparam>
            <param name="context">The context to create the query for.</param>
            <returns>An IQueryable for the entity.</returns>
        </member>
        <member name="T:Cenium.Framework.Data.CustomPropertyType">
            <summary>
            Defines available custom property types
            </summary>
        </member>
        <member name="T:Cenium.Framework.Data.CustomPropertyValidation">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="T:Cenium.Framework.Data.DataManager">
            <summary>
            Contains methods for handling data
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.DataManager.RegisterCustomPropertyGroup(Cenium.Framework.Data.CustomPropertyGroup)">
            <summary>
            Registers a custom property group
            </summary>
            <param name="group">The group to register</param>
            <returns>The custom property group that was registered.</returns>
        </member>
        <member name="M:Cenium.Framework.Data.DataManager.GetCustomPropertyGroupByIdentity(System.Guid)">
            <summary>
            Gets a custom property group by its identity.
            </summary>
            <param name="identity">The identity associated with the custom property group.</param>
            <returns>The custom property group associated with the identity specified, or null if the property group has not been registered.</returns>
        </member>
        <member name="P:Cenium.Framework.Data.DataManager.CustomPropertyGroups">
            <summary>
            Gets a read-only collection of all custom property groups that has been registered.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.DataManager.AddCustomProperties(System.Collections.Generic.IEnumerable{Cenium.Framework.Data.CustomPropertyInfo})">
            <summary>
            Adds a set of custom properties to a group.
            </summary>
            <remarks>
            This method allows you to programmatically add custom properties to a group. This method is intended used for migration purposes.
            </remarks>
            <param name="properties">The properties to add.</param>
        </member>
        <member name="M:Cenium.Framework.Data.DataManager.GetPropertiesForGroup(System.Guid)">
            <summary>
            Gets a read-only collection of all properties associated with a group identity
            </summary>
            <param name="groupId">The identifier for the group</param>
            <returns>A read-only collection of all properties associated with a group identity.</returns>
        </member>
        <member name="M:Cenium.Framework.Data.DataManager.SetCustomPropertyProvider(Cenium.Framework.Data.Providers.CustomPropertyProvider)">
            <summary>
            Registers a storage provider for custom property groups. This is an infrastructure method and should not be called outside the framework.
            </summary>
            <param name="provider">The provider to register.</param>
        </member>
        <member name="T:Cenium.Framework.Data.DbNames">
            <summary>
            Contains methods to create names that are database safe
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.DbNames.CreateSafeSequenceName(System.String)">
            <summary>
            Creates a valid database name for a sequence
            </summary>
            <param name="name">The the name or identifier to create a safe name for.</param>
            <returns>A valid database name for a sequence.</returns>
        </member>
        <member name="T:Cenium.Framework.Data.EntityInstance">
            <summary>
            Represents an instance of an entity
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.EntityInstance.#ctor">
            <summary>
            Initializes a new instance of the EntityInstance class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.EntityInstance.Item(System.String)">
            <summary>
            Gets the value of the specified property name
            </summary>
            <param name="propertyName">Name of the property to get the value for.</param>
            <returns>The value associated with the specified property.</returns>
        </member>
        <member name="T:Cenium.Framework.Data.EntityKeyCopyReference">
            <summary>
            Contains two <c>EntityKeyReference</c> instances; a source and a target
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.EntityKeyCopyReference.#ctor(Cenium.Framework.Data.EntityKeyReference,Cenium.Framework.Data.EntityKeyReference)">
            <summary>
            Initializes a new instance of the EntityKeyCopyReference class
            </summary>
            <param name="source">The source to copy from.</param>
            <param name="target">The target to copy to.</param>
        </member>
        <member name="P:Cenium.Framework.Data.EntityKeyCopyReference.Source">
            <summary>
            Gets the reference source
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.EntityKeyCopyReference.IsSourceAndTargetSame">
            <summary>
            Gets a value indicating whether the source and the target is the same reference
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.EntityKeyCopyReference.Create(Cenium.Framework.Data.EntityKeyReference,Cenium.Framework.Data.EntityKeyReference)">
            <summary>
            Creates a new <c>EntityKeyCopyReference</c> instance
            </summary>
            <param name="source">The source to copy from.</param>
            <param name="target">The target to copy to.</param>
        </member>
        <member name="T:Cenium.Framework.Data.EntityReferenceFactoryAttribute">
            <summary>
            Creates a default entity reference factory
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.EntityReferenceFactoryAttribute.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <c>EntityReferenceFactoryAttribute</c> class
            </summary>
            <param name="entityType">The entity type that the entity reference returns.</param>
            <param name="identity">The identity associated with the entity reference.</param>
        </member>
        <member name="P:Cenium.Framework.Data.EntityReferenceFactoryAttribute.Identity">
            <summary>
            Gets the identity associated with the entity reference
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.EntityReferenceFactoryAttribute.EntityType">
            <summary>
            Gets the entity type that the entity reference returns
            </summary>
        </member>
        <member name="T:Cenium.Framework.Data.DefaultEntityReferenceFactory">
            <summary>
            Provides a default implementation of a entity reference factory.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.DefaultEntityReferenceFactory.#ctor(System.String,System.Type,System.Type,System.Boolean)">
            <summary>
            Initializes a new instance of the DefaultEntityReferenceFactory class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.DefaultEntityReferenceFactory.EntityType">
            <summary>
            Gets the entity type that factory implements
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.DefaultEntityReferenceFactory.IsQueryable">
            <summary>
            Gets if the entity reference implements a query mechanism
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.DefaultEntityReferenceFactory.ReferenceType">
            <summary>
            Gets the reference type name for the factory. This name is used to lookup an entity factory and should be unqiue for each <c>IEntityReferenceFactory</c> implementation
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.DefaultEntityReferenceFactory.CreateQueryHandler(System.String,System.String)">
            <summary>
            Creates a <c>IQueryHandler</c> instance for an entity reference
            </summary>
            <param name="propertyName">The property name to create the query handler for</param>
            <param name="keyPropertyName">The key property which references the entity reference</param>
            <returns>
            An <c>IQueryHandler</c> instance
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Cenium.Framework.Data.DefaultEntityReferenceFactory.GetEntityReference">
            <summary>
            Gets an IEntityReference instance for the current thread or HTTP context
            </summary>
            <returns>
            an IEntityReference instance
            </returns>
        </member>
        <member name="M:Cenium.Framework.Data.DefaultEntityReferenceFactory.GetReferenceHandlerDelegate(System.Type)">
            <summary>
            Gets the reference handler delegate.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="T:Cenium.Framework.Data.EntityReferenceLookupBase`2">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.EntityReferenceLookupBase`2.#ctor">
            <summary>
            Initializes a new instance of the EntityReferenceLookupBase class
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.EntityReferenceLookupBase`2.GetEntityReference(System.Object[])">
            <summary>
            Gets an entity reference based on the reference keys
            </summary>
            <param name="keys">The keys that identifies the reference instance</param>
            <returns>An entity reference, or null if the reference does not exist</returns>
        </member>
        <member name="M:Cenium.Framework.Data.EntityReferenceLookupBase`2.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.EntityReferenceLookupBase`2.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="dispose"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Cenium.Framework.Data.EntityReferenceProperty">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.EntityReferenceProperty.#ctor(System.Type,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the EntityReferenceProperty class
            </summary>
        </member>
        <member name="T:Cenium.Framework.Data.IAttachedNoteProvider">
            <summary>
            Defines the contract for an attached note provider
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.IAttachedNoteProvider.GetNotesForEntity(Cenium.Framework.Data.EntityKeyReference,System.Boolean)">
            <summary>
            Gets the notes associated with an entity instance as specified by the entity key reference
            </summary>
            <param name="key">The entity key reference</param>
            <param name="includeInherited">Specifies if the result should include inherited notes or not.</param>
            <returns>A read-only collection of <c>NoteItem</c> instances.</returns>
        </member>
        <member name="M:Cenium.Framework.Data.IAttachedNoteProvider.GetNotesForReport(System.String,Cenium.Framework.Data.EntityKeyReference,System.Boolean)">
            <summary>
            Gets the notes associated with an entity instance as specified by the entity key reference that should be included on the specified report.
            </summary>
            <param name="reportId">The report type identity.</param>
            <param name="key">The entity key reference</param>
            <param name="includeInherited">Specifies if the result should include inherited notes or not.</param>
            <returns>A read-only collection of <c>NoteItem</c> instances.</returns>
        </member>
        <member name="T:Cenium.Framework.Data.IPreparedEntityReferenceLookup">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="T:Cenium.Framework.Data.ISaveContext">
            <summary>
            Defines the contract for units of work that can participate in an entity context save operation
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.ISaveContext.ContextType">
            <summary>
            Gets the type that defines the context
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.ISaveContext.Validate">
            <summary>
            Perform validation - this is performed before the entity context is saved
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.ISaveContext.Save">
            <summary>
            Saves this unit of work
            </summary>
        </member>
        <member name="T:Cenium.Framework.Data.LookupCollection">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="T:Cenium.Framework.Data.LookupEntry">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.LookupEntry.#ctor(System.Object,System.String,System.String)">
            <summary>
            Initializes a new instance of the LookupEntry class
            </summary>
        </member>
        <member name="T:Cenium.Framework.Data.LookupManager">
            <summary>
            Contains methods to register and get lookup instances
            </summary>
        </member>
        <member name="T:Cenium.Framework.Data.NoteItem">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.NoteItem.#ctor">
            <summary>
            Initializes a new instance of the AttachedNoteItem class
            </summary>
        </member>
        <member name="T:Cenium.Framework.Data.AttachedNoteManager">
            <summary>
            Contains method for handling attached notes
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.AttachedNoteManager.SetProvider(Cenium.Framework.Data.IAttachedNoteProvider)">
            <summary>
            Sets the attached note provider. This is an infrastructure method and should only be called by the framework.
            </summary>
            <param name="provider">The provider to set.</param>
        </member>
        <member name="M:Cenium.Framework.Data.AttachedNoteManager.GetNotesForEntity(Cenium.Framework.Data.EntityKeyReference,System.Boolean)">
            <summary>
            Gets the notes associated with an entity instance as specified by the entity key reference
            </summary>
            <param name="key">The entity key reference</param>
            <param name="includeInherited">Specifies if the result should include inherited notes or not.</param>
            <returns>A read-only collection of <c>NoteItem</c> instances.</returns>
        </member>
        <member name="M:Cenium.Framework.Data.AttachedNoteManager.GetNotesForReport(System.String,Cenium.Framework.Data.EntityKeyReference,System.Boolean)">
            <summary>
            Gets the notes associated with an entity instance as specified by the entity key reference that should be included on the specified report.
            </summary>
            <param name="reportId">The report type identity.</param>
            <param name="key">The entity key reference</param>
            <param name="includeInherited">Specifies if the result should include inherited notes or not.</param>
            <returns>A read-only collection of <c>NoteItem</c> instances.</returns>
        </member>
        <member name="T:Cenium.Framework.Data.BinaryResult">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.BinaryResult.#ctor(System.Byte[],System.String)">
            <summary>
            Initializes a new instance of the BinaryResult class
            </summary>
        </member>
        <member name="T:Cenium.Framework.Data.DataQueryException">
            <summary>
            The exception that is thrown when a data query is invalid
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.DataQueryException.#ctor(Cenium.Framework.Language.LanguageConstant,System.Object[])">
            <summary>
            Initializes a new instance of the DataQueryException class
            </summary>
            <param name="message">The language constant that contains the error message.</param>
            <param name="args">An object array that contains zero or more objects to format</param>
        </member>
        <member name="M:Cenium.Framework.Data.DataQueryException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the DataQueryException class. Use this form when the error is unknown.
            </summary>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified. </param>
        </member>
        <member name="T:Cenium.Framework.Data.EntityUtility">
            <summary>
            Contains utility methods for handling entities
            </summary>
        </member>
        <member name="T:Cenium.Framework.Data.EntityUtility.AttachedObjectReferenceHandlerDelegate">
            <summary>
            Defines a delegate for getting references (foreign keys) from an object
            </summary>
            <param name="key">The key reference to the object</param>
            <returns>A collection of EntityKeyReference instances representing the foreign keys</returns>
        </member>
        <member name="M:Cenium.Framework.Data.EntityUtility.RegisterEntityInstanceDescriptionFactory``1(System.Func{``0,System.String})">
            <summary>
            Registers a factory method for getting a description from an entity instance
            </summary>
            <typeparam name="TEntity">The entity instance to register the factory for</typeparam>
            <param name="factory">The factory to register</param>
        </member>
        <member name="M:Cenium.Framework.Data.EntityUtility.GetEntityInstanceDescription(System.Object)">
            <summary>
            Gets an instance description from an entity instance
            </summary>
            <param name="entity">The entity to get the description from</param>
            <returns>A string identifying the entity instance</returns>
        </member>
        <member name="M:Cenium.Framework.Data.EntityUtility.RegisterAttachedObjectReferenceHandler``1(Cenium.Framework.Data.EntityUtility.AttachedObjectReferenceHandlerDelegate)">
            <summary>
            Registers an attached object reference handler and assoociates it with the specified type
            </summary>
            <typeparam name="TEntity">The entity Type to associate the handler with.</typeparam>
            <param name="handler">The handler to register.</param>
        </member>
        <member name="M:Cenium.Framework.Data.EntityUtility.RegisterAttachedObjectsReferenceHandler``1(Cenium.Framework.Data.EntityUtility.AttachedObjectsReferenceHandlerDelegate)">
            <summary>
            Registers an attached objects reference handler and assoociates it with the specified type
            </summary>
            <typeparam name="TEntity">The entity Type to associate the handler with.</typeparam>
            <param name="handler">The handler to register.</param>
        </member>
        <member name="M:Cenium.Framework.Data.EntityUtility.GetAttachedObjectReferenceHandlerForEntity(System.Type)">
            <summary>
            Gets the registered attached object reference handler for a specified entity type.
            </summary>
            <param name="entityType">The entity type to get the handler for.</param>
            <returns>The registered attached object reference handler for a specified entity type, or null if no handler is associated with the specified type.</returns>
        </member>
        <member name="M:Cenium.Framework.Data.EntityUtility.GetAttachedObjectsReferenceHandlerForEntity(System.Type)">
            <summary>
            Gets the registered attached objects reference handler for a specified entity type.
            </summary>
            <param name="entityType">The entity type to get the handler for.</param>
            <returns>The registered attached objects reference handler for a specified entity type, or null if no handler is associated with the specified type.</returns>
        </member>
        <member name="M:Cenium.Framework.Data.EntityUtility.GetAttachedObjectReferenceHandlerForEntity(System.String)">
            <summary>
            Gets the registered attached object reference handler for a specified entity name.
            </summary>
            <param name="entityName">Name of the entity to get the handler for.</param>
            <returns>The registered attached object reference handler for a specified entity, or null if no handler is associated with the specified entity.</returns>
        </member>
        <member name="M:Cenium.Framework.Data.EntityUtility.GetAttachedObjectsReferenceHandlerForEntity(System.String)">
            <summary>
            Gets the registered attached objects reference handler for a specified entity name.
            </summary>
            <param name="entityName">Name of the entity to get the handler for.</param>
            <returns>The registered attached objects reference handler for a specified entity, or null if no handler is associated with the specified entity.</returns>
        </member>
        <member name="M:Cenium.Framework.Data.EntityUtility.Copy``1(``0,System.String[])">
            <summary>
            Creates a deep copy of an entity instance
            </summary>
            <typeparam name="TEntity">The entity type.</typeparam>
            <param name="entity">The entity instance to copy.</param>
            <param name="navigationProperties">The navigation properties to include in the copy operation.</param>
            <returns>A copy of the entity</returns>
        </member>
        <member name="T:Cenium.Framework.Data.EntityAttribute">
            <summary>
            Specifies that a class is an entity type class.
            </summary>
            <remarks>
            This attribute is used to identify classes that should be inspected upon generating services and component interfaces.
            When a class that has the EntityAttribute is encountered through inspection, a proxy class is generated.<br/>
            Note that this attribute is not specific to data access - it simply means this is a class that may be serialized and used externally.
            </remarks>
        </member>
        <member name="M:Cenium.Framework.Data.EntityAttribute.#ctor">
            <summary>
            Initializes a new instance of the EntityAttribute class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.EntityAttribute.IsPrivate">
            <summary>
            Gets or sets if the entity is private, i.e. the entity will not be available through any service
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.EntityAttribute.IsTranslatable">
            <summary>
            Gets or sets if the entity can be translated. Default is true.
            </summary>
        </member>
        <member name="T:Cenium.Framework.Data.DbComputedColumnAttribute">
            <summary>
            This attribute lets the DbScript generator tool know that you should add a computed column to a specified entity type
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.DbComputedColumnAttribute.#ctor(System.Type,System.String,System.String)">
            <summary>
            Initializes a new instance of the DbComputedColumn class
            </summary>
            <param name="entityType">The entity type to create a computed column for</param>
            <param name="columnName">The column name to add</param>
            <param name="expression">The computation expression</param>
        </member>
        <member name="P:Cenium.Framework.Data.DbComputedColumnAttribute.EntityType">
            <summary>
            Gets the type of the entity to create a computed column for
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.DbComputedColumnAttribute.ColumnName">
            <summary>
            Gets the name of the column to generate
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.DbComputedColumnAttribute.Expression">
            <summary>
            Gets the expression associated with the column.
            </summary>
        </member>
        <member name="T:Cenium.Framework.Data.EntityIndexType">
            <summary>
            Defines the type of entity index
            </summary>
        </member>
        <member name="F:Cenium.Framework.Data.EntityIndexType.Standard">
            <summary>
            Index is a standard index
            </summary>
        </member>
        <member name="F:Cenium.Framework.Data.EntityIndexType.Partial">
            <summary>
            Index is a partial index
            </summary>
        </member>
        <member name="T:Cenium.Framework.Data.EntityKeyReference">
            <summary>
            Represents a reference to an entity instance
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.EntityKeyReference.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the EntityKeyReference class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.EntityKeyReference.EntityType">
            <summary>
            Gets the type that defines the entity.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.EntityKeyReference.EntityName">
            <summary>
            Gets the name of the entity.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.EntityKeyReference.Key">
            <summary>
            Gets the entity key.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.EntityKeyReference.GetKeyAsString">
            <summary>
            Gets the key value as a string
            </summary>
            <returns>The key value represented as a string</returns>
        </member>
        <member name="P:Cenium.Framework.Data.EntityKeyReference.EntityReference">
            <summary>
            Gets the entity reference. The reference is a concatenation of entity name and key, separated by the at ('@') character.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.EntityKeyReference.GetKey``1">
            <summary>
            Gets the key as the specified type.
            </summary>
            <typeparam name="T">The type to return</typeparam>
            <returns>The key value</returns>
        </member>
        <member name="M:Cenium.Framework.Data.EntityKeyReference.ToEntityReference(System.String,System.Object)">
            <summary>
            Creates an entity reference (a string that is unqiue for the EntityKeyReference) from an entity name and key
            </summary>
            <param name="entityType">The entity name</param>
            <param name="key">The key.</param>
            <returns>An entity reference.</returns>
        </member>
        <member name="T:Cenium.Framework.Data.EntityQueryHandlerInfo">
            <summary>
            Represents a query handler for a specific property in an entity
            </summary>
            <remarks>
            The property specified does not have to exist in the class
            </remarks>
        </member>
        <member name="M:Cenium.Framework.Data.EntityQueryHandlerInfo.#ctor(System.Type,System.String,Cenium.Framework.Data.EntityQueryHandlerInfo.QueryHandlerDelegate)">
            <summary>
            Initializes a new instance of the EntityQueryHandlerInfo class
            </summary>
            <param name="entityType">The Type of the entity</param>
            <param name="propertyName">The property name the handler is valid for</param>
            <param name="queryHandlerType">The delegate that implements the query handler</param>
        </member>
        <member name="P:Cenium.Framework.Data.EntityQueryHandlerInfo.EntityType">
            <summary>
            Gets the type of the entity.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.EntityQueryHandlerInfo.PropertyName">
            <summary>
            Gets the name of the queryable property
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.EntityQueryHandlerInfo.QueryHandler">
            <summary>
            Gets the delegate that implements the query handler
            </summary>
        </member>
        <member name="T:Cenium.Framework.Data.Log.ChangeTrackingEntityInfo">
            <summary>
            Represents the change tracking settings for an entity type
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.Log.ChangeTrackingEntityInfo.#ctor(System.Type,Cenium.Framework.Data.Log.ChangeTrackingLogLevel,Cenium.Framework.Data.Log.ChangeTrackingOperationType)">
            <summary>
            Initializes a new instance of the ChangeTrackingEntityInfo class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.Log.ChangeTrackingEntityInfo.EntityType">
            <summary>
            Gets the entity type this setting is valid for
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.Log.ChangeTrackingEntityInfo.LogLevel">
            <summary>
            Gets the log level for the tracked entity.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.Log.ChangeTrackingEntityInfo.IsAddEnabled">
            <summary>
            Gets if change tracking is enabled for the Add operation
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.Log.ChangeTrackingEntityInfo.IsModifyEnabled">
            <summary>
            Gets if change tracking is enabled for the Modify operation
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.Log.ChangeTrackingEntityInfo.IsRemoveEnabled">
            <summary>
            Gets if change tracking is enabled for the Remove operation
            </summary>
        </member>
        <member name="T:Cenium.Framework.Data.Log.ChangeTrackingLogLevel">
            <summary>
            Defines how much detail change tracking should store
            </summary>
        </member>
        <member name="F:Cenium.Framework.Data.Log.ChangeTrackingLogLevel.NoDataCapture">
            <summary>
            Change tracking will not include data capture
            </summary>
        </member>
        <member name="F:Cenium.Framework.Data.Log.ChangeTrackingLogLevel.IncludeDataCapture">
            <summary>
            Change tracking includes data capture
            </summary>
        </member>
        <member name="T:Cenium.Framework.Data.Log.ChangeTrackingOperationType">
            <summary>
            Defines which operations to include in Change Tracking
            </summary>
        </member>
        <member name="F:Cenium.Framework.Data.Log.ChangeTrackingOperationType.None">
            <summary>
            No operations are included
            </summary>
        </member>
        <member name="F:Cenium.Framework.Data.Log.ChangeTrackingOperationType.Add">
            <summary>
            Include the Add operation
            </summary>
        </member>
        <member name="F:Cenium.Framework.Data.Log.ChangeTrackingOperationType.Modify">
            <summary>
            Include the Modify operation
            </summary>
        </member>
        <member name="F:Cenium.Framework.Data.Log.ChangeTrackingOperationType.Remove">
            <summary>
            Include the Remove operation
            </summary>
        </member>
        <member name="F:Cenium.Framework.Data.Log.ChangeTrackingOperationType.All">
            <summary>
            Include all operations
            </summary>
        </member>
        <member name="T:Cenium.Framework.Data.Log.ChangeTrackingEntry">
            <summary>
            Represents an entry in the change tracking log
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.Log.ChangeTrackingEntry.#ctor">
            <summary>
            Initializes a new instance of the ChangeTrackingEntry class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.Log.ChangeTrackingEntry.TransactionEventType">
            <summary>
            Gets the type of transaction that occured
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.Log.ChangeTrackingEntry.EntityName">
            <summary>
            Gets the name of the entity being tracked
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.Log.ChangeTrackingEntry.EntityKey">
            <summary>
            Gets or sets the key for the entity being tracked
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.Log.ChangeTrackingEntry.Changes">
            <summary>
            Gets or sets the properties which has changes
            </summary>
        </member>
        <member name="T:Cenium.Framework.Data.Log.ChangeTrackingPropertyValue">
            <summary>
            Represents a property in the ChangeTrackingEntry class
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.Log.ChangeTrackingPropertyValue.#ctor(System.String,System.Object,System.Object)">
            <summary>
            Initializes a new instance of the ChangeTrackingProperty class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.Log.ChangeTrackingPropertyValue.PropertyName">
            <summary>
            Gets the name of the property that has changed
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.Log.ChangeTrackingPropertyValue.PropertyType">
            <summary>
            Gets the property type
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.Log.ChangeTrackingPropertyValue.OriginalValue">
            <summary>
            Gets the old value of the object that has changed
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.Log.ChangeTrackingPropertyValue.NewValue">
            <summary>
            Gets the new value of the object that has changed
            </summary>
        </member>
        <member name="T:Cenium.Framework.Data.Log.ChangeTrackingLogManager">
            <summary>
            Utility class for creating history logs, i.e. storing the changes that occurs on a business object
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.Log.ChangeTrackingLogManager.RegisterTrackedEntity``1(Cenium.Framework.Data.Log.ChangeTrackingLogLevel,Cenium.Framework.Data.Log.ChangeTrackingOperationType)">
            <summary>
            Registers an entity type as an entity that is being tracked by the change track log
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
        </member>
        <member name="T:Cenium.Framework.Data.Log.ChangeTrackingEventType">
            <summary>
            Defines the event that occured for the change tracking
            </summary>
        </member>
        <member name="F:Cenium.Framework.Data.Log.ChangeTrackingEventType.Add">
            <summary>
            Indicates an entity was added
            </summary>
        </member>
        <member name="F:Cenium.Framework.Data.Log.ChangeTrackingEventType.Modify">
            <summary>
            Indicates an entity was removed
            </summary>
        </member>
        <member name="F:Cenium.Framework.Data.Log.ChangeTrackingEventType.Remove">
            <summary>
            Indicates an entity was removed
            </summary>
        </member>
        <member name="T:Cenium.Framework.Data.Log.IChangeTrackingStorageProvider">
            <summary>
            Provides a definition for classes that implements storage of history logs
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.Log.IChangeTrackingStorageProvider.Save(System.Collections.Generic.IReadOnlyCollection{Cenium.Framework.Data.Log.ChangeTrackingEntry})">
            <summary>
            Saves a history log entry to persistent storage
            </summary>
            <param name="entry">The entry to save</param>
        </member>
        <member name="P:Cenium.Framework.Data.Log.IChangeTrackingStorageProvider.IsEnabled">
            <summary>
            Gets a value indicating whether change tracking is enabled or not
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.Log.IChangeTrackingStorageProvider.GetConfigurationForEntity(System.String,System.Boolean@,System.Boolean@,System.Boolean@,Cenium.Framework.Data.Log.ChangeTrackingLogLevel@)">
            <summary>
            Gets the change tracking configuration for an entity type
            </summary>
            <param name="entityName">The name of the entity to get the configuration for</param>
            <param name="isAddEnabled">if set to <c>true</c> if change tracking is enabled for the Add operation</param>
            <param name="isModifyEnabled">if set to <c>true</c> if change tracking is enabled for the Modify operation.</param>
            <param name="isRemoveEnabled">if set to <c>true</c> if change tracking is enabled for the Remove operation.</param>
            <param name="logLevel">The log level for the entity.</param>
            <returns>true if a configuration exists, otherwise false</returns>
        </member>
        <member name="T:Cenium.Framework.Data.QueryContext">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.QueryContext.#ctor(System.Object,Cenium.Framework.Data.IQuery,System.Boolean)">
            <summary>
            Initializes a new instance of the QueryContext class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.QueryContext.IsMemoryQuery">
            <summary>
            Gets if the query is a query on a memory collection or not
            </summary>
        </member>
        <member name="T:Cenium.Framework.Data.QueryHandlerBase">
            <summary>
            Base class for query handlers
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.QueryHandlerBase.#ctor">
            <summary>
            Initializes a new instance of the QueryHandlerBase class
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.QueryHandlerBase.GetEnumerationValuesFromQuery``1(Cenium.Framework.Data.Enumeration{``0},Cenium.Framework.Data.IQueryExpression)">
            <summary>
            Gets a collection of values by applying the query expression to an enumeration
            </summary>
            <typeparam name="TValue">The enumeration value type.</typeparam>
            <param name="enumeration">The enumeration.</param>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="T:Cenium.Framework.Data.SequenceAttribute">
            <summary>
            Specifies a database sequence for the database script generator tool
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.SequenceAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the SequenceAttribute class
            </summary>
            <param name="identity">Specifies the unique name or identity of the sequence</param>
        </member>
        <member name="P:Cenium.Framework.Data.SequenceAttribute.Identity">
            <summary>
            Gets the identity of the sequence
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.SequenceAttribute.DbIdentity">
            <summary>
            Gets the database identity of the sequence.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.SequenceAttribute.StartValue">
            <summary>
            Gets or sets the initial start value.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.SequenceAttribute.UseCache">
            <summary>
            Gets or sets a value indicating whether the database caches values in memory
            </summary>
            <remarks>
            Caching increases performance for applications that use sequence objects by minimizing the number of IOs that are required to persist generated values to the database.
            </remarks>
        </member>
        <member name="P:Cenium.Framework.Data.SequenceAttribute.CacheSize">
            <summary>
            Gets or sets how many values to keep in cache.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.SequenceAttribute.GetDbName(System.String)">
            <summary>
            Gets the name of the database sequence
            </summary>
            <param name="component">The component the sequence belongs to</param>
            <returns>The database name of the sequence.</returns>
        </member>
        <member name="T:Cenium.Framework.Data.ValidateException">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.ValidateException.#ctor(Cenium.Framework.Language.LanguageConstant,System.Object[])">
            <summary>
            Initializes a new instance of the EntityException class
            </summary>
        </member>
        <member name="T:Cenium.Framework.Data.EntityIndexAttribute">
            <summary>
            Specifies a database index for a specified entity
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.EntityIndexAttribute.#ctor(System.Type,System.String,System.String[])">
            <summary>
            Initializes a new instance of the EntityIndexAttribute class
            </summary>
            <param name="entityType">The entity type to create a database index for</param>
            <param name="properties">The properties to include in the database index</param>
            <param name="indexName">The name of the index</param>
        </member>
        <member name="M:Cenium.Framework.Data.EntityIndexAttribute.#ctor(System.Type,System.String,Cenium.Framework.Data.EntityIndexType,System.String[],System.String)">
            <summary>
            Initializes a new instance of the EntityIndexAttribute class
            </summary>
            <param name="entityType">The entity type to create a database index for</param>
            <param name="properties">The properties to include in the database index</param>
            <param name="condition">The condition if the index is a partial index</param>
            <param name="type">The type of index to create.</param>
            <param name="indexName">The name of the index</param>
        </member>
        <member name="P:Cenium.Framework.Data.EntityIndexAttribute.EntityType">
            <summary>
            Gets the entity type the index is for
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.EntityIndexAttribute.IndexType">
            <summary>
            Gets the type of the index.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.EntityIndexAttribute.IndexName">
            <summary>
            Gets the name of the index
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.EntityIndexAttribute.Properties">
            <summary>
            Gets the properties included in the index
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.EntityIndexAttribute.Condition">
            <summary>
            Gets the condition associated with the index, if the IndexType is Partial
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.EntityIndexAttribute.IsPartial">
            <summary>
            Gets if the index is a partial index
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.EntityIndexAttribute.Component">
            <summary>
            Gets the component the entity index belongs to
            </summary>
        </member>
        <member name="T:Cenium.Framework.Data.EntityInfoAttribute">
            <summary>
            Provides additional meta-data information about an entity
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.EntityInfoAttribute.#ctor">
            <summary>
            Initializes a new instance of the EntityInfoAttribute class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.EntityInfoAttribute.ValueListProperties">
            <summary>
            Gets or sets the properties to be included in a value list
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.EntityInfoAttribute.PrimaryDisplayProperty">
            <summary>
            Gets or sets the primary display property.
            </summary>
        </member>
        <member name="T:Cenium.Framework.Data.EntityInspector">
            <summary>
            Contains methods that provides information about an entity
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.EntityInspector.IsKeyProperty(System.Reflection.PropertyInfo)">
            <summary>
            Checks if a property is a key property
            </summary>
            <param name="property">The property to check</param>
            <returns>True if the property is a key property; otherwise false</returns>
        </member>
        <member name="M:Cenium.Framework.Data.EntityInspector.IsAutoGenerated(System.Reflection.PropertyInfo)">
            <summary>
            Checks if a property is automatically generated or not
            </summary>
            <param name="property">The property to check</param>
            <returns>True if the property is auto-generated property; otherwise false</returns>
        </member>
        <member name="M:Cenium.Framework.Data.EntityInspector.IsMapped(System.Reflection.PropertyInfo)">
            <summary>
            Determines if the specified property is mapped to a database column or not.
            </summary>
            <param name="property">The property to determine if is mapped to a database column.</param>
            <returns><c>true</c> if the specified property is mapped to a database column; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Cenium.Framework.Data.EntityInspector.IsForeignKey(System.Reflection.PropertyInfo)">
            <summary>
            Determines if an entity property is a foreign key property
            </summary>
            <param name="property">The property to check</param>
            <returns>True if the property is a foreign key property; otherwise false</returns>
        </member>
        <member name="M:Cenium.Framework.Data.EntityInspector.GetForeignKeyReference(System.Reflection.PropertyInfo)">
            <summary>
            Returns the navigation property associated with a foreign key property
            </summary>
            <param name="property">The property to check</param>
            <returns>The name of the navigation property associated with a foreign key property</returns>
        </member>
        <member name="M:Cenium.Framework.Data.EntityInspector.IsRequired(System.Reflection.PropertyInfo)">
            <summary>
            Checks if a property requires a value or not
            </summary>
            <param name="property">The property to check</param>
            <returns>True if the property requires a value; otherwise false</returns>
        </member>
        <member name="M:Cenium.Framework.Data.EntityInspector.GetMaxStringLength(System.Reflection.PropertyInfo)">
            <summary>
            Gets the maximum string length for a property
            </summary>
            <param name="property">The property to check</param>
            <returns>The maximum string length for a property; 0 if the property is not a string property</returns>
        </member>
        <member name="M:Cenium.Framework.Data.EntityInspector.GetPropertyFormat(System.Reflection.PropertyInfo)">
            <summary>
            Gets the format associated with a property, if any.
            </summary>
            <param name="property">The property to get the format for.</param>
            <returns>A format represented as a string if the property has a format; otherwise false</returns>
        </member>
        <member name="M:Cenium.Framework.Data.EntityInspector.GetEntityType(System.Object)">
            <summary>
            Gets the clr type that defines an entity from the entity instance
            </summary>
            <param name="entity">The entity instance</param>
            <returns>The <c>Type</c> that defines the entity.</returns>
        </member>
        <member name="M:Cenium.Framework.Data.EntityInspector.GetPropertyBaseType(System.Reflection.PropertyInfo)">
            <summary>
            Gets the base type for a property. The base type is the element type if the property type is an array, or the generic argument type if the property type is a generic type
            </summary>
            <param name="property">The property to get the base type for</param>
            <returns>The base type of the property</returns>
        </member>
        <member name="M:Cenium.Framework.Data.EntityInspector.Register(Cenium.Framework.Data.IEntityInspector)">
            <summary>
            Registers an entity inspector implementation. This is an infrastructure method that should only be called by the framework.
            </summary>
            <param name="inspector">The <c>IEntityInspector</c> instance to register</param>
        </member>
        <member name="M:Cenium.Framework.Data.EntityInspector.GetEntityKeyInfo``1">
            <summary>
            Gets an <c>EntityKeyInfo</c> instance for a specified entity type
            </summary>
            <typeparam name="TEntity">The entity type to get the key info for</typeparam>
            <returns>An <c>EntityKeyInfo</c> instance for a specified entity type</returns>
        </member>
        <member name="M:Cenium.Framework.Data.EntityInspector.GetEntityKeyInfo(System.Type)">
            <summary>
            Gets an <c>EntityKeyInfo</c> instance for a specified entity type
            </summary>
            <param name="entityType">The entity type to get the key info for</param>
            <returns>An <c>EntityKeyInfo</c> instance for a specified entity type</returns>
        </member>
        <member name="M:Cenium.Framework.Data.EntityInspector.GetEntityKeyValue(System.Object)">
            <summary>
            Gets the key value for an entity
            </summary>
            <param name="entity">The entity instance to get the key value for.</param>
            <returns>A key value, if the entity has a key defined; otherwise null.</returns>
        </member>
        <member name="P:Cenium.Framework.Data.EntityInspector.EntityTypeInfo.PrimaryDisplayProperty">
            <summary>
            Gets the primary display property.
            </summary>
        </member>
        <member name="T:Cenium.Framework.Data.EntityKeyInfo">
            <summary>
            Contains information about en entity key
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.EntityKeyInfo.#ctor(System.Type,System.Reflection.PropertyInfo[])">
            <summary>
            Initializes a new instance of the EntityKeyInfo class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.EntityKeyInfo.EntityType">
            <summary>
            Gets the type for the entity
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.EntityKeyInfo.KeyProperties">
            <summary>
            Gets the properties that defines the key
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.EntityKeyInfo.IsEmpty">
            <summary>
            Returns true if no key is defined; otherwise false
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.EntityKeyInfo.IsComposite">
            <summary>
            Returns true if the key is composite; otherwise false
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.EntityKeyInfo.GetKeyValue(System.Object)">
            <summary>
            Gets the value of the key from an instance of the entity
            </summary>
            <param name="obj">The entity instance</param>
            <returns>The value of the key property</returns>
        </member>
        <member name="T:Cenium.Framework.Data.EntityMemberAttribute">
            <summary>
            Specifies that a property is a member of an entity
            </summary>
            <remarks>
            This attribute is used to identify the behavior of properties that belongs to an entity.
            </remarks>
        </member>
        <member name="M:Cenium.Framework.Data.EntityMemberAttribute.#ctor">
            <summary>
            Initializes a new instance of the EntityMemberAttribute class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.EntityMemberAttribute.IsReadOnly">
            <summary>
            Gets or sets if the property is read-only
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.EntityMemberAttribute.Order">
            <summary>
            Gets or sets the order of the property
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.EntityMemberAttribute.DefaultValue">
            <summary>
            Gets or sets the default value of a property
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.EntityMemberAttribute.Reference">
            <summary>
            Gets or sets the reference of the property (if the property references another entity type)
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.EntityMemberAttribute.IsHidden">
            <summary>
            Gets or sets if the property should be hidden from display
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.EntityMemberAttribute.IsPrivate">
            <summary>
            Gets or sets if the property can be serialized
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.EntityMemberAttribute.IsKey">
            <summary>
            Gets or sets if the property is a Key property
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.EntityMemberAttribute.IsQueryable">
            <summary>
            Gets or sets if the property is queryable
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.EntityMemberAttribute.IsSortable">
            <summary>
            Gets or sets if the property is sortable
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.EntityMemberAttribute.IsTranslatable">
            <summary>
            Gets or sets if the property is translateable
            </summary>
        </member>
        <member name="T:Cenium.Framework.Data.EntityNames">
            <summary>
            Contains standard entity names
            </summary>
        </member>
        <member name="F:Cenium.Framework.Data.EntityNames.RowVersionName">
            <summary>
            Identifies the RowVersion property name
            </summary>
        </member>
        <member name="F:Cenium.Framework.Data.EntityNames.TenantIdName">
            <summary>
            Identifies the TenantId property name
            </summary>
        </member>
        <member name="T:Cenium.Framework.Data.EntityPropertyInfo">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.EntityPropertyInfo.#ctor(Cenium.Framework.Data.IEntityTypeInfo,System.Reflection.PropertyInfo)">
            <summary>
            Initializes a new instance of the EntityPropertyInfo class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.EntityPropertyInfo.IsRequired">
            <summary>
            Returns true if a value is required for the property; otherwise false
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.EntityPropertyInfo.GetPropertyValue(System.Object)">
            <summary>
            Gets the property value from the entity
            </summary>
            <param name="entity">The entity to get the value from</param>
            <returns>The property value.</returns>
        </member>
        <member name="T:Cenium.Framework.Data.External.DataSourceClusterProviderBase">
            <summary>
            Base class for
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.External.DataSourceClusterProviderBase.#ctor(System.Guid,System.String,System.Boolean,Cenium.Framework.Data.External.DataSourceProperty[])">
            <summary>
            Initializes a new instance of the DataSourceClusterProviderBase class
            </summary>
            <param name="providerId">The provider identity</param>
            <param name="displayName">A display-friendly name for the provider</param>
            <param name="singleDataSource">Determines if the provider has a single or multiple data sources</param>
            <param name="properties">A list of properties the data source accepts.</param>
        </member>
        <member name="P:Cenium.Framework.Data.External.DataSourceClusterProviderBase.ProviderId">
            <summary>
            Gets the provider identifier.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.External.DataSourceClusterProviderBase.DisplayName">
            <summary>
            Gets the display-friendly name of the provider
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.External.DataSourceClusterProviderBase.SingleDataSource">
            <summary>
            Gets a value indicating whether this provider has a single data source or not
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.External.DataSourceClusterProviderBase.IsSchemaSupported">
            <summary>
            Gets a value indicating whether this provider supports retriving schema
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.External.DataSourceClusterProviderBase.IsAuthenticationSupported">
            <summary>
            Gets if authentication is supported
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.External.DataSourceClusterProviderBase.IsAuthenticationRequired">
            <summary>
            Gets if authentication is required or not. Only applicable if IsAuthenticationSupported is true
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.External.DataSourceClusterProviderBase.SupportedObjectTypes">
            <summary>
            Gets the supported object types.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.External.DataSourceClusterProviderBase.Properties">
            <summary>
            Gets a collection of configuration properties
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.External.DataSourceClusterProviderBase.ValidateConnection(Cenium.Framework.Data.External.DataSourceConnectionParameters)">
            <summary>
            Validates that the DataSourceConnectionParameters are valid for the provider.
            </summary>
            <param name="parameters">The parameters to validate</param>
        </member>
        <member name="M:Cenium.Framework.Data.External.DataSourceClusterProviderBase.CreateConnection(Cenium.Framework.Data.External.DataSourceConnectionParameters)">
            <summary>
            Creates a connection for the data source
            </summary>
            <param name="parameters">The connection data needed to create the connection</param>
            <returns>
            An IDataSourceConnection instance
            </returns>
        </member>
        <member name="T:Cenium.Framework.Data.External.DataSourceConnectionBase">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.External.DataSourceConnectionBase.#ctor(Cenium.Framework.Data.External.DataSourceConnectionParameters)">
            <summary>
            Initializes a new instance of the DataSourceConnectionBase class
            </summary>
        </member>
        <member name="T:Cenium.Framework.Data.External.DataSourceConnectionParameters">
            <summary>
            Represents the connection data needed to establish a connection with a data source
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.External.DataSourceConnectionParameters.#ctor">
            <summary>
            Initializes a new instance of the DataSourceConnectionParameters class
            </summary>
        </member>
        <member name="T:Cenium.Framework.Data.External.DataSourceManager">
            <summary>
            Provides methods for accessing external data sources
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.External.DataSourceManager.GetProvider(System.Guid)">
            <summary>
            Gets the registered provider with the specified provider identifier
            </summary>
            <param name="providerId">The provider identifier.</param>
            <returns>An <c>IDataSourceClusterProvider</c> instance, if a provider with the specified identifier has been registered; otherwise null</returns>
        </member>
        <member name="M:Cenium.Framework.Data.External.DataSourceManager.GetConnectionDisplayData(System.Guid,System.String)">
            <summary>
            Gets a display-friendly string that represents the connection data
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.External.DataSourceManager.Register(Cenium.Framework.Data.External.IDataSourceClusterProvider)">
            <summary>
            Registers a provider instance with the data source manager.
            </summary>
            <param name="provider">The provider to register</param>
        </member>
        <member name="T:Cenium.Framework.Data.External.DataSourceObjectType">
            <summary>
            Defines the supported object types for a data source
            </summary>
        </member>
        <member name="F:Cenium.Framework.Data.External.DataSourceObjectType.Object">
            <summary>
            Data source is a pre-defined object
            </summary>
        </member>
        <member name="F:Cenium.Framework.Data.External.DataSourceObjectType.Query">
            <summary>
            Data source is a query
            </summary>
        </member>
        <member name="F:Cenium.Framework.Data.External.DataSourceObjectType.Message">
            <summary>
            Data source is a message
            </summary>
        </member>
        <member name="T:Cenium.Framework.Data.External.DataSourceProperty">
            <summary>
            Represents a property definition
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.External.DataSourceProperty.#ctor(System.String,System.String,Cenium.Framework.Data.External.DataSourcePropertyType,System.Boolean)">
            <summary>
            Initializes a new instance of the DataSourceProperty class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.External.DataSourceProperty.PropertyName">
            <summary>
            Gets the name of the property.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.External.DataSourceProperty.DisplayName">
            <summary>
            Gets the display-friendly name of the property.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.External.DataSourceProperty.Type">
            <summary>
            Gets the value type for the property.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.External.DataSourceProperty.IsRequired">
            <summary>
            Gets a value indicating whether this property requires a value or not
            </summary>
        </member>
        <member name="T:Cenium.Framework.Data.External.DataSourcePropertyType">
            <summary>
            Represents the valid types for a DataSourceProperty value
            </summary>
        </member>
        <member name="F:Cenium.Framework.Data.External.DataSourcePropertyType.String">
            <summary>
            DataSourceProperty is a string type property
            </summary>
        </member>
        <member name="T:Cenium.Framework.Data.External.DataSourceQuery">
            <summary>
            Represents a query to be used on a data source
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.External.DataSourceQuery.#ctor">
            <summary>
            Initializes a new instance of the DataSourceQuery class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.External.DataSourceQuery.Name">
            <summary>
            Gets or sets the name of the query.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.External.DataSourceQuery.PropertyContextId">
            <summary>
            Gets or sets the property context identifier.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.External.DataSourceQuery.Type">
            <summary>
            Gets or sets the object type in the Statement property.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.External.DataSourceQuery.Statement">
            <summary>
            Gets or sets the query statement.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.External.DataSourceQuery.PageSize">
            <summary>
            Gets or sets the dataset page size
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.External.DataSourceQuery.Offset">
            <summary>
            Gets or sets the offset of the dataset
            </summary>
        </member>
        <member name="T:Cenium.Framework.Data.External.DataSourceQueryOrderParameter">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.External.DataSourceQueryOrderParameter.#ctor(System.String,Cenium.Framework.Data.External.DataSourceSortDirection)">
            <summary>
            Initializes a new instance of the DataSourceQuerySortPredicate class
            </summary>
        </member>
        <member name="T:Cenium.Framework.Data.External.DataSourceQueryParameter">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.External.DataSourceQueryParameter.#ctor(System.String,Cenium.Framework.Data.QueryOperator,System.Object)">
            <summary>
            Initializes a new instance of the DataSourceQueryParameter class
            </summary>
        </member>
        <member name="T:Cenium.Framework.Data.External.DataSourceSchema">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.External.DataSourceSchema.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the DataSourceObject class
            </summary>
        </member>
        <member name="T:Cenium.Framework.Data.External.DataSourceSchemaProperty">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.External.DataSourceSchemaProperty.#ctor">
            <summary>
            Initializes a new instance of the DataSourceObjectProperty class
            </summary>
        </member>
        <member name="T:Cenium.Framework.Data.External.DataSourceSortDirection">
            <summary>
            Explain the purpose of the enumeration here
            </summary>
        </member>
        <member name="T:Cenium.Framework.Data.External.IDataRow">
            <summary>
            Represents a data row
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.External.IDataRow.Item(System.String)">
            <summary>
            Gets the value associated with the specified property name
            </summary>
            <param name="name">The property name to get the value for</param>
        </member>
        <member name="T:Cenium.Framework.Data.External.IDataRowCollection">
            <summary>
            Represents a collection of IDataRow instances
            </summary>
        </member>
        <member name="T:Cenium.Framework.Data.External.IDataSourceClusterProvider">
            <summary>
            Represents a provider for a data source cluster
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.External.IDataSourceClusterProvider.ProviderId">
            <summary>
            Gets the provider identifier.
            </summary>
            <remarks>
            The identifier must be a unique Guid that remains the same for the lifetime of the provider
            </remarks>
        </member>
        <member name="P:Cenium.Framework.Data.External.IDataSourceClusterProvider.DisplayName">
            <summary>
            Gets the display-friendly name of the provider
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.External.IDataSourceClusterProvider.SingleDataSource">
            <summary>
            Gets a value indicating whether this provider has a single data source or not
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.External.IDataSourceClusterProvider.IsSchemaSupported">
            <summary>
            Gets a value indicating whether this provider supports retriving schema
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.External.IDataSourceClusterProvider.IsAuthenticationSupported">
            <summary>
            Gets if authentication is supported
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.External.IDataSourceClusterProvider.IsAuthenticationRequired">
            <summary>
            Gets if authentication is required or not. Only applicable if IsAuthenticationSupported is true
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.External.IDataSourceClusterProvider.SupportedObjectTypes">
            <summary>
            Gets the supported object types.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.External.IDataSourceClusterProvider.Properties">
            <summary>
            Gets a collection of configuration properties
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.External.IDataSourceClusterProvider.ValidateConnection(Cenium.Framework.Data.External.DataSourceConnectionParameters)">
            <summary>
            Validates that the DataSourceConnectionParameters are valid for the provider.
            </summary>
            <param name="parameters">The parameters to validate</param>
        </member>
        <member name="M:Cenium.Framework.Data.External.IDataSourceClusterProvider.CreateConnection(Cenium.Framework.Data.External.DataSourceConnectionParameters)">
            <summary>
            Creates a connection for the data source
            </summary>
            <param name="parameters">The connection data needed to create the connection</param>
            <returns>An IDataSourceConnection instance</returns>
        </member>
        <member name="T:Cenium.Framework.Data.External.IDataSourceConnection">
            <summary>
            Represents a connection for a data source
            </summary>
        </member>
        <member name="T:Cenium.Framework.Data.FTSEntityIndexAttribute">
            <summary>
            Specifies a full-text search index
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.FTSEntityIndexAttribute.#ctor(System.Type,System.String[])">
            <summary>
            Initializes a new instance of the FTSEntityIndex class
            </summary>
            <param name="entityType">The entity type to create a full-text index for</param>
            <param name="properties">The properties to include in the full-text index</param>
        </member>
        <member name="P:Cenium.Framework.Data.FTSEntityIndexAttribute.EntityType">
            <summary>
            Gets the entity type the index is for
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.FTSEntityIndexAttribute.Properties">
            <summary>
            Gets the properties included in the index
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.FTSEntityIndexAttribute.Component">
            <summary>
            Gets the component the entity full-text index belongs to
            </summary>
        </member>
        <member name="T:Cenium.Framework.Data.IEntityTypeInfo">
            <summary>
            Defines information about an entity type
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.IEntityTypeInfo.IsPropertyContextEntity">
            <summary>
            Gets whether an entity is a property context entity or not
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.IEntityTypeInfo.PropertyContextPropertyName">
            <summary>
            Gets the property name of the property that contains the property context value
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.IEntityTypeInfo.EntityName">
            <summary>
            Gets the name of the entity.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.IEntityTypeInfo.FullEntityName">
            <summary>
            Gets the full name of the entity (on the form [component].[entityname]).
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.IEntityTypeInfo.TableName">
            <summary>
            Gets the name of the table associated with the entity
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.IEntityTypeInfo.DisplayName">
            <summary>
            Gets the display name of the entity
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.IEntityTypeInfo.IsPrivate">
            <summary>
            Gets a value indicating whether the entity is private or not
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.IEntityTypeInfo.IsTranslatable">
            <summary>
            Gets a value indicating whether the entity is translatable.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.IEntityTypeInfo.IsVariant">
            <summary>
            Gets a value indicating whether the entity is a variant of another entity
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.IEntityTypeInfo.IsDbEntity">
            <summary>
            Gets a value indicating whether the entity is a database entity.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.IEntityTypeInfo.GetEntityInstanceDescription(System.Object)">
            <summary>
            Gets a display description from the entity
            </summary>
            <param name="entity">The entity to get a description for</param>
            <returns>a string representing the entity instance</returns>
        </member>
        <member name="P:Cenium.Framework.Data.IEntityTypeInfo.EntityType">
            <summary>
            Gets the Type for the entity
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.IEntityTypeInfo.VariantOfType">
            <summary>
            Gets the type that this entity is a variant of (if applicable)
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.IEntityTypeInfo.PrimaryDisplayProperty">
            <summary>
            Gets the primary display property.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.IEntityTypeInfo.GetProperties">
            <summary>
            Gets all properties defined by the entity
            </summary>
            <returns>A read-only collection of <c>EntityPropertyInfo</c> instances.</returns>
        </member>
        <member name="M:Cenium.Framework.Data.IEntityTypeInfo.GetForeignKeyForNavigationProperty(System.String)">
            <summary>
            Gets the foreign key property associated with a navigation property
            </summary>
            <param name="navigationProperty">The name of the navigation property.</param>
            <returns>The foreign key property associated with the specified navigation property, or null if the foreign key does not exist.</returns>
        </member>
        <member name="T:Cenium.Framework.Data.IImageStorageProvider">
            <summary>
            Defines a mechanism to store and retrieve images from an image storage
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.IImageStorageProvider.Get(System.Guid)">
            <summary>
            Retrieves an image from storage
            </summary>
            <param name="imageId">The identifier of the image to retrieve</param>
            <returns>xxx if the image exists; otherwise null</returns>
        </member>
        <member name="M:Cenium.Framework.Data.IImageStorageProvider.Claim(System.Guid)">
            <summary>
            Claims an image in the image storage
            </summary>
            <param name="imageId">The identity of the image to claim</param>
        </member>
        <member name="M:Cenium.Framework.Data.IImageStorageProvider.Claim(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Bulk-operation for claiming multiple images
            </summary>
            <param name="images">An IEnumerable of <c>Guid</c> instances to be claimed</param>
        </member>
        <member name="M:Cenium.Framework.Data.IImageStorageProvider.RemoveClaim(System.Guid)">
            <summary>
            Removes a claim on an image in the image store
            </summary>
            <param name="imageId">The identity of the image to remove a claim from</param>
        </member>
        <member name="M:Cenium.Framework.Data.IImageStorageProvider.RemoveClaim(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Bulk-operation for removing multiple claims in the image store
            </summary>
            <param name="images">An IEnumerable of <c>Guid</c> claims to be removed</param>
        </member>
        <member name="M:Cenium.Framework.Data.IImageStorageProvider.UpdateClaims(System.Collections.Generic.IEnumerable{System.Guid},System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Bulk operation for creating and removing claims as a single operation
            </summary>
            <param name="claims">The claims to set</param>
            <param name="unclaims">The claims to remove</param>
        </member>
        <member name="T:Cenium.Framework.Data.ImageStorageManager">
            <summary>
            Contains methods to handle image storage
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.ImageStorageManager.SetProvider(Cenium.Framework.Data.IImageStorageProvider)">
            <summary>
            Sets the image storage provider
            </summary>
            <remarks>This is an infrastructure method and should not be set outside of the framework</remarks>
            <param name="provider">The storage provider to set.</param>
        </member>
        <member name="M:Cenium.Framework.Data.ImageStorageManager.Get(System.Guid)">
            <summary>
            Gets an image from the image store
            </summary>
            <param name="imageId">The identity of the image to retrieve</param>
            <returns>An image from the image store, represented by a <c>StoredImage</c> instance</returns>
        </member>
        <member name="M:Cenium.Framework.Data.ImageStorageManager.Store(System.Guid,Cenium.Framework.Data.StoredImage)">
            <summary>
            Adds a new image to storage, or updates an existing image if an image with the specified identifier exists
            </summary>
            <param name="imageId">The identity of the image to store</param>
            <param name="image">The image to store</param>
        </member>
        <member name="M:Cenium.Framework.Data.ImageStorageManager.StoreAndClaim(System.Guid,Cenium.Framework.Data.StoredImage)">
            <summary>
            Adds a new image to storage, or updates an existing image if an image with the specified identifier exists. This method also puts a claim on the image
            </summary>
            <param name="imageId">The identity of the image to store</param>
            <param name="image">The image to store</param>
        </member>
        <member name="M:Cenium.Framework.Data.ImageStorageManager.Remove(System.Guid)">
            <summary>
            Removes an image from storage
            </summary>
            <param name="imageId">The identity of the image to remove from storage</param>
        </member>
        <member name="M:Cenium.Framework.Data.ImageStorageManager.Claim(System.Guid)">
            <summary>
            Claims an image in the image storage
            </summary>
            <param name="imageId">The identity of the image to claim</param>
        </member>
        <member name="M:Cenium.Framework.Data.ImageStorageManager.Claim(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Bulk-operation for claiming multiple images in the image storage
            </summary>
            <param name="imageId">An IEnumerable of image references to claim</param>
        </member>
        <member name="M:Cenium.Framework.Data.ImageStorageManager.RemoveClaim(System.Guid)">
            <summary>
            Removes a claim on an image in the image store
            </summary>
            <param name="imageId">The identity of the image to remove a claim from</param>
        </member>
        <member name="M:Cenium.Framework.Data.ImageStorageManager.RemoveClaim(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Bulk-operation for removing multiple claims in the image store
            </summary>
            <param name="images">An IEnumerable of <c>Guid</c> claims to be removed</param>
        </member>
        <member name="M:Cenium.Framework.Data.ImageStorageManager.UpdateClaims(System.Collections.Generic.IEnumerable{System.Guid},System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Bulk operation for creating and removing claims as a single operation
            </summary>
            <param name="claims">The claims to set</param>
            <param name="unclaims">The claims to remove</param>
        </member>
        <member name="T:Cenium.Framework.Data.ModelVersionAttribute">
            <summary>
            Specifies the version of the model in a data-layer assembly
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.ModelVersionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ModelVersionAttribute class
            </summary>
            <param name="version">The version number for the model in the assembly</param>
        </member>
        <member name="P:Cenium.Framework.Data.ModelVersionAttribute.Version">
            <summary>
            Gets the version number of the model contained in the assembly
            </summary>
        </member>
        <member name="T:Cenium.Framework.Data.StoredImage">
            <summary>
            Represents an image from the image store
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.StoredImage.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the StoredImage class
            </summary>
            <param name="imageId">The identity of the image</param>
        </member>
        <member name="P:Cenium.Framework.Data.StoredImage.IsEmpty">
            <summary>
            Gets if the StoredImage contains image data or not
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.StoredImage.Size">
            <summary>
            Gets the size of the image data
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.StoredImage.ImageId">
            <summary>
            Gets the image identifier
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.StoredImage.Content">
            <summary>
            Gets or sets the image data
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.StoredImage.SetContent(System.IO.Stream)">
            <summary>
            Sets the image data from a stream
            </summary>
            <param name="s">The stream to retrieve the image data from</param>
        </member>
        <member name="T:Cenium.Framework.Data.Validation">
            <summary>
            Contains method that helps with entity validation
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.Validation.CheckIsNotNull``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Checks if a property value is null or not. This method raises an exception if the property value is null
            </summary>
            <typeparam name="TProperty">The property type</typeparam>
            <param name="property">The property expression to evaluate</param>
        </member>
        <member name="M:Cenium.Framework.Data.Validation.CheckIsNotNullOrWhiteSpace``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Checks if a property value is null or whitespace. This method raises an exception if the property value is null or whitespace
            </summary>
            <typeparam name="TProperty">The property type</typeparam>
            <param name="property">The property expression to evaluate</param>
        </member>
        <member name="M:Cenium.Framework.Data.Validation.CheckValueIn(System.Linq.Expressions.Expression{System.Func{System.String}},System.Boolean,System.String[])">
            <summary>
            Checks if a property value is a value within a discrete set of valid values.The property type must be a string property. Note that this method is not case sensitive.
            </summary>
            <param name="property">The property expression to evaluate</param>
            <param name="allowNull">Determines if null is an accepted value</param>
            <param name="values">The discrete set of valid values</param>
            <exception cref="T:Cenium.Framework.Data.ValidateException">When the value is null and the allowNull argument is <c>false</c>, or if the value is not in the values array.</exception>
        </member>
        <member name="M:Cenium.Framework.Data.Validation.CheckPropertyContextIsValid(System.Int64,System.Boolean)">
            <summary>
            Checks if a specified property context is valid
            </summary>
            <param name="propertyContextId">The property context to validate</param>
            <param name="checkEnabled">if true, this method will also check if the property is enabled.</param>
            <exception cref="T:Cenium.Framework.Data.ValidateException">The property is 0, or property does not exist or the checkEnabled argument is true and the property has been disabled.</exception>
        </member>
        <member name="M:Cenium.Framework.Data.Validation.CheckCurrentUserPropertyContextAccess(System.Int64)">
            <summary>
            Checks if the current user has access to the specified property
            </summary>
            <param name="propertyContextId">The property context to validate</param>
            <exception cref="T:Cenium.Framework.Data.ValidateException">The property is 0, or user does not have access to the property.</exception>
        </member>
        <member name="M:Cenium.Framework.Data.Validation.ErrorWhenIsNullOrWhitespace(System.String,Cenium.Framework.Language.LanguageConstant,System.Object[])">
            <summary>
            Throws an error when the string value is null, empty or contains only whitespaces.
            </summary>
            <param name="value">The value to check</param>
            <param name="error">The error message</param>
            <param name="args">The error arguments</param>
            <exception cref="T:Cenium.Framework.Data.ValidateException">The value is null, an empty string or a string with only whitespaces.</exception>
        </member>
        <member name="M:Cenium.Framework.Data.Validation.ErrorWhen(System.Boolean,Cenium.Framework.Language.LanguageConstant,System.Object[])">
            <summary>
            Throws a validation error when the condition argument is true
            </summary>
            <param name="condition">The condition to check for</param>
            <param name="error">A LanguageConstant containing the error message</param>
            <param name="args">The message arguments</param>
            <exception cref="T:Cenium.Framework.Data.ValidateException">When the condition argument is true</exception>
        </member>
        <member name="M:Cenium.Framework.Data.Validation.ErrorWhenNot(System.Boolean,Cenium.Framework.Language.LanguageConstant,System.Object[])">
            <summary>
            Throws a validation error when the condition argument is false
            </summary>
            <param name="condition">The condition to check for</param>
            <param name="error">A LanguageConstant containing the error message</param>
            <param name="args">The message arguments</param>
            <exception cref="T:Cenium.Framework.Data.ValidateException">When the condition argument is false</exception>
        </member>
        <member name="M:Cenium.Framework.Data.Validation.GetAndValidateUser(System.String)">
            <summary>
            Validates the user identity, and if successful returns the <c>UserInfo</c> instance for the user
            </summary>
            <param name="userId">The user identifier.</param>
            <returns>A <c>UserInfo</c>instance for the user</returns>
            <exception cref="T:Cenium.Framework.Data.ValidateException">If the userId argument is null or empty or if the user does not exist.</exception>
        </member>
        <member name="M:Cenium.Framework.Data.Validation.GetAndValidateRole(System.String)">
            <summary>
            Validates the role identity, and if successful returns the <c>RoleInfo</c> instance for the role
            </summary>
            <param name="roleId">The role identifier.</param>
            <returns>A <c>RoleInfo</c>instance for the role</returns>
            <exception cref="T:Cenium.Framework.Data.ValidateException">If the roleId argument is null or empty or if the role does not exist.</exception>
        </member>
        <member name="T:Cenium.Framework.Data.EntityReferenceAttribute">
            <summary>
            Associates an entity class with an entity reference
            </summary>
            <remarks>
            Entity references are automatically applied in the service layer
            </remarks>
        </member>
        <member name="M:Cenium.Framework.Data.EntityReferenceAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the EntityReferenceAttribute class
            </summary>
            <param name="referenceType">The reference type name</param>
            <param name="propertyName">The name of the reference property</param>
            <param name="keyPropertyName">The name of the entity property which contains a key value that is associated with the reference</param>
        </member>
        <member name="P:Cenium.Framework.Data.EntityReferenceAttribute.ReferenceType">
            <summary>
            Gets the reference type name. This name is used to lookup the correct reference type
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.EntityReferenceAttribute.PropertyName">
            <summary>
            Gets the name of the property which will be added to the entity
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.EntityReferenceAttribute.KeyPropertyName">
            <summary>
            Gets the name of the property which contains the key to the reference
            </summary>
        </member>
        <member name="T:Cenium.Framework.Data.EntityReferenceManager">
            <summary>
            Manages a set of <c>IEntityReferenceFactory</c> instances
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.EntityReferenceManager.Register(Cenium.Framework.Data.IEntityReferenceFactory)">
            <summary>
            Registers an entity reference factory
            </summary>
            <param name="factory">The factory to register</param>
        </member>
        <member name="M:Cenium.Framework.Data.EntityReferenceManager.Initialize">
            <summary>
            Performs initialization of the entity reference manager. This is an infrastructure method and should only be called from the framework.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.EntityReferenceManager.RegisterEntityReferenceProperty(System.Type,System.String,System.String,System.String)">
            <summary>
            Registers an entity reference property. This is an infrastructure method and should only be called from the framework.
            </summary>
            <param name="entityType">The entity type to add a reference property to.</param>
            <param name="referenceType">The entity reference</param>
            <param name="propertyName">Name of the property that contains an entity reference.</param>
            <param name="keyPropertyName">Name of the property that contains a foreign-key to the entity reference.</param>
        </member>
        <member name="M:Cenium.Framework.Data.EntityReferenceManager.GetFactory(System.String)">
            <summary>
            Gets an entity reference factory based on a reference type
            </summary>
            <param name="referenceType">The reference type to get a factory for</param>
            <returns>The <c>IEntityReferenceFactory</c> instance associated with the specified reference type</returns>
        </member>
        <member name="P:Cenium.Framework.Data.EntityReferenceManager.Factories">
            <summary>
            Gets a read-only collection of all registered entity reference factories.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.EntityReferenceManager.GetReferencesForEntity(System.Type)">
            <summary>
            Gets a read-only collection of all the properties in an entity that are entity references
            </summary>
            <param name="entityType">Type of the entity.</param>
            <returns></returns>
        </member>
        <member name="M:Cenium.Framework.Data.EntityReferenceManager.GetReferencesForFactory(System.String)">
            <summary>
            Gets a collection of entity reference properties that uses the specified entity reference
            </summary>
            <param name="referenceType">The identity of the entity reference</param>
            <returns>a collection of entity reference properties that uses the specified entity reference.</returns>
        </member>
        <member name="T:Cenium.Framework.Data.IEntityInspector">
            <summary>
            Defines the methods a property inspector class must implement
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.IEntityInspector.GetTableName(System.Type)">
            <summary>
            Gets the associated database table name for the entity
            </summary>
            <param name="entityType">The entity type to get the table name for</param>
            <returns>The name of the database table associated with the entity, or null if the entity is not associated with a table</returns>
        </member>
        <member name="M:Cenium.Framework.Data.IEntityInspector.IsForeignKey(System.Reflection.PropertyInfo)">
            <summary>
            Returns true if the property is a foreign key property; otherwise false
            </summary>
            <param name="property">The property to check</param>
            <returns>true if the property is a foreign key property; otherwise false</returns>
        </member>
        <member name="M:Cenium.Framework.Data.IEntityInspector.GetForeignKeyReference(System.Reflection.PropertyInfo)">
            <summary>
            Returns the navigation property associated with a foreign key
            </summary>
            <param name="property">The property to check</param>
            <returns>The name of the navigation property associated with the foreign key.</returns>
        </member>
        <member name="T:Cenium.Framework.Data.IEntityReferenceLookup">
            <summary>
            Provides a mechanism to lookup entity references
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.IEntityReferenceLookup.GetEntityReference(System.Object[])">
            <summary>
            Gets an entity reference based on the reference keys
            </summary>
            <param name="keys">The keys that identifies the reference instance</param>
            <returns>An entity reference, or null if the reference does not exist</returns>
        </member>
        <member name="T:Cenium.Framework.Data.IEntityReferenceFactory">
            <summary>
            Provides a mechanism to create entity references. The factory is expected to be thread or context aware
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.IEntityReferenceFactory.ReferenceType">
            <summary>
            Gets the reference type name for the factory. This name is used to lookup an entity factory and should be unqiue for each <c>IEntityReferenceFactory</c> implementation
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.IEntityReferenceFactory.EntityType">
            <summary>
            Gets the entity type that factory implements
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.IEntityReferenceFactory.IsQueryable">
            <summary>
            Gets if the entity reference implements a query mechanism
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.IEntityReferenceFactory.GetEntityReference">
            <summary>
            Gets an IEntityReference instance for the current thread or HTTP context
            </summary>
            <returns>an IEntityReference instance</returns>
        </member>
        <member name="M:Cenium.Framework.Data.IEntityReferenceFactory.CreateQueryHandler(System.String,System.String)">
            <summary>
            Creates a <c>IQueryHandler</c> instance for an entity reference
            </summary>
            <param name="propertyName">The property name to create the query handler for</param>
            <param name="keyPropertyName">The key property which references the entity reference</param>
            <returns>An <c>IQueryHandler</c> instance</returns>
        </member>
        <member name="T:Cenium.Framework.Data.IQuery">
            <summary>
            Represents a query expression for a Query method
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.IQuery.Expressions">
            <summary>
            Gets an IEnumerable of IQueryExpression instances the query contains
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.IQuery.GetQueryHandler(System.String)">
            <summary>
            Gets the query handler for a specified property
            </summary>
            <param name="propertyName">The property to get the query handler for</param>
            <returns></returns>
        </member>
        <member name="P:Cenium.Framework.Data.IQuery.SortExpression">
            <summary>
            Gets the sort order expression
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.IQuery.Add(System.String,Cenium.Framework.Data.QueryOperator,System.String[])">
            <summary>
            Adds a query expression to the query
            </summary>
            <param name="propertyName">The name of the property to query on</param>
            <param name="oper">The QueryOperator to use</param>
            <param name="operands">The operands in the query expression</param>
        </member>
        <member name="M:Cenium.Framework.Data.IQuery.Add(Cenium.Framework.Data.IQueryExpression)">
            <summary>
            Adds a query expression to the query
            </summary>
            <param name="expression">The expression to add</param>
        </member>
        <member name="P:Cenium.Framework.Data.IQuery.IsEmpty">
            <summary>
            Returns true if the query is empty
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.IQuery.SetDefaultQueryHandler(Cenium.Framework.Data.IQueryHandler)">
            <summary>
            Sets the default query handler to use when no property specific handlers are found
            </summary>
            <param name="handler">The query handler to use</param>
        </member>
        <member name="M:Cenium.Framework.Data.IQuery.SetQueryHandler(System.String,Cenium.Framework.Data.IQueryHandler)">
            <summary>
            Sets the query handler to use for a specific property
            </summary>
            <param name="propertyName">The name of the property which will use this query handler</param>
            <param name="handler">The handler to use</param>
        </member>
        <member name="T:Cenium.Framework.Data.IQueryExpression">
            <summary>
            Defines a query element for a specified property and operator
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.IQueryExpression.PropertyName">
            <summary>
            Gets the property name for this expression
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.IQueryExpression.Operator">
            <summary>
            Gets the operator name for this expression
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.IQueryExpression.Operands">
            <summary>
            Gets the list of parameters for this expression
            </summary>
        </member>
        <member name="T:Cenium.Framework.Data.IQueryHandler">
            <summary>
            Defines the mechanism for applying a query to an IQueryable
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.IQueryHandler.Apply(System.Linq.IQueryable,Cenium.Framework.Data.IQueryExpression)">
            <summary>
            Applies the query expression to the IQueryable
            </summary>
            <param name="query">The IQueryable to apply the expression to</param>
            <param name="expression">The expression to apply</param>
            <returns>A modified IQueryable with the expression applied</returns>
        </member>
        <member name="T:Cenium.Framework.Data.IQueryOperatorInfo">
            <summary>
            Provides access to query operator metadata
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.IQueryOperatorInfo.Operator">
            <summary>
            Gets the operator
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.IQueryOperatorInfo.MinParameterCount">
            <summary>
            Gets the minimum number of parameters this operator requires
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.IQueryOperatorInfo.MaxParameterCount">
            <summary>
            Gets the maximum number of parameters this operator requires
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.IQueryOperatorInfo.IsRangeParameterCount">
            <summary>
            Gets if this operator uses a range of parameters
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.IQueryOperatorInfo.ToLinq(System.String,System.String[])">
            <summary>
            Returns a linq expression as a string
            </summary>
            <param name="propertyName">The name of the property to apply the operator for</param>
            <param name="parameters">The list of parameters</param>
            <returns></returns>
        </member>
        <member name="T:Cenium.Framework.Data.PrivateEntityAttribute">
            <summary>
            Defines an entity as private, i.e.. the entity is not propagated to the service level
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.PrivateEntityAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the PrivateEntityAttribute class
            </summary>
            <param name="type">The entity type to mark as private</param>
        </member>
        <member name="P:Cenium.Framework.Data.PrivateEntityAttribute.EntityType">
            <summary>
            Gets the entity type
            </summary>
        </member>
        <member name="T:Cenium.Framework.Data.PropertyContextReference">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="T:Cenium.Framework.Data.QueryException">
            <summary>
            The exception that is thrown when the query is invalid
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.QueryException.#ctor(System.String,System.String,System.Object[])">
            <summary>
            Initializes a new instance of the QueryException class
            </summary>
            <param name="id">The error identifier</param>
            <param name="message">The error message that describes the error</param>
            <param name="parameters">If the error message is a format string, the parameters that will be applied to the format string</param>
        </member>
        <member name="M:Cenium.Framework.Data.QueryException.#ctor(System.String,System.String,System.Object[],System.Exception)">
            <summary>
            Initializes a new instance of the QueryException class
            </summary>
            <param name="id">The error identifier</param>
            <param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception</param>
            <param name="message">The error message that describes the error</param>
            <param name="parameters">If the error message is a format string, the parameters that will be applied to the format string</param>
        </member>
        <member name="T:Cenium.Framework.Data.QueryOperator">
            <summary>
            Valid query operators
            </summary>
        </member>
        <member name="F:Cenium.Framework.Data.QueryOperator.Equals">
            <summary>
            Checks if two values are equal (a == b)
            </summary>
        </member>
        <member name="F:Cenium.Framework.Data.QueryOperator.NotEquals">
            <summary>
            Checks if two values are different (a != b)
            </summary>
        </member>
        <member name="F:Cenium.Framework.Data.QueryOperator.IsNull">
            <summary>
            Checks if a value is null (a == null)
            </summary>
        </member>
        <member name="F:Cenium.Framework.Data.QueryOperator.IsNotNull">
            <summary>
            Checks if a value is not null (a != null)
            </summary>
        </member>
        <member name="F:Cenium.Framework.Data.QueryOperator.StartsWith">
            <summary>
            Checks if a value starts with the given operand (a.StartsWith(b))
            </summary>
        </member>
        <member name="F:Cenium.Framework.Data.QueryOperator.EndsWith">
            <summary>
            Checks if a value ends with the given operand (a.EndsWidth(b))
            </summary>
        </member>
        <member name="F:Cenium.Framework.Data.QueryOperator.Contains">
            <summary>
            Checks if a value contains another value (a.Contains(b))
            </summary>
        </member>
        <member name="F:Cenium.Framework.Data.QueryOperator.LessThan">
            <summary>
            Checks if a value is less than another value (a &lt; b)
            </summary>
        </member>
        <member name="F:Cenium.Framework.Data.QueryOperator.LessThanOrEqual">
            <summary>
            Checks if a value is less than or equal to another value (a &lt;= b)
            </summary>
        </member>
        <member name="F:Cenium.Framework.Data.QueryOperator.GreaterThan">
            <summary>
            Checks if a value is greater than another value (a &gt; b)
            </summary>
        </member>
        <member name="F:Cenium.Framework.Data.QueryOperator.GreaterThanOrEqual">
            <summary>
            Checks if a value is greater than or equal to another value (a =&gt; b)
            </summary>
        </member>
        <member name="F:Cenium.Framework.Data.QueryOperator.Range">
            <summary>
            Checks if a value falls within a range (a &gt;= b AND a &lt;= c)
            </summary>
        </member>
        <member name="F:Cenium.Framework.Data.QueryOperator.In">
            <summary>
            Checks if a value is in a list of values (a == b OR a == c OR ... OR a == z)
            </summary>
        </member>
        <member name="F:Cenium.Framework.Data.QueryOperator.NotIn">
            <summary>
            Checks if a value is not in a list of values (a != b AND a != c AND ... AND a != z)
            </summary>
        </member>
        <member name="F:Cenium.Framework.Data.QueryOperator.All">
            <summary>
            Checks if a set of values match all the values of a list of values
            </summary>
        </member>
        <member name="F:Cenium.Framework.Data.QueryOperator.Any">
            <summary>
            Checks if a set of values match any of the values of a list of values
            </summary>
        </member>
        <member name="T:Cenium.Framework.Data.QueryOperatorInfo">
            <summary>
            Contains information about a query operator.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.QueryOperatorInfo.#ctor(Cenium.Framework.Data.QueryOperator)">
            <summary>
            Initializes a new instance of the QueryOperatorInfo class with no parameters
            </summary>
            <param name="oper">The operator name</param>
        </member>
        <member name="M:Cenium.Framework.Data.QueryOperatorInfo.#ctor(Cenium.Framework.Data.QueryOperator,System.Int32)">
            <summary>
            Initializes a new instance of the QueryOperatorInfo class with a fixed parameter count
            </summary>
            <param name="oper">The operator name</param>
            <param name="paramCount">the number of parameters this operator takes</param>
        </member>
        <member name="M:Cenium.Framework.Data.QueryOperatorInfo.#ctor(Cenium.Framework.Data.QueryOperator,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the QueryOperatorInfo class
            </summary>
            <param name="oper">The operator name</param>
            <param name="minParamCount">the minimum number of parameters this operator takes</param>
            <param name="maxParamCount">the maximum number of parameters this operator takes. Specify int.MaxValue for infinite</param>
        </member>
        <member name="P:Cenium.Framework.Data.QueryOperatorInfo.Operator">
            <summary>
            Gets the operator
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.QueryOperatorInfo.MinParameterCount">
            <summary>
            Gets the minimum number of parameters this operator requires
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.QueryOperatorInfo.MaxParameterCount">
            <summary>
            Gets the maximum number of parameters this operator requires
            </summary>
        </member>
        <member name="P:Cenium.Framework.Data.QueryOperatorInfo.IsRangeParameterCount">
            <summary>
            Gets if this operator uses a range of parameters
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.QueryOperatorInfo.ToLinq(System.String,System.String[])">
            <summary>
            Returns a linq expression as a string
            </summary>
            <param name="propertyName">The name of the property to apply the operator for</param>
            <param name="parameters">The list of parameters</param>
            <returns>a linq dynamic linq expression expressed as a string</returns>
        </member>
        <member name="M:Cenium.Framework.Data.QueryOperatorInfo.CreateLinqStatement(System.String,System.String[])">
            <summary>
            Returns a linq dynamic linq expression expressed as a string. Derived classes should override this method.
            </summary>
            <param name="propertyName">The name of the property to apply the operator for</param>
            <param name="parameters">The list of parameters</param>
            <returns>a linq dynamic linq expression expressed as a string</returns>
        </member>
        <member name="T:Cenium.Framework.Data.QueryManager">
            <summary>
            Provides methods to create and resolve queries
            </summary>
        </member>
        <member name="M:Cenium.Framework.Data.QueryManager.GetInfo(Cenium.Framework.Data.QueryOperator)">
            <summary>
            Returns a QueryOperatorInfo instance for a specified operator
            </summary>
            <param name="oper">The operator name to find the operator for</param>
            <returns>an instance of QueryOperatorInfo, or null if no operator matches</returns>
        </member>
        <member name="M:Cenium.Framework.Data.QueryManager.GetInfo(System.Type,Cenium.Framework.Data.QueryOperator)">
            <summary>
            Returns a QueryOperatorInfo instance for a specified property type and operator
            </summary>
            <param name="oper">The operator name to find the operator for</param>
            <returns>an instance of QueryOperatorInfo, or null if no operator matches</returns>
        </member>
        <member name="M:Cenium.Framework.Data.QueryManager.RegisterQueryOperator(Cenium.Framework.Data.IQueryOperatorInfo)">
            <summary>
            Register a new operator
            </summary>
            <param name="info">A QueryOperatorInfo class</param>
        </member>
        <member name="M:Cenium.Framework.Data.QueryManager.Apply(System.Collections.IEnumerable,Cenium.Framework.Data.IQuery)">
            <summary>
            Applies a query to an IEnumerable as a LINQ query and returns the modified IEnumerable
            </summary>
            <param name="enumerable">The IEnumerable instance to apply the query to</param>
            <param name="qry">The Query instance to apply</param>
            <returns>A modified IEnumerable instance</returns>
        </member>
        <member name="M:Cenium.Framework.Data.QueryManager.Apply(System.Object,System.Collections.IEnumerable,Cenium.Framework.Data.IQuery)">
            <summary>
            Applies a query to an IEnumerable as a LINQ query and returns the modified IEnumerable
            </summary>
            <param name="context">The context for the query</param>
            <param name="enumerable">The IEnumerable instance to apply the query to</param>
            <param name="qry">The Query instance to apply</param>
            <returns>A modified IEnumerable instance</returns>
        </member>
        <member name="M:Cenium.Framework.Data.QueryManager.Parse(System.String)">
            <summary>
            Returns a Query object based on a string representation of the query
            </summary>
            <param name="query">The query to parse</param>
            <returns>A Query instance</returns>
        </member>
        <member name="M:Cenium.Framework.Data.QueryManager.Parse(System.String,System.String)">
            <summary>
            Parses a query into a set of query expressions
            </summary>
            <param name="query">The query to parse</param>
            <param name="sortOrder">The sort order to apply</param>
            <returns>A new Query instance</returns>
        </member>
        <member name="M:Cenium.Framework.Data.QueryManager.RegisterEntityQueryHandler``1(System.String,Cenium.Framework.Data.EntityQueryHandlerInfo.QueryHandlerDelegate)">
            <summary>
            Registers a query handler for a property in an entity
            </summary>
            <typeparam name="T">The entity type</typeparam>
            <param name="propertyName">Name of the property to associate the handler with</param>
            <param name="handler">The handler delegate to register</param>
        </member>
        <member name="M:Cenium.Framework.Data.QueryManager.GetQueryHandlersForEntity(System.Type)">
            <summary>
            Gets the query handlers for entity.
            </summary>
            <param name="entityType">The entity type to get the query handlers for</param>
            <returns>A read-only collection of EntityQueryHandlerInfo instance, or null if no query handlers have been registered for the entity.</returns>
        </member>
        <member name="T:Cenium.Framework.Data.UserReference">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="T:Cenium.Framework.Deployment.ProductFeatureAttribute">
            <summary>
            Defines a product feature using an attribute
            </summary>
            <seealso cref="T:Cenium.Framework.Deployment.ProductFeature"/>
        </member>
        <member name="M:Cenium.Framework.Deployment.ProductFeatureAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the ProductFeatureAttribute class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Deployment.ProductFeatureAttribute.Identity">
            <summary>
            Gets the identity of the feature
            </summary>
        </member>
        <member name="P:Cenium.Framework.Deployment.ProductFeatureAttribute.Name">
            <summary>
            Gets the display-friendly name of the feature
            </summary>
        </member>
        <member name="P:Cenium.Framework.Deployment.ProductFeatureAttribute.Description">
            <summary>
            Gets the description of the feature
            </summary>
        </member>
        <member name="T:Cenium.Framework.Diagnostics.ProfilerEvent">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="M:Cenium.Framework.Diagnostics.ProfilerEvent.#ctor">
            <summary>
            Initializes a new instance of the ProfileEvent class
            </summary>
        </member>
        <member name="T:Cenium.Framework.Diagnostics.ProfilerProvider">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="M:Cenium.Framework.Diagnostics.ProfilerProvider.#ctor">
            <summary>
            Initializes a new instance of the ProfileProvider class
            </summary>
        </member>
        <member name="T:Cenium.Framework.Diagnostics.Profiler">
            <summary>
            Provides a set of methods that help profile workflows
            </summary>
        </member>
        <member name="P:Cenium.Framework.Diagnostics.Profiler.CurrentSession">
            <summary>
            Gets the current profile session.
            </summary>
        </member>
        <member name="T:Cenium.Framework.Diagnostics.ProfilerSession">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="M:Cenium.Framework.Diagnostics.ProfilerSession.#ctor">
            <summary>
            Initializes a new instance of the ProfileSession class
            </summary>
        </member>
        <member name="T:Cenium.Framework.Jobs.ScheduleUtility">
            <summary>
            Contains helper methods for handling job schedules
            </summary>
        </member>
        <member name="M:Cenium.Framework.Jobs.ScheduleUtility.Validate(Cenium.Framework.Jobs.Schedule)">
            <summary>
            Validates a job schedule instance
            </summary>
            <param name="schedule">The schedule instance to validate.</param>
        </member>
        <member name="T:Cenium.Framework.Json.JsonSerializer">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="M:Cenium.Framework.Json.JsonSerializer.Serialize``1(Cenium.Framework.Json.JsonStreamWriter,``0)">
            <summary>
            Serializes an object using the specified writer.
            </summary>
            <typeparam name="T">The type to serialize</typeparam>
            <param name="writer">The writer to serialize to.</param>
            <param name="obj">The object to serialize.</param>
        </member>
        <member name="M:Cenium.Framework.Json.JsonSerializer.Serialize``1(Cenium.Framework.Json.JsonStreamWriter,``0,Cenium.Framework.Json.JsonSerializeInterceptor)">
            <summary>
            Serializes an object using the specified writer. This method allows you to specify an interceptor to convert a value if necessary
            </summary>
            <typeparam name="T">The type to serialize</typeparam>
            <param name="writer">The writer to serialize to.</param>
            <param name="obj">The object to serialize.</param>
            <param name="interceptor">The interceptor method to use. This value can be null.</param>
        </member>
        <member name="M:Cenium.Framework.Json.JsonSerializer.Serialize``1(Cenium.Framework.Json.JsonStreamWriter,System.Collections.Generic.ICollection{``0})">
            <summary>
            Serializes a collection to a json array
            </summary>
            <typeparam name="T">The collection type</typeparam>
            <param name="writer">The json writer to serialize the collection to</param>
            <param name="collection">The collection containing the items</param>
        </member>
        <member name="M:Cenium.Framework.Json.JsonSerializer.Serialize``1(Cenium.Framework.Json.JsonStreamWriter,System.Collections.Generic.ICollection{``0},Cenium.Framework.Json.JsonSerializeInterceptor)">
            <summary>
            Serializes a collection to a json array. This method allows you to specify an interceptor to convert a value if necessary
            </summary>
            <typeparam name="T">The collection type</typeparam>
            <param name="writer">The json writer to serialize the collection to</param>
            <param name="collection">The collection containing the items</param>
            <param name="interceptor">The interceptor method to use. This value can be null.</param>
        </member>
        <member name="M:Cenium.Framework.Json.JsonSerializer.SerializeToString``1(``0)">
            <summary>
            Serializes an object to a json array.
            </summary>
            <typeparam name="T">The object type</typeparam>
            <param name="obj">The object to serialize</param>
            <returns>A json class represented as a string. If the object is null, the method returns null.</returns>
        </member>
        <member name="M:Cenium.Framework.Json.JsonSerializer.SerializeToString``1(``0,Cenium.Framework.Json.JsonSerializeInterceptor)">
            <summary>
            Serializes an object to a json array. This method allows you to specify an interceptor to convert a value if necessary.
            </summary>
            <typeparam name="T">The object type</typeparam>
            <param name="obj">The object to serialize</param>
            <param name="interceptor">The interceptor method to use. This value can be null.</param>
            <returns>A json class represented as a string. If the object is null, the method returns null.</returns>
        </member>
        <member name="M:Cenium.Framework.Json.JsonSerializer.SerializeToString``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Serializes a collection to a json array.
            </summary>
            <typeparam name="T">The collection type argument</typeparam>
            <param name="values">The collection of items to serialize</param>
            <returns>A json array represented as a string. If the collection is null or has 0 elements, the method returns null.</returns>
        </member>
        <member name="M:Cenium.Framework.Json.JsonSerializer.SerializeToString``1(System.Collections.Generic.ICollection{``0},Cenium.Framework.Json.JsonSerializeInterceptor)">
            <summary>
            Serializes a collection to a json array. This method allows you to specify an interceptor to convert a value if necessary.
            </summary>
            <typeparam name="T">The collection type argument</typeparam>
            <param name="values">The collection of items to serialize</param>
            <param name="interceptor">The interceptor method to use. This value can be null.</param>
            <returns>A json array represented as a string. If the collection is null or has 0 elements, the method returns null.</returns>
        </member>
        <member name="T:Cenium.Framework.Json.JsonSerializeInterceptor">
            <summary>
            Defines the signature of a Json serializer interceptor. The interceptor can be used to intercept and rewrite values before they are added to the Json document.
            </summary>
            <param name="obj">The object being serialized.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="propertyType">The type of the property.</param>
            <param name="baseValue">The property base value.</param>
            <returns>The rewritten value.</returns>
        </member>
        <member name="T:Cenium.Framework.Language.EntityLanguageCachePage">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="M:Cenium.Framework.Language.EntityLanguageCachePage.#ctor(System.String)">
            <summary>
            Initializes a new instance of the EntityLanguageEntry class
            </summary>
        </member>
        <member name="T:Cenium.Framework.Language.ITranslationProvider">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="T:Cenium.Framework.Language.LanguageCachePage">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="M:Cenium.Framework.Language.LanguageCachePage.#ctor">
            <summary>
            Initializes a new instance of the LanguageCachePage class
            </summary>
        </member>
        <member name="T:Cenium.Framework.Language.LanguageTerms">
            <summary>
            Contains standard language terms
            </summary>
        </member>
        <member name="T:Cenium.Framework.Language.TermCollection">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="M:Cenium.Framework.Language.TermCollection.#ctor">
            <summary>
            Initializes a new instance of the TermCollection class
            </summary>
        </member>
        <member name="T:Cenium.Framework.Language.TranslatedTextElement">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="M:Cenium.Framework.Language.TranslatedTextElement.#ctor">
            <summary>
            Initializes a new instance of the TranslatedTextElement class
            </summary>
        </member>
        <member name="T:Cenium.Framework.Language.TranslationHelper">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="M:Cenium.Framework.Language.TranslationHelper.GetOrAddTranslatedClientConstants(System.String,System.String,System.Func{System.String,System.String,Cenium.Framework.Language.LanguageCachePage})">
            <summary>
            Gets the or adds a cache page for translated client constants
            </summary>
            <param name="fragment">The fragment name</param>
            <param name="languageCode">The language code.</param>
            <param name="factory">The function used to get a absent cache page</param>
            <returns></returns>
        </member>
        <member name="T:Cenium.Framework.Language.Translations">
            <summary>
            Contains methods for handling runtime translations.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Language.Translations.DefaultLanguageCulture">
            <summary>
            Gets the <c>CultureInfo</c> instance for the default language
            </summary>
        </member>
        <member name="P:Cenium.Framework.Language.Translations.CurrentLanguageCode">
            <summary>
            Gets the current language code for the session
            </summary>
        </member>
        <member name="M:Cenium.Framework.Language.Translations.SetProvider(Cenium.Framework.Language.ITranslationProvider)">
            <summary>
            Sets the translation provider
            </summary>
            <param name="provider">The provider instance</param>
        </member>
        <member name="M:Cenium.Framework.Language.Translations.AddTermLoader(System.Action{Cenium.Framework.Language.TermCollection})">
            <summary>
            Adds a term loader factory
            </summary>
            <param name="factory">The term loader factory</param>
        </member>
        <member name="P:Cenium.Framework.Language.Translations.Terms">
            <summary>
            Gets all the registered terms.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Language.Translations.GetTermsForComponent(System.String)">
            <summary>
            Gets all the terms registered by a specific component.
            </summary>
            <param name="component">The component to get the terms for</param>
            <returns>A read-only dictionary containing the term identifies and the term</returns>
        </member>
        <member name="M:Cenium.Framework.Language.Translations.GetTerm(System.String)">
            <summary>
            Gets the term text based on a term identifier
            </summary>
            <param name="identity">The term identifier</param>
            <returns>The text associated with the term, or null if the term does not exist.</returns>
        </member>
        <member name="M:Cenium.Framework.Language.Translations.GetConstantsForComponent(System.String)">
            <summary>
            returns a read-only collection containing all registered language constants for a specified component
            </summary>
            <param name="component">The component to get the constants for</param>
            <returns>An <c>IReadOnlyCollection</c> instance of LanguageConstants</returns>
        </member>
        <member name="M:Cenium.Framework.Language.Translations.GetTermTranslations(System.String)">
            <summary>
            Gets all translated terms
            </summary>
            <param name="languageCode">The language code.</param>
            <returns>A <c>Dictionary</c> with the identifier as key and translated term as value</returns>
        </member>
        <member name="M:Cenium.Framework.Language.Translations.GetEntityTranslations(System.String,System.String)">
            <summary>
            Gets all translated display names for an entity (including properties).
            </summary>
            <param name="entityName">Name of the entity.</param>
            <param name="languageCode">The language code.</param>
            <returns>A <c>Dictionary</c> with the identifier as key and translated display name as value</returns>
        </member>
        <member name="M:Cenium.Framework.Language.Translations.GetEntityNameTranslated(System.Type,System.String)">
            <summary>
            Gets the translated display name for an entity
            </summary>
            <param name="entityType">The type that implements the entity</param>
            <returns>The translated entity name</returns>
        </member>
        <member name="M:Cenium.Framework.Language.Translations.GetEntityNameTranslated(System.Type)">
            <summary>
            Gets the translated entity name using the current UI language.
            </summary>
            <param name="entityType">The entity type to translate</param>
            <returns>The translated entity name.</returns>
        </member>
        <member name="M:Cenium.Framework.Language.Translations.GetEntityNameTranslated(Cenium.Framework.Data.IEntityTypeInfo,System.String)">
            <summary>
            Gets the translated display name for an entity
            </summary>
            <param name="entityType">The <c>IEntityTypeInfo</c> for the entity</param>
            <returns>The translated entity name</returns>
        </member>
        <member name="M:Cenium.Framework.Language.Translations.GetPropertyNameTranslated(System.Reflection.PropertyInfo,System.String)">
            <summary>
            Gets the translated property name
            </summary>
            <param name="property">The property to get the translated display name for</param>
            <returns>The translated property display name</returns>
        </member>
        <member name="M:Cenium.Framework.Language.Translations.GetPropertyNameTranslated(Cenium.Framework.Data.EntityPropertyInfo,System.String)">
            <summary>
            Gets the translated property name
            </summary>
            <param name="property">The entity property information to get the translated display name for</param>
            <returns>The translated property display name</returns>
        </member>
        <member name="M:Cenium.Framework.Language.Translations.GetTermTranslated(System.String,System.String)">
            <summary>
            Gets the translated term.
            </summary>
            <param name="termId">The term identifier.</param>
            <param name="languageCode">The language code.</param>
            <returns>The translated term value</returns>
        </member>
        <member name="M:Cenium.Framework.Language.Translations.GetConstantTranslated(Cenium.Framework.Language.LanguageConstant,System.String)">
            <summary>
            Gets the translated constant.
            </summary>
            <param name="constant">The constant to translate</param>
            <param name="languageCode">The language code.</param>
            <returns>The translated constant text value</returns>
        </member>
        <member name="M:Cenium.Framework.Language.Translations.GetConstantTranslated(Cenium.Framework.Language.LanguageConstant)">
            <summary>
            Gets the translated constant for the current UI language.
            </summary>
            <param name="constant">The constant to translate</param>
            <returns>The translated constant text value</returns>
        </member>
        <member name="M:Cenium.Framework.Language.Translations.Format(Cenium.Framework.Language.LanguageConstant,System.String,System.Object[])">
            <summary>
            Creates a formatted, translated text for a constant
            </summary>
            <param name="constant">The constant to format</param>
            <param name="languageCode">The language code.</param>
            <param name="args">The format arguments</param>
            <returns>A translated, formatted text</returns>
        </member>
        <member name="T:Cenium.Framework.Linq.ExpressionVisitorBase">
            <summary>
            Base class for framework expression visitors
            </summary>
        </member>
        <member name="M:Cenium.Framework.Linq.ExpressionVisitorBase.#ctor">
            <summary>
            Initializes a new instance of the ExpressionVisitorBase class
            </summary>
        </member>
        <member name="T:Cenium.Framework.Logging.ServerEventLogProvider">
            <summary>
            Default event log provider for server applications.
            </summary>
            <remarks>This provider writes entries to the event log. The log and source must have been created prior to creating an instance of this class. If the log or source does not exist, no entries are written.</remarks>
        </member>
        <member name="M:Cenium.Framework.Logging.ServerEventLogProvider.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the ServerEventLogProvider class
            </summary>
            <param name="logName">The name of the event log</param>
            <param name="applicationName">The name of the application</param>
        </member>
        <member name="M:Cenium.Framework.Logging.ServerEventLogProvider.Message(System.String,System.Object[])">
            <summary>
            Outputs a message to the event log
            </summary>
            <param name="message">The message as a string. This may be a composite format string.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:Cenium.Framework.Logging.ServerEventLogProvider.Warning(System.String,System.Object[])">
            <summary>
            Outputs a warning message to the event log
            </summary>
            <param name="message">The message as a string. This may be a composite format string.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:Cenium.Framework.Logging.ServerEventLogProvider.Error(System.String,System.Object[])">
            <summary>
            Outputs an error message to the event log
            </summary>
            <param name="message">The message as a string. This may be a composite format string.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="T:Cenium.Framework.Logging.ServerTraceEventSource">
            <summary>
            Server provider for trace logging
            </summary>
            <remarks>
            This is an infrastructure class and is only meant to be called from the framework.
            </remarks>
        </member>
        <member name="M:Cenium.Framework.Logging.ServerTraceEventSource.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ServerTraceEventSource class
            </summary>
        </member>
        <member name="T:Cenium.Framework.Logging.ServerTraceProvider">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="F:Cenium.Framework.Logging.ServerTraceProvider.ProviderIdentityGateway">
            <summary>
            Defines the provider identity for a gateway server
            </summary>
        </member>
        <member name="F:Cenium.Framework.Logging.ServerTraceProvider.ProviderIdentityPrintAgent">
            <summary>
            Defines the provider identity for a print agent
            </summary>
        </member>
        <member name="F:Cenium.Framework.Logging.ServerTraceProvider.ProviderIdentityEF">
            <summary>
            Defines the provider identity for an EF server
            </summary>
        </member>
        <member name="M:Cenium.Framework.Logging.ServerTraceProvider.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ServerTraceProvider class
            </summary>
            <param name="name">The name of the trace provider.</param>
        </member>
        <member name="M:Cenium.Framework.Logging.ServerTraceProvider.#ctor">
            <summary>
            Initializes a new instance of the ServerTraceProvider class
            </summary>
        </member>
        <member name="T:Cenium.Framework.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Properties.Resources.AssertCustomPropertyGroupConfiguration">
            <summary>
              Looks up a localized string similar to Unable to get custom property values for type &apos;{0}&apos;. Type has not been configured as a custom property value entity..
            </summary>
        </member>
        <member name="T:Cenium.Framework.Reflection.PropertyValueHandler">
            <summary>
            Represents a class that can dynamically get or set property values.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Reflection.PropertyValueHandler.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            Initializes a new instance of the PropertyValueHandler class
            </summary>
            <param name="property">The property this handler is valid for.</param>
        </member>
        <member name="P:Cenium.Framework.Reflection.PropertyValueHandler.PropertyType">
            <summary>
            Gets the type of the property.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Reflection.PropertyValueHandler.Get(System.Object)">
            <summary>
            Gets a property value from the specified object
            </summary>
            <param name="obj">The object to get the property value from.</param>
            <returns>The property value.</returns>
        </member>
        <member name="M:Cenium.Framework.Reflection.PropertyValueHandler.Set(System.Object,System.Object)">
            <summary>
            Sets a property value from the specified object
            </summary>
            <param name="obj">The object to set the property value on.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Cenium.Framework.Reflection.PropertyValueHandler.Copy(System.Object,System.Object)">
            <summary>
            Copies the property value from the source argument to the target argument
            </summary>
            <param name="source">The source object to copy the property value from.</param>
            <param name="target">The target object to set the property value on.</param>
            <returns>The value that was copied.</returns>
        </member>
        <member name="T:Cenium.Framework.Reflection.ReflectionUtility">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="T:Cenium.Framework.Reflection.ReflectionUtility.NewInstanceDelegate">
            <summary>
            Delegate for creating new instances of a Type
            </summary>
            <returns>A new instance of the Type the delegate was created for</returns>
        </member>
        <member name="M:Cenium.Framework.Reflection.ReflectionUtility.MakeNewInstanceDelegate(System.Type)">
            <summary>
            Creates a delegate for creating new instances using the default constructor
            </summary>
            <param name="type">The type to create a delegate for</param>
            <returns>A <c>NewInstanceDelegate</c> instance</returns>
        </member>
        <member name="T:Cenium.Framework.Reports.IReportPrinter">
            <summary>
            Defines a report server printer
            </summary>
        </member>
        <member name="P:Cenium.Framework.Reports.IReportPrinter.PrinterDeviceId">
            <summary>
            Gets the printer device identifier.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Reports.IReportPrinter.DisplayName">
            <summary>
            Gets the display name of the printer.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Reports.IReportPrinter.DeviceName">
            <summary>
            Gets the device name of the printer.
            </summary>
        </member>
        <member name="T:Cenium.Framework.Reports.IReportSchemaRequired">
            <summary>
            Explain the purpose of the interface here
            </summary>
        </member>
        <member name="T:Cenium.Framework.Reports.PrintServerComponentAttribute">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="M:Cenium.Framework.Reports.PrintServerComponentAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the PrintServerComponentAttribute class
            </summary>
        </member>
        <member name="T:Cenium.Framework.Reports.PrintServerComponentFactory">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="M:Cenium.Framework.Reports.PrintServerComponentFactory.#ctor">
            <summary>
            Initializes a new instance of the PrintServerComponentFactory class
            </summary>
        </member>
        <member name="T:Cenium.Framework.Reports.ReportDistributionMethod">
            <summary>
            Defines the method by which a report is distributed
            </summary>
        </member>
        <member name="F:Cenium.Framework.Reports.ReportDistributionMethod.None">
            <summary>
            No distribution is defined
            </summary>
        </member>
        <member name="F:Cenium.Framework.Reports.ReportDistributionMethod.Mail">
            <summary>
            Report is sent by email
            </summary>
        </member>
        <member name="F:Cenium.Framework.Reports.ReportDistributionMethod.Print">
            <summary>
            Report is sent to a printer
            </summary>
        </member>
        <member name="T:Cenium.Framework.Reports.ReportExecutedEventArgs">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="M:Cenium.Framework.Reports.ReportExecutedEventArgs.#ctor(Cenium.Framework.Reports.ReportParameters)">
            <summary>
            Initializes a new instance of the ReportExecutedEventArgs class
            </summary>
        </member>
        <member name="T:Cenium.Framework.Reports.ReportIdentity">
            <summary>
            Represents a report identity
            </summary>
        </member>
        <member name="M:Cenium.Framework.Reports.ReportIdentity.#ctor(System.Int64,System.Guid)">
            <summary>
            Initializes a new instance of the ReportIdentity class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Reports.ReportIdentity.Identity">
            <summary>
            Gets the identity of the report storage
            </summary>
        </member>
        <member name="P:Cenium.Framework.Reports.ReportIdentity.PublishId">
            <summary>
            Gets the publishing identifier.
            </summary>
        </member>
        <member name="T:Cenium.Framework.Reports.ReportParameterOptions">
             <summary>
            
             </summary>
        </member>
        <member name="T:Cenium.Framework.Reports.ReportRenderer">
            <summary>
            Explain the purpose of the interface here
            </summary>
        </member>
        <member name="T:Cenium.Framework.Reports.ReportTask">
            <summary>
            Represents a task to create a report
            </summary>
        </member>
        <member name="M:Cenium.Framework.Reports.ReportTask.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ReportTask class
            </summary>
            <param name="reportId">The report type this task will create</param>
        </member>
        <member name="P:Cenium.Framework.Reports.ReportTask.DistributionMethod">
            <summary>
            Gets or sets the distribution method for the generated report
            </summary>
        </member>
        <member name="P:Cenium.Framework.Reports.ReportTask.Recipients">
            <summary>
            Gets or sets the recipients for the generated report.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Reports.ReportTask.OrderedBy">
            <summary>
            Gets or sets the user identity for the owner of the task.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Reports.ReportTask.ReportTemplateId">
            <summary>
            Gets or sets the report template to use when distributing.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Reports.ReportTask.ReportId">
            <summary>
            Gets the report identifier.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Reports.ReportTask.PrinterDeviceId">
            <summary>
            Gets or sets the printer device identifier.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Reports.ReportTask.Parameters">
            <summary>
            Gets the parameters for the report
            </summary>
        </member>
        <member name="P:Cenium.Framework.Reports.ReportTask.AccessUsers">
            <summary>
            Gets a collection of user identities who will have access to the report
            </summary>
        </member>
        <member name="M:Cenium.Framework.Reports.ReportTask.SetParameterValue(System.String,System.Object)">
            <summary>
            Sets the value for a named parameter
            </summary>
            <param name="name">The name of the parameter to set</param>
            <param name="value">The value to set</param>
        </member>
        <member name="M:Cenium.Framework.Reports.ReportTask.AddAccessUsers(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds a range of access users
            </summary>
            <param name="values">The user identities to add.</param>
        </member>
        <member name="T:Cenium.Framework.Reports.HTMLReportLayoutRenderer">
            <summary>
            Layout renderer that produces an HTML output. The template type is an XSLT
            </summary>
        </member>
        <member name="M:Cenium.Framework.Reports.HTMLReportLayoutRenderer.#ctor">
            <summary>
            Initializes a new instance of the HTMLReportLayoutRenderer class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Reports.HTMLReportLayoutRenderer.Name">
            <summary>
            Gets the registration name of the layout renderer
            </summary>
        </member>
        <member name="P:Cenium.Framework.Reports.HTMLReportLayoutRenderer.DisplayName">
            <summary>
            Gets the display name of the layout renderer
            </summary>
        </member>
        <member name="P:Cenium.Framework.Reports.HTMLReportLayoutRenderer.MimeType">
            <summary>
            Gets the mime type for the output stream
            </summary>
        </member>
        <member name="P:Cenium.Framework.Reports.HTMLReportLayoutRenderer.FileNameExtension">
            <summary>
            Gets the file name extension for the output stream
            </summary>
        </member>
        <member name="P:Cenium.Framework.Reports.HTMLReportLayoutRenderer.RequiresTemplate">
            <summary>
            Gets if the renderer must have a template. This method always return true
            </summary>
        </member>
        <member name="P:Cenium.Framework.Reports.HTMLReportLayoutRenderer.SupportsTemplate">
            <summary>
            Gets if the renderer supports templates - this method always return true
            </summary>
        </member>
        <member name="M:Cenium.Framework.Reports.HTMLReportLayoutRenderer.Render(Cenium.Framework.Reports.IReportContent,Cenium.Framework.Reports.IReportLayoutTemplate,System.IO.Stream)">
            <summary>
            Performs the rendering
            </summary>
            <param name="reportContent">The content to render</param>
            <param name="outputStream">The output stream to write the rendered content to</param>
        </member>
        <member name="T:Cenium.Framework.Reports.IReportContent">
            <summary>
            Defines a report stored in a report storage
            </summary>
        </member>
        <member name="P:Cenium.Framework.Reports.IReportContent.ReportId">
            <summary>
            Gets the report identifier
            </summary>
        </member>
        <member name="P:Cenium.Framework.Reports.IReportContent.Name">
            <summary>
            Gets the report name
            </summary>
        </member>
        <member name="P:Cenium.Framework.Reports.IReportContent.UserId">
            <summary>
            Gets the user that ordered the report
            </summary>
        </member>
        <member name="P:Cenium.Framework.Reports.IReportContent.Status">
            <summary>
            Gets the status of the report
            </summary>
        </member>
        <member name="P:Cenium.Framework.Reports.IReportContent.StatusText">
            <summary>
            Gets the status text of the report
            </summary>
        </member>
        <member name="P:Cenium.Framework.Reports.IReportContent.Content">
            <summary>
            Gets the report content
            </summary>
        </member>
        <member name="T:Cenium.Framework.Reports.IReportInfo">
            <summary>
            Defines a structure that contains information about a report type
            </summary>
        </member>
        <member name="P:Cenium.Framework.Reports.IReportInfo.Name">
            <summary>
            Gets the name of the report
            </summary>
        </member>
        <member name="P:Cenium.Framework.Reports.IReportInfo.Component">
            <summary>
            Gets the component the report type belongs to
            </summary>
        </member>
        <member name="P:Cenium.Framework.Reports.IReportInfo.DisplayName">
            <summary>
            Gets the display name for the report type
            </summary>
        </member>
        <member name="P:Cenium.Framework.Reports.IReportInfo.Description">
            <summary>
            Gets the description for the report type
            </summary>
        </member>
        <member name="P:Cenium.Framework.Reports.IReportInfo.HasSchema">
            <summary>
            Gets a value indicating whether this report has a schema.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Reports.IReportInfo.Schema">
            <summary>
            Gets the schema for the report.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Reports.IReportInfo.XmlSchema">
            <summary>
            Gets the schema for the report as an XML schema.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Reports.IReportInfo.SchemaAsString">
            <summary>
            Gets the schema as a string.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Reports.IReportInfo.HasParameters">
            <summary>
            Gets a value indicating whether this report has parameters.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Reports.IReportInfo.IsNotesSupported">
            <summary>
            Gets a value indicating whether this report supports notes
            </summary>
        </member>
        <member name="T:Cenium.Framework.Reports.IReportLayout">
            <summary>
            Defines a layout for a specific report type
            </summary>
        </member>
        <member name="P:Cenium.Framework.Reports.IReportLayout.Id">
            <summary>
            Gets the identity for the report layout
            </summary>
        </member>
        <member name="P:Cenium.Framework.Reports.IReportLayout.Name">
            <summary>
            Gets the name for the report
            </summary>
        </member>
        <member name="P:Cenium.Framework.Reports.IReportLayout.DisplayName">
            <summary>
            Gets the display name for the report layout
            </summary>
        </member>
        <member name="P:Cenium.Framework.Reports.IReportLayout.RendererType">
            <summary>
            Gets the renderer type associated with the layout
            </summary>
        </member>
        <member name="T:Cenium.Framework.Reports.IReportLayoutRenderer">
            <summary>
            Defines the contract for report layout renderers
            </summary>
            <remarks>
            Layout renderer implementations must be thread-safe
            </remarks>
        </member>
        <member name="P:Cenium.Framework.Reports.IReportLayoutRenderer.Name">
            <summary>
            Gets the registration name of the layout renderer
            </summary>
        </member>
        <member name="P:Cenium.Framework.Reports.IReportLayoutRenderer.DisplayName">
            <summary>
            Gets the display name of the layout renderer
            </summary>
        </member>
        <member name="P:Cenium.Framework.Reports.IReportLayoutRenderer.MimeType">
            <summary>
            Gets the mime type for the output stream
            </summary>
        </member>
        <member name="P:Cenium.Framework.Reports.IReportLayoutRenderer.FileNameExtension">
            <summary>
            Gets the file name extension for the output stream
            </summary>
        </member>
        <member name="P:Cenium.Framework.Reports.IReportLayoutRenderer.RequiresTemplate">
            <summary>
            Gets if the renderer must have a template. Only applicable if SupportsTemplate is true
            </summary>
        </member>
        <member name="P:Cenium.Framework.Reports.IReportLayoutRenderer.SupportsTemplate">
            <summary>
            Gets if the renderer supports templates
            </summary>
        </member>
        <member name="P:Cenium.Framework.Reports.IReportLayoutRenderer.SupportsTemplateGeneration">
            <summary>
            Gets if the renderer supports creating templates
            </summary>
            <value>
            <c>true</c> if the renderer supports creating templates; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Cenium.Framework.Reports.IReportLayoutRenderer.Render(Cenium.Framework.Reports.IReportContent,Cenium.Framework.Reports.IReportLayoutTemplate,System.IO.Stream)">
            <summary>
            Performs the rendering
            </summary>
            <param name="reportContent">The content to render</param>
            <param name="template">The template to use when rendering</param>
            <param name="outputStream">The output stream to write the rendered content to</param>
        </member>
        <member name="M:Cenium.Framework.Reports.IReportLayoutRenderer.CreateTemplate(Cenium.Framework.Reports.IReportInfo)">
            <summary>
            Creates a template for a specific report type
            </summary>
            <param name="report">The report to create a template for.</param>
        </member>
        <member name="T:Cenium.Framework.Reports.IReportLayoutTemplate">
            <summary>
            Defines a report layout template
            </summary>
        </member>
        <member name="P:Cenium.Framework.Reports.IReportLayoutTemplate.ReportTemplateId">
            <summary>
            Gets the unique identifier for the template
            </summary>
        </member>
        <member name="P:Cenium.Framework.Reports.IReportLayoutTemplate.RendererType">
            <summary>
            Gets the renderer type the template is associated with
            </summary>
        </member>
        <member name="P:Cenium.Framework.Reports.IReportLayoutTemplate.Template">
            <summary>
            Gets the report template
            </summary>
        </member>
        <member name="T:Cenium.Framework.Reports.IReportParameter">
            <summary>
            Defines information about a report parameter
            </summary>
        </member>
        <member name="P:Cenium.Framework.Reports.IReportParameter.Name">
            <summary>
            Gets the name of the parameter
            </summary>
        </member>
        <member name="P:Cenium.Framework.Reports.IReportParameter.DisplayName">
            <summary>
            Gets the display name for the parameter
            </summary>
        </member>
        <member name="P:Cenium.Framework.Reports.IReportParameter.ParameterType">
            <summary>
            Gets the parameter type
            </summary>
        </member>
        <member name="P:Cenium.Framework.Reports.IReportParameter.IsRequired">
            <summary>
            Gets if the parameter is required
            </summary>
        </member>
        <member name="P:Cenium.Framework.Reports.IReportParameter.DefaultValue">
            <summary>
            Gets the default value represented as a string
            </summary>
        </member>
        <member name="P:Cenium.Framework.Reports.IReportParameter.ParameterClrType">
            <summary>
            Gets the .NET type of the parameter
            </summary>
        </member>
        <member name="P:Cenium.Framework.Reports.IReportParameter.ValueList">
            <summary>
            Gets the lookup identity for the value list
            </summary>
        </member>
        <member name="P:Cenium.Framework.Reports.IReportParameter.Options">
            <summary>
            Gets the options for the value list
            </summary>
        </member>
        <member name="P:Cenium.Framework.Reports.IReportParameter.SortOrder">
            <summary>
            Gets the sort order.
            </summary>
        </member>
        <member name="T:Cenium.Framework.Reports.IReportPropertyContextHandler">
            <summary>
            Explain the purpose of the interface here
            </summary>
        </member>
        <member name="T:Cenium.Framework.Reports.IReportStorageProvider">
            <summary>
            Defines a provider for storing reports
            </summary>
        </member>
        <member name="M:Cenium.Framework.Reports.IReportStorageProvider.CreateReportRenderer">
            <summary>
            Creates the report renderer
            </summary>
            <returns>A new ReportRenderer instance</returns>
        </member>
        <member name="M:Cenium.Framework.Reports.IReportStorageProvider.CreateReportStorage(System.String,System.String)">
            <summary>
            Creates a new report storage
            </summary>
            <param name="name">The name of the report</param>
            <param name="userId">The identity of the user that ordered the report</param>
            <returns>A unique report identifier</returns>
        </member>
        <member name="M:Cenium.Framework.Reports.IReportStorageProvider.SetContent(Cenium.Framework.Reports.Report,Cenium.Framework.Reports.ReportParameters)">
            <summary>
            Sets the content for an existing report
            </summary>
            <param name="report">The report containing the content</param>
            <param name="parameters">the parameters used to execute the report</param>
        </member>
        <member name="M:Cenium.Framework.Reports.IReportStorageProvider.SetStatus(System.Int64,System.String,System.String,System.String)">
            <summary>
            Sets the status for an existing report
            </summary>
            <param name="id">The identity of the report storage</param>
            <param name="status">The status of the report</param>
            <param name="statusText">The status text (optional)</param>
            <param name="info">Information about the report</param>
        </member>
        <member name="M:Cenium.Framework.Reports.IReportStorageProvider.GetContent(System.Int64)">
            <summary>
            Gets the report content based on an identifier
            </summary>
            <param name="id">The identity of the report</param>
            <returns>An IReportContent instance</returns>
        </member>
        <member name="M:Cenium.Framework.Reports.IReportStorageProvider.GetCustomReportLayouts(System.String)">
            <summary>
            Gets an enumerable of IReportLayout instances for custom report layouts
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Cenium.Framework.Reports.IReportStorageProvider.GetDefaultCustomReportLayout(System.String)">
            <summary>
            Gets the default custom layout for a report
            </summary>
            <param name="name">The report type name</param>
            <returns>An <c>IReportLayout</c> instance representing the default layout, or null if no default exists.</returns>
        </member>
        <member name="M:Cenium.Framework.Reports.IReportStorageProvider.GetCustomReportLayoutByIdentity(System.Int64)">
            <summary>
            Gets a custom layout based on its identity
            </summary>
            <param name="layoutId">The identity of the custom layout</param>
            <returns>An <c>IReportLayout</c> instance representing the layout, or null if the layout does not exist</returns>
        </member>
        <member name="M:Cenium.Framework.Reports.IReportStorageProvider.GetCustomTemplate(System.Int64)">
            <summary>
            Gets a report layout template for a specified identifier
            </summary>
            <param name="id">The identity of the template to get</param>
            <returns>An IReportLayoutTemplate instance</returns>
        </member>
        <member name="M:Cenium.Framework.Reports.IReportStorageProvider.GetDefaultPrinterForReport(System.String)">
            <summary>
            Gets the default report printer for a specified report.
            </summary>
            <param name="name">The report type name</param>
            <returns>An <c>IReportPrinter</c> instance representing the default layout, or null if no default exists.</returns>
        </member>
        <member name="M:Cenium.Framework.Reports.IReportStorageProvider.Prepare(Cenium.Framework.Reports.Report)">
            <summary>
            Prepares the specified report.
            </summary>
            <param name="report">The report to prepare</param>
        </member>
        <member name="M:Cenium.Framework.Reports.IReportStorageProvider.AddTasks(System.Collections.Generic.IEnumerable{Cenium.Framework.Reports.ReportTask})">
            <summary>
            Adds report tasks for asynchronous processing
            </summary>
            <param name="tasks">The tasks to add</param>
        </member>
        <member name="M:Cenium.Framework.Reports.IReportStorageProvider.CreatePrintJob(System.Int64,System.Int64,System.Int64,System.String)">
            <summary>
            Creates a new print job for an existing report.
            </summary>
            <param name="reportId">The identifier of the report to create the job for.</param>
            <param name="reportLayoutId">The identifier of the layout to use.</param>
            <param name="printerDeviceId">The identifier of the printer to use.</param>
            <param name="userId">The identity of the user who owns the print job.</param>
        </member>
        <member name="T:Cenium.Framework.Reports.Report">
            <summary>
            Represents the content of a report
            </summary>
        </member>
        <member name="F:Cenium.Framework.Reports.Report.SectionMeta">
            <summary>
            Section name for a meta section
            </summary>
        </member>
        <member name="F:Cenium.Framework.Reports.Report.SectionHeader">
            <summary>
            Section name for a header section
            </summary>
        </member>
        <member name="F:Cenium.Framework.Reports.Report.SectionFooter">
            <summary>
            Section name for a footer section
            </summary>
        </member>
        <member name="F:Cenium.Framework.Reports.Report.SectionContent">
            <summary>
            Section name for a content section
            </summary>
        </member>
        <member name="F:Cenium.Framework.Reports.Report.SectionParameters">
            <summary>
            Section name for a parameters section
            </summary>
        </member>
        <member name="M:Cenium.Framework.Reports.Report.#ctor(System.Int64,System.Guid,System.String)">
            <summary>
            Initializes a new instance of the Report class
            </summary>
            <param name="id">The identity of the report</param>
            <param name="publishId">The publish identity of the report</param>
            <param name="name">The name of the report</param>
        </member>
        <member name="P:Cenium.Framework.Reports.Report.Id">
            <summary>
            Gets the unique identifier for the report
            </summary>
        </member>
        <member name="P:Cenium.Framework.Reports.Report.PublishId">
            <summary>
            Gets the publish identifier for the report.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Reports.Report.Description">
            <summary>
            Gets or sets a description for the report.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Reports.Report.References">
            <summary>
            Gets key references for the report.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Reports.Report.AddReference(Cenium.Framework.Data.EntityKeyReference)">
            <summary>
            Adds a reference to an entity.
            </summary>
            <param name="reference">The entity key reference.</param>
        </member>
        <member name="M:Cenium.Framework.Reports.Report.CreateSection(System.String)">
            <summary>
            Adds a new section to the report; if the section already exists, the existing section is returned
            </summary>
            <param name="name">The name of the section</param>
            <returns>A ReportItem instance</returns>
        </member>
        <member name="M:Cenium.Framework.Reports.Report.GetContentAsXml">
            <summary>
            Transforms the report into a valid XML
            </summary>
            <returns>A valid XML document</returns>
        </member>
        <member name="M:Cenium.Framework.Reports.Report.GetNotes(Cenium.Framework.Data.EntityKeyReference,System.Boolean)">
            <summary>
            Gets the notes associated with the specified key reference that should be included with this report
            </summary>
            <param name="keyRef">The key reference to the entity associated with the note</param>
            <param name="includeInherited">Specifies if inherited notes should be included in the result.</param>
            <returns>A read-only collection of notes associated with the specified entity.</returns>
        </member>
        <member name="M:Cenium.Framework.Reports.Report.Serialize(System.Xml.XmlWriter)">
            <summary>
            Serializes the report to XML
            </summary>
            <param name="writer">The XML writer to use</param>
        </member>
        <member name="T:Cenium.Framework.Reports.ReportBase">
            <summary>
            Base class for all report content classes
            </summary>
        </member>
        <member name="M:Cenium.Framework.Reports.ReportBase.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ReportBase class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Reports.ReportBase.Name">
            <summary>
            Gets the name of the report item
            </summary>
        </member>
        <member name="M:Cenium.Framework.Reports.ReportBase.Serialize(System.Xml.XmlWriter)">
            <summary>
            Serializes the report item to XML
            </summary>
            <param name="writer">The XML writer to use</param>
        </member>
        <member name="M:Cenium.Framework.Reports.ReportBase.SerializeContent(System.Xml.XmlWriter)">
            <summary>
            Serializes the content of the item to XML
            </summary>
            <param name="writer">The XML writer to use</param>
        </member>
        <member name="T:Cenium.Framework.Reports.ReportChildCollection">
            <summary>
            Represents a collection of ReportItems
            </summary>
        </member>
        <member name="M:Cenium.Framework.Reports.ReportChildCollection.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ReportChildCollection class
            </summary>
            <param name="name">The name of the collection</param>
        </member>
        <member name="M:Cenium.Framework.Reports.ReportChildCollection.AddItem(System.String)">
            <summary>
            Adds a new item to the child collection
            </summary>
            <param name="name">The name of the item to add</param>
            <returns>A new ReportItem instance</returns>
        </member>
        <member name="M:Cenium.Framework.Reports.ReportChildCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Cenium.Framework.Reports.ReportChildCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Cenium.Framework.Reports.ReportChildCollection.SerializeContent(System.Xml.XmlWriter)">
            <summary>
            Serializes the content of the item to XML
            </summary>
            <param name="writer">The XML writer to use</param>
        </member>
        <member name="T:Cenium.Framework.Reports.ReportItem">
            <summary>
            Represents an item in a report structure. An item can have both fields and child collections
            </summary>
        </member>
        <member name="M:Cenium.Framework.Reports.ReportItem.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ReportItem class
            </summary>
            <param name="name">The name of the item</param>
        </member>
        <member name="M:Cenium.Framework.Reports.ReportItem.Add(System.String,System.Object)">
            <summary>
            Adds a new field to to the report item
            </summary>
            <param name="name">The name of the field</param>
            <param name="value">The value associated with the field</param>
        </member>
        <member name="M:Cenium.Framework.Reports.ReportItem.AddChildCollection(System.String)">
            <summary>
            Adds a new child collection to the report item
            </summary>
            <param name="name">The name of the collection</param>
            <returns>A <c>ReportChildCollection</c> instance</returns>
        </member>
        <member name="M:Cenium.Framework.Reports.ReportItem.SerializeContent(System.Xml.XmlWriter)">
            <summary>
            Serializes the content of the item to XML
            </summary>
            <param name="writer">The XML writer to use</param>
        </member>
        <member name="T:Cenium.Framework.Reports.ReportManager">
            <summary>
            Contains static methods to create and render reports
            </summary>
        </member>
        <member name="F:Cenium.Framework.Reports.ReportManager.ReportStatusCompleted">
            <summary>
            Report status Completed
            </summary>
        </member>
        <member name="F:Cenium.Framework.Reports.ReportManager.ReportStatusError">
            <summary>
            Report status Error
            </summary>
        </member>
        <member name="F:Cenium.Framework.Reports.ReportManager.PrintStatusWaiting">
            <summary>
            Print queue status Waiting
            </summary>
        </member>
        <member name="F:Cenium.Framework.Reports.ReportManager.PrintStatusError">
            <summary>
            Print queue status Error
            </summary>
        </member>
        <member name="F:Cenium.Framework.Reports.ReportManager.PrintStatusPrinted">
            <summary>
            Print queue status Printed
            </summary>
        </member>
        <member name="T:Cenium.Framework.Reports.ReportManager.ReportMethodDelegate">
            <summary>
            Defines the signature of a report method
            </summary>
            <param name="parameters">The parameter values needed to create the report</param>
            <returns>A new Report instance, complete with report data</returns>
        </member>
        <member name="T:Cenium.Framework.Reports.ReportManager.ReportSchemaDelegate">
            <summary>
            Defines the signature of a schema method
            </summary>
            <param name="schema">A <c>ReportSchema</c> instance</param>
        </member>
        <member name="M:Cenium.Framework.Reports.ReportManager.Register(Cenium.Framework.Reports.ReportManager.ReportMethodDelegate,System.String,System.String,System.String)">
            <summary>
            Registers a report method and associates the method with report metadata
            </summary>
            <param name="method">The report method</param>
            <param name="name">The name of the method. This must be a unique name</param>
            <param name="displayName">The display name of the report</param>
            <param name="description">The long description associated with the report</param>
        </member>
        <member name="M:Cenium.Framework.Reports.ReportManager.Register(Cenium.Framework.Reports.ReportManager.ReportMethodDelegate,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Registers a report method and associates the method with report metadata
            </summary>
            <param name="method">The report method</param>
            <param name="name">The name of the method. This must be a unique name</param>
            <param name="displayName">The display name of the report</param>
            <param name="description">The long description associated with the report</param>
            <param name="isNotesSupported">Whether this report supports notes."</param>
        </member>
        <member name="M:Cenium.Framework.Reports.ReportManager.RegisterReportSchema(Cenium.Framework.Reports.ReportManager.ReportSchemaDelegate,System.String)">
            <summary>
            Registers a report schema method and associates the method with a report
            </summary>
            <param name="schemaMethod">The schema method.</param>
            <param name="reportName">The name of the report</param>
        </member>
        <member name="M:Cenium.Framework.Reports.ReportManager.RegisterLayoutRenderer(Cenium.Framework.Reports.IReportLayoutRenderer)">
            <summary>
            Registers a report layout renderer
            </summary>
            <param name="renderer">The renderer to register</param>
        </member>
        <member name="M:Cenium.Framework.Reports.ReportManager.RegisterPropertyContextHandler(Cenium.Framework.Reports.IReportPropertyContextHandler)">
            <summary>
            Registers a property context handler. This is an infrastructure method and should only be used by the component owning the property context data.
            </summary>
            <remarks>
            The property context handler is responsible for adding property context data and schema definitions to a report when the report is being executed.
            </remarks>
            <param name="handler">The property context handler to register.</param>
        </member>
        <member name="M:Cenium.Framework.Reports.ReportManager.CreateRenderer">
            <summary>
            Creates a <c>ReportRenderer</c> for rendering a report instance
            </summary>
            <returns>A new <c>ReportRenderer</c> instance.</returns>
        </member>
        <member name="M:Cenium.Framework.Reports.ReportManager.GetReportInfo(System.String)">
            <summary>
            Gets information about a report
            </summary>
            <param name="name">The name of the report</param>
            <returns>A <c>ReportInfo</c> instance if the report exists; otherwise null</returns>
        </member>
        <member name="M:Cenium.Framework.Reports.ReportManager.GetReportLayouts(System.String)">
            <summary>
            Gets an IEnumerable of IReportLayout instances for a specified report type
            </summary>
            <param name="name">The name of the report type</param>
            <returns>an IEnumerable of IReportLayout instances</returns>
        </member>
        <member name="M:Cenium.Framework.Reports.ReportManager.GetDefaultLayout(System.String)">
            <summary>
            Gets the default layout for a specified report
            </summary>
            <param name="name">The report type identity</param>
            <returns>An <c>IReportLayout</c> instance that is the default layout</returns>
        </member>
        <member name="M:Cenium.Framework.Reports.ReportManager.GetLayoutByIdentity(System.Int64)">
            <summary>
            Gets the layout by based on its identity
            </summary>
            <param name="layoutId">The layout identifier.</param>
            <returns>An <c>IReportLayout</c> instance, or null if the layout does not exist</returns>
        </member>
        <member name="M:Cenium.Framework.Reports.ReportManager.GetLayoutTemplate(System.Int64)">
            <summary>
            Gets a report layout template for a specified identifier
            </summary>
            <param name="reportTemplateId">The identifier for the template to get</param>
            <returns>An IReportLayoutTemplate instance</returns>
        </member>
        <member name="M:Cenium.Framework.Reports.ReportManager.GetReports">
            <summary>
            Gets information about all registered report types
            </summary>
            <returns>An <c>IEnumerable</c> of <c>IReportInfo</c> instances</returns>
        </member>
        <member name="M:Cenium.Framework.Reports.ReportManager.GetRenderer(System.String)">
            <summary>
            Gets a renderer associated with the specified name
            </summary>
            <param name="name">The name of the renderer to get</param>
            <returns>An <c>IReportLayoutRenderer</c> instance, or null if the renderer does not exist</returns>
        </member>
        <member name="M:Cenium.Framework.Reports.ReportManager.GetRenderers">
            <summary>
            Enumerates available renderers
            </summary>
            <returns>An <c>IEnumerable</c> of <c>IReportLayoutRenderer</c> instances</returns>
        </member>
        <member name="M:Cenium.Framework.Reports.ReportManager.CreateReport(Cenium.Framework.Reports.ReportParameters)">
            <summary>
            Creates a new report instance
            </summary>
            <param name="parameters">The parameters needed to create the report</param>
            <returns>A new, empty Report instance</returns>
        </member>
        <member name="M:Cenium.Framework.Reports.ReportManager.CreateParameters(System.String)">
            <summary>
            Creates a <c>ReportParameters</c> instance for a specific report type
            </summary>
            <param name="name">The name of the report type</param>
            <returns>A <c>ReportParameters</c> instance</returns>
        </member>
        <member name="M:Cenium.Framework.Reports.ReportManager.CreateParameters(System.String,System.String)">
            <summary>
            Creates a <c>ReportParameters</c> instance for a specific report type
            </summary>
            <param name="name">The name of the report type</param>
            <param name="userId">The user identity of the owner of the report</param>
            <returns>A <c>ReportParameters</c> instance</returns>
        </member>
        <member name="M:Cenium.Framework.Reports.ReportManager.GetParametersForReport(System.String)">
            <summary>
            Gets the parameters associated with a report type
            </summary>
            <param name="name">The name of the report type</param>
            <returns>An IEnumerable of IReportParameter instances</returns>
        </member>
        <member name="M:Cenium.Framework.Reports.ReportManager.Execute(Cenium.Framework.Reports.ReportParameters)">
            <summary>
            Executes a report with the given parameters
            </summary>
            <param name="parameters">The parameters for the report to execute</param>
        </member>
        <member name="M:Cenium.Framework.Reports.ReportManager.GetReportContent(System.Int64)">
            <summary>
            Gets the stored report content based on an identifier
            </summary>
            <param name="id">The identity of the report storage</param>
            <returns>An <c>IReportContent</c> instance</returns>
        </member>
        <member name="P:Cenium.Framework.Reports.ReportManager.StorageProvider">
            <summary>
            Gets or sets the report storage provider; this is an infrastructure method and should only be set by the core framework
            </summary>
        </member>
        <member name="M:Cenium.Framework.Reports.ReportManager.Render(System.Int64,System.Int64)">
            <summary>
            Renders a report with the given layout identifier
            </summary>
            <param name="id">The report identifier</param>
            <param name="layoutTemplateId">The layout to apply to the report</param>
            <returns>A rendered report as binary data</returns>
        </member>
        <member name="M:Cenium.Framework.Reports.ReportManager.AddTask(Cenium.Framework.Reports.ReportTask)">
            <summary>
            Adds a report task to the report task queue
            </summary>
            <param name="task">The task to add</param>
        </member>
        <member name="M:Cenium.Framework.Reports.ReportManager.AddTasks(System.Collections.Generic.IEnumerable{Cenium.Framework.Reports.ReportTask})">
            <summary>
            Adds a range of report tasks to the report task queue
            </summary>
            <param name="tasks">The tasks to add</param>
        </member>
        <member name="M:Cenium.Framework.Reports.ReportManager.ExecuteTask(Cenium.Framework.Reports.ReportTask)">
            <summary>
            Executes a report task without adding it to the task queue
            </summary>
            <param name="task">The task to execute</param>
        </member>
        <member name="M:Cenium.Framework.Reports.ReportManager.GetDefaultPrinterForReportType(System.String)">
            <summary>
            Gets the default report printer for a specified report.
            </summary>
            <param name="name">The report type name</param>
            <returns>An <c>IReportPrinter</c> instance representing the default layout, or null if no default exists.</returns>
        </member>
        <member name="T:Cenium.Framework.Reports.ReportParameterAttribute">
            <summary>
            Instructs the framework about what report parameters a report method supports
            </summary>
        </member>
        <member name="M:Cenium.Framework.Reports.ReportParameterAttribute.#ctor(System.String,System.String,Cenium.Framework.Reports.ReportParameterType)">
            <summary>
            Initializes a new instance of the ReportParameter class
            </summary>
            <param name="displayName">The display name for the parameter</param>
            <param name="name">The name of the parameter</param>
            <param name="type">The parameter type</param>
        </member>
        <member name="P:Cenium.Framework.Reports.ReportParameterAttribute.Name">
            <summary>
            Gets the name of the parameter
            </summary>
        </member>
        <member name="P:Cenium.Framework.Reports.ReportParameterAttribute.DisplayName">
            <summary>
            Gets the display name of the parameter
            </summary>
        </member>
        <member name="P:Cenium.Framework.Reports.ReportParameterAttribute.ParameterType">
            <summary>
            Gets or sets the data type of the parameter value
            </summary>
        </member>
        <member name="P:Cenium.Framework.Reports.ReportParameterAttribute.DefaultValue">
            <summary>
            Gets or sets the default value for the parameter. This must be a valid string representation according to the parameter type.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Reports.ReportParameterAttribute.IsRequired">
            <summary>
            Gets or sets if the parameter is required
            </summary>
        </member>
        <member name="P:Cenium.Framework.Reports.ReportParameterAttribute.ParameterClrType">
            <summary>
            Gets the .NET type of the parameter
            </summary>
        </member>
        <member name="P:Cenium.Framework.Reports.ReportParameterAttribute.ValueList">
            <summary>
            Gets the lookup identity for the value list
            </summary>
        </member>
        <member name="P:Cenium.Framework.Reports.ReportParameterAttribute.Options">
            <summary>
            Gets the options for the value list
            </summary>
        </member>
        <member name="P:Cenium.Framework.Reports.ReportParameterAttribute.SortOrder">
            <summary>
            Gets the sort order.
            </summary>
        </member>
        <member name="T:Cenium.Framework.Reports.ReportParameters">
            <summary>
            Contains parameters for a report method
            </summary>
        </member>
        <member name="M:Cenium.Framework.Reports.ReportParameters.#ctor(System.Collections.Generic.IEnumerable{Cenium.Framework.Reports.ReportParameterAttribute})">
            <summary>
            Initializes a new instance of the ReportParameters class
            </summary>
            <param name="parameters">The parameters to initialize the structure with</param>
        </member>
        <member name="P:Cenium.Framework.Reports.ReportParameters.Name">
            <summary>
            Gets the name of the report
            </summary>
        </member>
        <member name="P:Cenium.Framework.Reports.ReportParameters.DisplayName">
            <summary>
            Gets the display name of the report
            </summary>
        </member>
        <member name="P:Cenium.Framework.Reports.ReportParameters.Id">
            <summary>
            Gets the unique identity of the report
            </summary>
        </member>
        <member name="P:Cenium.Framework.Reports.ReportParameters.PublishId">
            <summary>
            Gets the publish identifier for the report.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Reports.ReportParameters.UserAccess">
            <summary>
            Gets a collection of user identities with access to the report
            </summary>
        </member>
        <member name="P:Cenium.Framework.Reports.ReportParameters.Owner">
            <summary>
            Gets the user identity of the owner of the report.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Reports.ReportParameters.GetParameterValue``1(System.String)">
            <summary>
            Gets a named parameter value
            </summary>
            <typeparam name="T">The type of the parameter value</typeparam>
            <param name="name">The name of the parameter</param>
            <returns>a parameter value, or default(T) if the value does not exist.</returns>
        </member>
        <member name="M:Cenium.Framework.Reports.ReportParameters.SetParameterValue(System.String,System.String)">
            <summary>
            Sets a value for a specified parameter. The value will be converted to the correct type based on parameter definitions
            </summary>
            <param name="name">The name of the value</param>
            <param name="value">The value represented as a string</param>
        </member>
        <member name="M:Cenium.Framework.Reports.ReportParameters.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Cenium.Framework.Reports.ReportParameters.Count">
            <summary>
            Gets the number of parameters in the ReportParameters collection
            </summary>
        </member>
        <member name="M:Cenium.Framework.Reports.ReportParameters.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Cenium.Framework.Reports.ReportParameters.Validate">
            <summary>
            Validates the report parameters based on the defined report parameters
            </summary>
        </member>
        <member name="T:Cenium.Framework.Reports.ReportParameterType">
            <summary>
            Defines valid parameter types for a report
            </summary>
        </member>
        <member name="F:Cenium.Framework.Reports.ReportParameterType.String">
            <summary>
            Parameter is a string value
            </summary>
        </member>
        <member name="F:Cenium.Framework.Reports.ReportParameterType.Int">
            <summary>
            Parameter is an int value
            </summary>
        </member>
        <member name="F:Cenium.Framework.Reports.ReportParameterType.Long">
            <summary>
            Parameter is a long value
            </summary>
        </member>
        <member name="F:Cenium.Framework.Reports.ReportParameterType.Float">
            <summary>
            Parameter is a float value
            </summary>
        </member>
        <member name="F:Cenium.Framework.Reports.ReportParameterType.Double">
            <summary>
            Parameter is a double value
            </summary>
        </member>
        <member name="F:Cenium.Framework.Reports.ReportParameterType.Decimal">
            <summary>
            Parameter is a decimal value
            </summary>
        </member>
        <member name="F:Cenium.Framework.Reports.ReportParameterType.Boolean">
            <summary>
            Parameter is a boolean value
            </summary>
        </member>
        <member name="F:Cenium.Framework.Reports.ReportParameterType.Date">
            <summary>
            Parameter is a date value
            </summary>
        </member>
        <member name="F:Cenium.Framework.Reports.ReportParameterType.Property">
            <summary>
            Parameter is a property context value
            </summary>
        </member>
        <member name="F:Cenium.Framework.Reports.ReportParameterType.Enumeration">
            <summary>
            Parameter is an enumeration
            </summary>
        </member>
        <member name="F:Cenium.Framework.Reports.ReportParameterType.Time">
            <summary>
            Parameter is a time value
            </summary>
        </member>
        <member name="T:Cenium.Framework.Reports.ReportSchema">
            <summary>
            Defines a schema for a report
            </summary>
        </member>
        <member name="M:Cenium.Framework.Reports.ReportSchema.#ctor(System.Collections.Generic.IEnumerable{Cenium.Framework.Reports.IReportParameter})">
            <summary>
            Initializes a new instance of the ReportSchema class
            </summary>
        </member>
        <member name="T:Cenium.Framework.Reports.ReportSchemaElement">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="M:Cenium.Framework.Reports.ReportSchemaElement.#ctor(Cenium.Framework.Reports.ReportSchemaElementType,System.String,System.Type)">
            <summary>
            Initializes a new instance of the ReportSchemaElement class
            </summary>
        </member>
        <member name="T:Cenium.Framework.Reports.ReportSchemaElementType">
            <summary>
            Defines the schema element type in a report schema
            </summary>
        </member>
        <member name="F:Cenium.Framework.Reports.ReportSchemaElementType.Section">
            <summary>
            The element is a top-level section element
            </summary>
        </member>
        <member name="F:Cenium.Framework.Reports.ReportSchemaElementType.Scalar">
            <summary>
            The element represents a scalar type definition
            </summary>
        </member>
        <member name="F:Cenium.Framework.Reports.ReportSchemaElementType.Collection">
            <summary>
            The element represents a child collection definition
            </summary>
        </member>
        <member name="F:Cenium.Framework.Reports.ReportSchemaElementType.Complex">
            <summary>
            The element represents a complex type definition
            </summary>
        </member>
        <member name="T:Cenium.Framework.Reports.ReportUtility">
            <summary>
            Contains helper methods for creating reports and report schemas
            </summary>
        </member>
        <member name="T:Cenium.Framework.Reports.XmlReportLayoutRenderer">
            <summary>
            XML layout renderer for reports
            </summary>
        </member>
        <member name="M:Cenium.Framework.Reports.XmlReportLayoutRenderer.#ctor">
            <summary>
            Initializes a new instance of the XmlReportLayoutRenderer class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Reports.XmlReportLayoutRenderer.Name">
            <summary>
            Gets the registration name of the layout renderer
            </summary>
        </member>
        <member name="P:Cenium.Framework.Reports.XmlReportLayoutRenderer.DisplayName">
            <summary>
            Gets the display name of the layout renderer
            </summary>
        </member>
        <member name="P:Cenium.Framework.Reports.XmlReportLayoutRenderer.RequiresTemplate">
            <summary>
            Gets if the renderer must have a template. This method returns false
            </summary>
        </member>
        <member name="P:Cenium.Framework.Reports.XmlReportLayoutRenderer.SupportsTemplate">
            <summary>
            Gets if the renderer supports templates. This method returns false
            </summary>
        </member>
        <member name="P:Cenium.Framework.Reports.XmlReportLayoutRenderer.MimeType">
            <summary>
            Gets the mime type for the output stream
            </summary>
        </member>
        <member name="P:Cenium.Framework.Reports.XmlReportLayoutRenderer.FileNameExtension">
            <summary>
            Gets the file name extension for the output stream
            </summary>
        </member>
        <member name="M:Cenium.Framework.Reports.XmlReportLayoutRenderer.Render(Cenium.Framework.Reports.IReportContent,Cenium.Framework.Reports.IReportLayoutTemplate,System.IO.Stream)">
            <summary>
            Renders the specified content to XML.
            </summary>
            <remarks>Since the content is already an XML document, this method just writes the content to the stream.</remarks>
            <param name="content">The content.</param>
            <param name="outputStream">The output stream.</param>
        </member>
        <member name="P:Cenium.Framework.Reports.XmlReportLayoutRenderer.SupportsTemplateGeneration">
            <summary>
            Gets if the renderer supports creating templates
            </summary>
            <value>
            <c>true</c> if the renderer supports creating templates; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Cenium.Framework.Reports.XmlReportLayoutRenderer.CreateTemplate(Cenium.Framework.Reports.IReportInfo)">
            <summary>
            Creates a template for a specific report type
            </summary>
            <param name="report">The report to create a template for.</param>
            <returns></returns>
        </member>
        <member name="T:Cenium.Framework.Runtime.Configuration.ConfigurationNames">
            <summary>
            Contains element names for configuration classes
            </summary>
        </member>
        <member name="T:Cenium.Framework.Runtime.Configuration.FeatureElement">
            <summary>
            Configuration element for features
            </summary>
        </member>
        <member name="M:Cenium.Framework.Runtime.Configuration.FeatureElement.#ctor">
            <summary>
            Initializes a new instance of the FeatureElement class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Runtime.Configuration.FeatureElement.Feature">
            <summary>
            Gets or sets the feature identity
            </summary>
        </member>
        <member name="P:Cenium.Framework.Runtime.Configuration.FeatureElement.State">
            <summary>
            Gets or sets the toggle state for the feature
            </summary>
        </member>
        <member name="T:Cenium.Framework.Runtime.Configuration.FeatureElementCollection">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="M:Cenium.Framework.Runtime.Configuration.FeatureElementCollection.#ctor">
            <summary>
            Initializes a new instance of the FeatureElementCollection class
            </summary>
        </member>
        <member name="M:Cenium.Framework.Runtime.Configuration.FeatureElementCollection.CreateNewElement">
            <summary>
            Creates a new ConfigurationElement of type DataComponentSetting
            </summary>
            <returns>A new ServiceSettingIncludeElement instance</returns>
        </member>
        <member name="M:Cenium.Framework.Runtime.Configuration.FeatureElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Returns a key for a DataComponentSetting instance.
            </summary>
            <param name="element">The element to get the key for</param>
            <returns>The key for the element</returns>
        </member>
        <member name="M:Cenium.Framework.Runtime.Configuration.FeatureElementCollection.ToList">
            <summary>
            Returns the collection as a list of <c>FeatureElement</c> instances.
            </summary>
            <returns>The collection as a list of <c>FeatureElement</c> instances.</returns>
        </member>
        <member name="T:Cenium.Framework.Runtime.Configuration.RuntimeConfigurationSection">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="M:Cenium.Framework.Runtime.Configuration.RuntimeConfigurationSection.#ctor">
            <summary>
            Initializes a new instance of the RuntimeConfigurationSection class
            </summary>
        </member>
        <member name="T:Cenium.Framework.Runtime.Remote.RemoteConnection">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="M:Cenium.Framework.Runtime.Remote.RemoteConnection.#ctor">
            <summary>
            Initializes a new instance of the RemoteConnection class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Runtime.Remote.RemoteConnection.Url">
            <summary>
            Get or sets the URL to the EF server
            </summary>
        </member>
        <member name="P:Cenium.Framework.Runtime.Remote.RemoteConnection.Credential">
            <summary>
            Gets or sets the credential for the connection to the EF server
            </summary>
        </member>
        <member name="T:Cenium.Framework.Runtime.Remote.RemoteServerBase">
            <summary>
            Represents a remote server
            </summary>
        </member>
        <member name="M:Cenium.Framework.Runtime.Remote.RemoteServerBase.#ctor(System.String,System.String,Cenium.Framework.Runtime.ServerContainerType,Cenium.Framework.Runtime.Remote.RemoteConnection)">
            <summary>
            Initializes a new instance of the RemoteServerBase class
            </summary>
            <param name="applicationName">The instance name of the application</param>
            <param name="serverType">The type of remote server</param>
            <param name="containerType">The type of container running the server</param>
            <param name="connection">The connection to the EF server.</param>
        </member>
        <member name="P:Cenium.Framework.Runtime.Remote.RemoteServerBase.Connection">
            <summary>
            Gets the connection to the EF server
            </summary>
        </member>
        <member name="P:Cenium.Framework.Runtime.Remote.RemoteServerBase.Host">
            <summary>
            Gets the name of the host the remote server is running on
            </summary>
        </member>
        <member name="P:Cenium.Framework.Runtime.Remote.RemoteServerBase.ApplicationName">
            <summary>
            Gets the name of the application (unique per remote server)
            </summary>
        </member>
        <member name="P:Cenium.Framework.Runtime.Remote.RemoteServerBase.ServerType">
            <summary>
            Gets the server type
            </summary>
        </member>
        <member name="P:Cenium.Framework.Runtime.Remote.RemoteServerBase.ContainerType">
            <summary>
            Gets the container the server is running within
            </summary>
        </member>
        <member name="P:Cenium.Framework.Runtime.Remote.RemoteServerBase.Status">
            <summary>
            Gets the running status of the server
            </summary>
        </member>
        <member name="M:Cenium.Framework.Runtime.Remote.RemoteServerBase.Start">
             <summary>
            
             </summary>
        </member>
        <member name="T:Cenium.Framework.Runtime.Remote.RemoteServerResponse`1">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="M:Cenium.Framework.Runtime.Remote.RemoteServerResponse`1.#ctor(Cenium.Framework.Json.JsonObject)">
            <summary>
            Initializes a new instance of the RemoteServerResponse class
            </summary>
        </member>
        <member name="T:Cenium.Framework.Runtime.Remote.VoidClass">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="M:Cenium.Framework.Runtime.Remote.VoidClass.#ctor">
            <summary>
            Initializes a new instance of the VoidClass class
            </summary>
        </member>
        <member name="T:Cenium.Framework.Runtime.Server">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="M:Cenium.Framework.Runtime.Server.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ServerInitializer class
            </summary>
        </member>
        <member name="T:Cenium.Framework.Runtime.IServerInfo">
            <summary>
            Defines a common set of properties to provide runtime information about a server instance
            </summary>
        </member>
        <member name="P:Cenium.Framework.Runtime.IServerInfo.ServerName">
            <summary>
            Gets the name of the host the server is running on
            </summary>
        </member>
        <member name="P:Cenium.Framework.Runtime.IServerInfo.InstanceName">
            <summary>
            Gets the name of the server instance
            </summary>
        </member>
        <member name="P:Cenium.Framework.Runtime.IServerInfo.ServerType">
            <summary>
            Gets the type of server
            </summary>
        </member>
        <member name="P:Cenium.Framework.Runtime.IServerInfo.ContainerType">
            <summary>
            Gets the server container type
            </summary>
        </member>
        <member name="P:Cenium.Framework.Runtime.IServerInfo.Description">
            <summary>
            Gets a description of the server
            </summary>
        </member>
        <member name="P:Cenium.Framework.Runtime.IServerInfo.Status">
            <summary>
            Gets the current status of the server
            </summary>
        </member>
        <member name="T:Cenium.Framework.Runtime.IServerInfoProvider">
            <summary>
            Defines a provider that provides runtime information about a set of servers
            </summary>
        </member>
        <member name="P:Cenium.Framework.Runtime.IServerInfoProvider.ServerTypes">
            <summary>
            Gets the server-types the provider supports
            </summary>
        </member>
        <member name="P:Cenium.Framework.Runtime.IServerInfoProvider.Servers">
            <summary>
            Gets runtime information about all registered servers
            </summary>
        </member>
        <member name="M:Cenium.Framework.Runtime.IServerInfoProvider.UpdateStatus(Cenium.Framework.Runtime.IServerInfo)">
            <summary>
            Updates the runtime status of a server
            </summary>
            <param name="info">The server to update</param>
        </member>
        <member name="T:Cenium.Framework.Runtime.RuntimeEnvironmentInfo">
            <summary>
            The <c>RuntimeEnvironmentInfo</c> class contains methods and properties for accessing runtime information about the current environment
            </summary>
        </member>
        <member name="P:Cenium.Framework.Runtime.RuntimeEnvironmentInfo.ApplicationBasePath">
            <summary>
            Gets the applications base path
            </summary>
        </member>
        <member name="P:Cenium.Framework.Runtime.RuntimeEnvironmentInfo.ApplicationBinPath">
            <summary>
            Gets an applications binary path
            </summary>
        </member>
        <member name="P:Cenium.Framework.Runtime.RuntimeEnvironmentInfo.ServerName">
            <summary>
            Gets the name of the server the application is running on
            </summary>
        </member>
        <member name="P:Cenium.Framework.Runtime.RuntimeEnvironmentInfo.ApplicationInstance">
            <summary>
            Gets the application instance name
            </summary>
        </member>
        <member name="T:Cenium.Framework.Runtime.ServerContainerType">
            <summary>
            Defines valid server container types
            </summary>
        </member>
        <member name="F:Cenium.Framework.Runtime.ServerContainerType.WebServer">
            <summary>
            Server container is a web server
            </summary>
        </member>
        <member name="F:Cenium.Framework.Runtime.ServerContainerType.WinService">
            <summary>
            Server container is a Windows service
            </summary>
        </member>
        <member name="F:Cenium.Framework.Runtime.ServerContainerType.Custom">
            <summary>
            Server container is a custom container
            </summary>
        </member>
        <member name="F:Cenium.Framework.Runtime.ServerContainerType.Unknown">
            <summary>
            Server container is of an unknown type
            </summary>
        </member>
        <member name="T:Cenium.Framework.Runtime.ServerLifecycleManager">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="T:Cenium.Framework.Runtime.ServerManager">
            <summary>
            Class for maintaining server runtime information about various servers
            </summary>
        </member>
        <member name="M:Cenium.Framework.Runtime.ServerManager.AddProvider(Cenium.Framework.Runtime.IServerInfoProvider)">
            <summary>
            Registers a server information provider
            </summary>
            <param name="provider">The provider to register</param>
        </member>
        <member name="M:Cenium.Framework.Runtime.ServerManager.UpdateServerStatus(Cenium.Framework.Runtime.IServerInfo)">
            <summary>
            Registers a server
            </summary>
            <param name="serverInfo">The server to update</param>
        </member>
        <member name="T:Cenium.Framework.Runtime.ServerStatus">
            <summary>
            Defines the status of a server
            </summary>
        </member>
        <member name="F:Cenium.Framework.Runtime.ServerStatus.Stopped">
            <summary>
            Server is stopped
            </summary>
        </member>
        <member name="F:Cenium.Framework.Runtime.ServerStatus.Running">
            <summary>
            Server is active and running
            </summary>
        </member>
        <member name="T:Cenium.Framework.Runtime.SessionContext">
            <summary>
            Contains information about a specific session
            </summary>
        </member>
        <member name="M:Cenium.Framework.Runtime.SessionContext.#ctor">
            <summary>
            Initializes a new instance of the UserContext class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Runtime.SessionContext.TimeZone">
            <summary>
            Gets the timezone for a session
            </summary>
        </member>
        <member name="M:Cenium.Framework.Runtime.SessionContext.AddDisposable(System.IDisposable)">
            <summary>
            Adds a disposable object for tracking by the session. These objects are disposed at the end of the session
            </summary>
            <param name="disposable">The disposable to track</param>
        </member>
        <member name="M:Cenium.Framework.Runtime.SessionContext.Release">
            <summary>
            Releases the disposable objects tracked by the session
            </summary>
            <remarks>
            This is an infrastructure method and should not be called outside the framework.
            </remarks>
        </member>
        <member name="P:Cenium.Framework.Runtime.SessionContext.Current">
            <summary>
            Returns the current session context for the running thread
            </summary>
        </member>
        <member name="T:Cenium.Framework.Security.AuthorizationRequest">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="M:Cenium.Framework.Security.AuthorizationRequest.#ctor(System.String,System.Nullable{System.Int64},System.String)">
            <summary>
            Initializes a new instance of the AuthorizationRequest class
            </summary>
        </member>
        <member name="T:Cenium.Framework.Security.DataRestrictionOptions">
            <summary>
            Defines options for a data restriction type
            </summary>
            <seealso cref="T:Cenium.Framework.Security.DataRestrictionType"/>
        </member>
        <member name="F:Cenium.Framework.Security.DataRestrictionOptions.None">
            <summary>
            The data restriction type has no options set
            </summary>
        </member>
        <member name="F:Cenium.Framework.Security.DataRestrictionOptions.CanCreateDirect">
            <summary>
            The data restriction type can be created by a user
            </summary>
        </member>
        <member name="T:Cenium.Framework.Security.DataRestriction">
            <summary>
            Represents a data restriction group
            </summary>
        </member>
        <member name="M:Cenium.Framework.Security.DataRestriction.#ctor(System.Int64,System.String)">
            <summary>
            Initializes a new instance of the DataRestriction class
            </summary>
        </member>
        <member name="T:Cenium.Framework.Security.DataRestrictionType">
            <summary>
            Represents a data restriction type
            </summary>
        </member>
        <member name="M:Cenium.Framework.Security.DataRestrictionType.#ctor(System.String,Cenium.Framework.Language.LanguageConstant,Cenium.Framework.Security.DataRestrictionOptions)">
            <summary>
            Initializes a new instance of the DataRestrictionType class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Security.DataRestrictionType.Identity">
            <summary>
            Gets the identity for the restriction type
            </summary>
        </member>
        <member name="P:Cenium.Framework.Security.DataRestrictionType.DisplayName">
            <summary>
            Gets the display name for the restriction type
            </summary>
        </member>
        <member name="P:Cenium.Framework.Security.DataRestrictionType.Options">
            <summary>
            Gets the options associated with the DataRestrictionType
            </summary>
        </member>
        <member name="M:Cenium.Framework.Security.DataRestrictionType.GetDisplayNameForCulture(System.Globalization.CultureInfo)">
            <summary>
            Gets the translated display name for the restriction type.
            </summary>
            <param name="culture">The culture specific information. If null, the current UI culture is used/</param>
            <returns>A string containing the translated display name.</returns>
        </member>
        <member name="T:Cenium.Framework.Security.ISecurityStore">
            <summary>
            Defines the methods for the security management API
            </summary>
        </member>
        <member name="P:Cenium.Framework.Security.ISecurityStore.Users">
            <summary>
            Gets all users in the user store
            </summary>
        </member>
        <member name="P:Cenium.Framework.Security.ISecurityStore.Roles">
            <summary>
            Gets all roles in the user store
            </summary>
        </member>
        <member name="M:Cenium.Framework.Security.ISecurityStore.GetUser(System.String)">
            <summary>
            Gets a user from the security store
            </summary>
            <param name="userId">The user identifier</param>
            <returns>A UserInfo instance, or null if the user doesn't exist</returns>
        </member>
        <member name="M:Cenium.Framework.Security.ISecurityStore.GetRole(System.String)">
            <summary>
            Gets a security role from the security store
            </summary>
            <param name="userId">The role identifier</param>
            <returns>A RoleInfo instance, or null if the role doesn't exist</returns>
        </member>
        <member name="M:Cenium.Framework.Security.ISecurityStore.GetRoleMemberOf(System.String)">
            <summary>
            Gets the roles that the specified role is a direct member of
            </summary>
            <param name="roleId">The role identifier.</param>
            <returns>A collection of <c>RoleInfo</c> instances.</returns>
        </member>
        <member name="M:Cenium.Framework.Security.ISecurityStore.GetUserMemberOf(System.String)">
            <summary>
            Gets the roles that the specified user is a direct member of
            </summary>
            <param name="userId">The user identifier.</param>
            <returns>A collection of <c>RoleInfo</c> instances.</returns>
        </member>
        <member name="M:Cenium.Framework.Security.ISecurityStore.GetRolesForResourceGroup(System.String)">
            <summary>
            Gets the roles that have access permissions for a specified resource group
            </summary>
            <param name="groupIdentity">The group identity.</param>
            <returns>A collection of <c>RoleInfo</c> instances.</returns>
        </member>
        <member name="M:Cenium.Framework.Security.ISecurityStore.SetRolesForResourceGroup(System.String,System.String[])">
            <summary>
            Sets the roles that have access permissions for a specified resource group
            </summary>
            <param name="groupIdentity">The identity of the group to associate the roles with.</param>
            <param name="roleIdentities">An array of the identities of the roles to associate with the group.</param>
        </member>
        <member name="M:Cenium.Framework.Security.ISecurityStore.GetAuthorizationUser(System.Guid,System.Boolean)">
            <summary>
            Gets the user that authorized a transaction for another user
            </summary>
            <param name="token">The security token associated with the transaction</param>
            <param name="raiseError">Indicates if the method should raise an error if the token is invalid</param>
            <returns>The authorization user identity associated with the token</returns>
        </member>
        <member name="M:Cenium.Framework.Security.ISecurityStore.NormalizeUserName(System.String)">
            <summary>
            Normalizes the name of the user
            </summary>
            <param name="userid">The user identity to normalize</param>
            <returns>A normalized version of the user name</returns>
        </member>
        <member name="M:Cenium.Framework.Security.ISecurityStore.NormalizeDomainName(System.String)">
            <summary>
            Normalizes the domain name
            </summary>
            <param name="domain">The domain to normalize</param>
            <returns>A normalized version of the domain name</returns>
        </member>
        <member name="T:Cenium.Framework.Security.Provider.SecurityProviderAttribute">
            <summary>
            Identifies a class as a security provider
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="P:Cenium.Framework.Security.Provider.SecurityProviderAttribute.Identity">
            <summary>
            Gets the identity of the security provider class.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Security.Provider.SecurityProviderAttribute.DisplayName">
            <summary>
            Gets the display name for the security provider class.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Security.Provider.SecurityProviderAttribute.Description">
            <summary>
            Gets the description for the security provider class.
            </summary>
        </member>
        <member name="T:Cenium.Framework.Security.Provider.IRole">
            <summary>
            Represents a security role
            </summary>
        </member>
        <member name="P:Cenium.Framework.Security.Provider.IRole.Id">
            <summary>
            Gets the unique identifier for the role
            </summary>
        </member>
        <member name="P:Cenium.Framework.Security.Provider.IRole.Name">
            <summary>
            Gets the name of the role
            </summary>
        </member>
        <member name="P:Cenium.Framework.Security.Provider.IRole.DisplayName">
            <summary>
            Gets the display name for the role
            </summary>
        </member>
        <member name="P:Cenium.Framework.Security.Provider.IRole.Description">
            <summary>
            Gets the description of the role
            </summary>
        </member>
        <member name="T:Cenium.Framework.Security.Provider.ISecurityProvider">
            <summary>
            The ISecurityProvider interface must be implemented by all security providers
            </summary>
        </member>
        <member name="M:Cenium.Framework.Security.Provider.ISecurityProvider.Initialize(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Initializes the security provider with a set of configuration parameters
            </summary>
            <param name="parameters">A Dictionary instance containing parameters</param>
        </member>
        <member name="M:Cenium.Framework.Security.Provider.ISecurityProvider.GetUser(System.String)">
            <summary>
            Returns a user instance for the given user id
            </summary>
            <param name="id">The unique identifier for the user</param>
            <returns>An UserInfo instance, or null if the user doesn't exist</returns>
        </member>
        <member name="M:Cenium.Framework.Security.Provider.ISecurityProvider.GetUsers(System.Boolean,System.Int32)">
            <summary>
            Returns all users
            </summary>
            <param name="activeOnly">Specifies if only active users should be returned</param>
            <param name="maxResults">max results to return. If 0 is specified the max for the underlying provider is used</param>
            <returns>A collection of UserInfo instances</returns>
        </member>
        <member name="M:Cenium.Framework.Security.Provider.ISecurityProvider.GetRole(System.String)">
            <summary>
            Returns a role instance for the given role id
            </summary>
            <param name="id">The unique identifier for the role</param>
            <returns>An RoleInfo instance, or null if the role doesn't exist</returns>
        </member>
        <member name="M:Cenium.Framework.Security.Provider.ISecurityProvider.GetRoles(System.Int32)">
            <summary>
            Returns all roles
            </summary>
            <param name="maxResults">max results to return. If 0 is specified the max for the underlying provider is used</param>
            <returns>A collection of RoleInfo instances</returns>
        </member>
        <member name="M:Cenium.Framework.Security.Provider.ISecurityProvider.GetRoleMemberOf(System.String)">
            <summary>
            Returns all roles a specified role is a member of (direct only).
            </summary>
            <param name="id">The unique identifier for the role</param>
            <returns>A collection of string instances</returns>
        </member>
        <member name="M:Cenium.Framework.Security.Provider.ISecurityProvider.GetRolesForUser(System.String)">
            <summary>
            Returns all roles assigned to a specified user (direct only)
            </summary>
            <param name="user">The user to get roles for</param>
            <returns>A collection of string instances</returns>
        </member>
        <member name="T:Cenium.Framework.Security.Provider.IUser">
            <summary>
            Represents a system user
            </summary>
        </member>
        <member name="P:Cenium.Framework.Security.Provider.IUser.Id">
            <summary>
            Gets the unique identifier for a user
            </summary>
        </member>
        <member name="P:Cenium.Framework.Security.Provider.IUser.Name">
            <summary>
            Gets the name portion of the user
            </summary>
        </member>
        <member name="P:Cenium.Framework.Security.Provider.IUser.Domain">
            <summary>
            Gets the domain portion of the user
            </summary>
        </member>
        <member name="P:Cenium.Framework.Security.Provider.IUser.DisplayName">
            <summary>
            Gets the display name of the user
            </summary>
        </member>
        <member name="P:Cenium.Framework.Security.Provider.IUser.Description">
            <summary>
            Gets the description of the user
            </summary>
        </member>
        <member name="P:Cenium.Framework.Security.Provider.IUser.IsEnabled">
            <summary>
            Gets whether the user is enabled or not
            </summary>
        </member>
        <member name="T:Cenium.Framework.Security.Provider.NamespaceDoc">
            <summary>
            Provides interfaces and classes necessary to create security providers
            </summary>
        </member>
        <member name="T:Cenium.Framework.Security.RoleInfo">
            <summary>
            Represents information about a security role
            </summary>
        </member>
        <member name="P:Cenium.Framework.Security.RoleInfo.Id">
            <summary>
            Gets the unique identifier for the role
            </summary>
        </member>
        <member name="P:Cenium.Framework.Security.RoleInfo.Name">
            <summary>
            Gets the name of the role
            </summary>
        </member>
        <member name="P:Cenium.Framework.Security.RoleInfo.DisplayName">
            <summary>
            Gets the display name for the role
            </summary>
        </member>
        <member name="P:Cenium.Framework.Security.RoleInfo.Description">
            <summary>
            Gets the description of the role
            </summary>
        </member>
        <member name="P:Cenium.Framework.Security.RoleInfo.Terms">
            <summary>
            Gets or sets the searchable terms for the role.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Security.RoleInfo.Copy">
            <summary>
            Creates a new object that is a copy of the current instance
            </summary>
            <returns>A new object that is a copy of this instance</returns>
        </member>
        <member name="M:Cenium.Framework.Security.RoleInfo.UpdateTerms">
            <summary>
            Updates the search terms.
            </summary>
        </member>
        <member name="T:Cenium.Framework.Security.RolePermission">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="M:Cenium.Framework.Security.RolePermission.#ctor">
            <summary>
            Initializes a new instance of the RolePermission class
            </summary>
        </member>
        <member name="T:Cenium.Framework.Security.SecureResourceGroup">
            <summary>
            Represents a pre-defined set of permissions
            </summary>
        </member>
        <member name="M:Cenium.Framework.Security.SecureResourceGroup.#ctor">
            <summary>
            Initializes a new instance of the SecureResourceGroup class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Security.SecureResourceGroup.Identity">
            <summary>
            Gets the identity of the group.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Security.SecureResourceGroup.DisplayName">
            <summary>
            Gets the display name of the group.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Security.SecureResourceGroup.Description">
            <summary>
            Gets the description of the group.
            </summary>
        </member>
        <member name="T:Cenium.Framework.Security.IExtendedUser">
            <summary>
            Defines additional properties on a user
            </summary>
        </member>
        <member name="P:Cenium.Framework.Security.IExtendedUser.ImageRef">
            <summary>
            Gets the image reference for a user
            </summary>
        </member>
        <member name="P:Cenium.Framework.Security.IExtendedUser.MailAddress">
            <summary>
            Gets the email address associated with a user
            </summary>
        </member>
        <member name="P:Cenium.Framework.Security.IExtendedUser.HomePhoneNo">
            <summary>
            Gets the home phone number associated with a user
            </summary>
        </member>
        <member name="P:Cenium.Framework.Security.IExtendedUser.MobilePhoneNo">
            <summary>
            Gets the mobile phone number associated with a user
            </summary>
        </member>
        <member name="P:Cenium.Framework.Security.IExtendedUser.BusinessPhoneNo">
            <summary>
            Gets the business phone number associated with a user
            </summary>
        </member>
        <member name="T:Cenium.Framework.Security.ISecurityContextFactory">
            <summary>
            Defines a mechanism for obtaining the security context for the current thread
            </summary>
        </member>
        <member name="P:Cenium.Framework.Security.ISecurityContextFactory.Current">
            <summary>
            Gets the security context for the current thread
            </summary>
            <remarks>
            This property should get the security context for the current thread. If none exists, one must be created.
            </remarks>
        </member>
        <member name="T:Cenium.Framework.Security.ISecurityContext">
            <summary>
            Provides a mechanism to authorize a user
            </summary>
        </member>
        <member name="M:Cenium.Framework.Security.ISecurityContext.CheckAuthorization(System.String,Cenium.Framework.Security.Permission[])">
            <summary>
            Checks if the current user is authorized to access any of the specified permission objects
            </summary>
            <exception cref="T:Cenium.Framework.Security.SecurityAuthorizationException">When the user has not been granted access to any of the specified permissions</exception>
            <param name="name">The name of the security resource</param>
            <param name="requiredPermission">The permissions required to access the resource</param>
        </member>
        <member name="M:Cenium.Framework.Security.ISecurityContext.IsAuthorized(System.String,Cenium.Framework.Security.Permission[])">
            <summary>
            Checks if the current user is authorized to access any of the specified permission objects
            </summary>
            <exception cref="T:Cenium.Framework.Security.SecurityAuthorizationException">When the user has not been granted access to any of the specified permissions</exception>
            <param name="name">The name of the security resource</param>
            <param name="requiredPermission">The permissions required to access the resource</param>
            <returns><c>true</c> if the user is authorized, otherwise false.</returns>
        </member>
        <member name="M:Cenium.Framework.Security.ISecurityContext.Filter(System.Collections.IEnumerable)">
            <summary>
            Filters an enumerable on either the user property context (if set), or the allowed property contexts
            </summary>
            <param name="query">The enumerable to filter</param>
            <returns>An enumerable filtered on the property context </returns>
        </member>
        <member name="P:Cenium.Framework.Security.ISecurityContext.IsUserPropertyContextSet">
            <summary>
            Gets if the user property context is set or not
            </summary>
        </member>
        <member name="P:Cenium.Framework.Security.ISecurityContext.CurrentUserPropertyContext">
            <summary>
            Gets the current property context for the user.
            </summary>
            <remarks>If the value is 0, the user have not set a property context and will see all property contexts they are allowed to see</remarks>
        </member>
        <member name="M:Cenium.Framework.Security.ISecurityContext.GetUserAllowedPropertyContexts">
            <summary>
            Gets an enumerable of the property contexts the current user is allowed to access
            </summary>
            <returns>an enumerable of the property contexts the current user is allowed to access</returns>
        </member>
        <member name="M:Cenium.Framework.Security.ISecurityContext.IsUserPropertyContextAllowed(System.Int64)">
            <summary>
            Returns true if the current user is allowed to access the property context with the specified identifier; otherwise false
            </summary>
            <param name="propertyContextId">The property context identifier</param>
            <returns>true if the current user is allowed to access the property context with the specified identifier; otherwise false</returns>
        </member>
        <member name="M:Cenium.Framework.Security.ISecurityContext.GetUserGroupsForCurrentUser">
            <summary>
            Gets the groups the current user is a member of
            </summary>
            <returns>An enumerable of UserGroup instances</returns>
        </member>
        <member name="M:Cenium.Framework.Security.ISecurityContext.GetUserGroupsForUser(System.String)">
            <summary>
            Gets the groups the specified user is a member of
            </summary>
            <param name="userId">The user to get the user groups for</param>
            <returns>An enumerable of UserGroup instances</returns>
        </member>
        <member name="M:Cenium.Framework.Security.ISecurityContext.IsCurrentUserMemberOfGroup(System.String)">
            <summary>
            Returns true if the user is member of a specified group, otherwise false
            </summary>
            <param name="groupId">The identifier of the group</param>
            <returns>true if the user is member of a specified group, otherwise false</returns>
        </member>
        <member name="P:Cenium.Framework.Security.ISecurityContext.IsCurrentUserMemberOfTrustedGroup">
            <summary>
            Returns true if the user is member of a trusted user group, otherwise false
            </summary>
        </member>
        <member name="M:Cenium.Framework.Security.ISecurityContext.GetUserGroupMembers(System.String)">
            <summary>
            Returns all the user ids of the members of a specified group
            </summary>
            <param name="groupId">The group to get the members for</param>
            <returns>the user ids of the members of a specified group</returns>
        </member>
        <member name="M:Cenium.Framework.Security.ISecurityContext.AddUserToGroup(System.String,System.String)">
            <summary>
            Adds a user as a member to a group
            </summary>
            <param name="groupId">The group identifier</param>
            <param name="userId">The user to add</param>
        </member>
        <member name="M:Cenium.Framework.Security.ISecurityContext.RemoveUserFromGroup(System.String,System.String)">
            <summary>
            Removes a user from a group
            </summary>
            <param name="groupId">The group identifier</param>
            <param name="userId">The user to remove</param>
        </member>
        <member name="P:Cenium.Framework.Security.ISecurityContext.CurrentUser">
            <summary>
            Gets the current user
            </summary>
        </member>
        <member name="P:Cenium.Framework.Security.ISecurityContext.CurrentUserId">
            <summary>
            Gets the current user id
            </summary>
        </member>
        <member name="P:Cenium.Framework.Security.ISecurityContext.CurrentUserDisplayName">
            <summary>
            Gets the current user display name
            </summary>
        </member>
        <member name="P:Cenium.Framework.Security.ISecurityContext.ExtendedUser">
            <summary>
            Gets the extended information about the current user
            </summary>
        </member>
        <member name="M:Cenium.Framework.Security.ISecurityContext.GetExtendedUser(System.String)">
            <summary>
            Gets the extended information for a specified user id
            </summary>
            <param name="userId">The user id to get the extended info for</param>
            <returns>An <c>IExtendedUser</c> instance</returns>
        </member>
        <member name="P:Cenium.Framework.Security.ISecurityContext.MailDomain">
            <summary>
            Gets the current domain
            </summary>
        </member>
        <member name="P:Cenium.Framework.Security.ISecurityContext.IsSystemContext">
            <summary>
            Gets a value indicating whether this instance is a system context.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Security.ISecurityContext.GetTeamsForUser">
            <summary>
            Gets the teams the user is a member of.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Cenium.Framework.Security.Permission">
            <summary>
            Defines a permission level for a given resource identifier
            </summary>
        </member>
        <member name="M:Cenium.Framework.Security.Permission.#ctor(System.String,Cenium.Framework.Security.SecureResourcePermissionLevel)">
            <summary>
            Initializes a new instance of the Permission class
            </summary>
            <param name="id">The identifier the permission level is valid for</param>
            <param name="level">The level needed to access the resource</param>
        </member>
        <member name="P:Cenium.Framework.Security.Permission.Id">
            <summary>
            Gets the resource identifier
            </summary>
        </member>
        <member name="P:Cenium.Framework.Security.Permission.Level">
            <summary>
            Gets the permission level for the resource
            </summary>
        </member>
        <member name="T:Cenium.Framework.Security.RegisterUserGroupAttribute">
            <summary>
            Used to define and register functional user groups
            </summary>
        </member>
        <member name="M:Cenium.Framework.Security.RegisterUserGroupAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the RegisterUserGroupAttribute class
            </summary>
            <param name="id">The identifier for the user group</param>
            <param name="displayName">The display name for the user group</param>
            <param name="description">A brief explanation of the user group</param>
        </member>
        <member name="P:Cenium.Framework.Security.RegisterUserGroupAttribute.Id">
            <summary>
            Gets the identifier for the user group
            </summary>
            <remarks>
            The identifier should be 25 characters or less, and be composed of the component name who owns the group and a short identifier (e.g. contacts.salesperson)
            </remarks>
        </member>
        <member name="P:Cenium.Framework.Security.RegisterUserGroupAttribute.DisplayName">
            <summary>
            Gets the display name for the user group
            </summary>
        </member>
        <member name="P:Cenium.Framework.Security.RegisterUserGroupAttribute.Description">
            <summary>
            Gets a description for the user group
            </summary>
        </member>
        <member name="P:Cenium.Framework.Security.RegisterUserGroupAttribute.IsTrusted">
            <summary>
            Gets or sets a value indicating whether the user group is trusted
            </summary>
            <remarks>
            Trusted groups are typically associated with users that runs a trusted service such as a gateway server or print agent, giving access to services that are not
            available to normal users.
            </remarks>
        </member>
        <member name="T:Cenium.Framework.Security.SecureResourceAccessType">
            <summary>
            Defines the access type for a SecureResourceType
            </summary>
        </member>
        <member name="F:Cenium.Framework.Security.SecureResourceAccessType.Public">
            <summary>
            The resource is available to all authenticated users
            </summary>
        </member>
        <member name="F:Cenium.Framework.Security.SecureResourceAccessType.Secure">
            <summary>
            The resource is only available to authenticated users which have been granted access to the resource
            </summary>
        </member>
        <member name="T:Cenium.Framework.Security.SecureResourceAttribute">
            <summary>
            Associates a class or method with a secure resource type (<c>SecureResourceTypeAttribute</c>) and defines the permission level required
            </summary>
        </member>
        <member name="M:Cenium.Framework.Security.SecureResourceAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the SecureResourceAttribute class
            </summary>
            <param name="resourceType">The identifier of the resource type</param>
        </member>
        <member name="M:Cenium.Framework.Security.SecureResourceAttribute.#ctor(System.String,Cenium.Framework.Security.SecureResourcePermissionLevel)">
            <summary>
            Initializes a new instance of the SecureResourceAttribute class
            </summary>
            <param name="resourceType">The identifier of the resource type</param>
            <param name="permissionLevel">The permission level required to access the class or method</param>
        </member>
        <member name="P:Cenium.Framework.Security.SecureResourceAttribute.ResourceType">
            <summary>
            Gets the resource type the class or method is associated with
            </summary>
        </member>
        <member name="P:Cenium.Framework.Security.SecureResourceAttribute.PermissionLevel">
            <summary>
            Gets the permission level required to access the class or method
            </summary>
        </member>
        <member name="T:Cenium.Framework.Security.SecureResourceGroupAttribute">
            <summary>
            Represents a pre-defined group of secure resources
            </summary>
        </member>
        <member name="M:Cenium.Framework.Security.SecureResourceGroupAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the SecureResourceGroupAttribute class
            </summary>
            <param name="identity">The unique identity of the group</param>
            <param name="displayName">A display-friendly name for the group</param>
            <param name="description">An optional description for the group</param>
        </member>
        <member name="P:Cenium.Framework.Security.SecureResourceGroupAttribute.Identity">
            <summary>
            Gets the identity of the group.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Security.SecureResourceGroupAttribute.DisplayName">
            <summary>
            Gets the display name of the group.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Security.SecureResourceGroupAttribute.Description">
            <summary>
            Gets the description of the group.
            </summary>
        </member>
        <member name="T:Cenium.Framework.Security.SecureResourceGroupMember">
            <summary>
            Represents a member of a security resource group
            </summary>
        </member>
        <member name="M:Cenium.Framework.Security.SecureResourceGroupMember.#ctor">
            <summary>
            Initializes a new instance of the SecureResourceGroupMember class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Security.SecureResourceGroupMember.GroupIdentity">
            <summary>
            Gets the group identifier.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Security.SecureResourceGroupMember.ResourceIdentity">
            <summary>
            Gets the security resource identifier that is the member of the group
            </summary>
        </member>
        <member name="P:Cenium.Framework.Security.SecureResourceGroupMember.IsReadPermitted">
            <summary>
            Gets a value indicating whether read operations are permitted
            </summary>
        </member>
        <member name="P:Cenium.Framework.Security.SecureResourceGroupMember.IsWritePermitted">
            <summary>
            Gets a value indicating whether write operations are permitted
            </summary>
        </member>
        <member name="P:Cenium.Framework.Security.SecureResourceGroupMember.Resource">
            <summary>
            Gets the <c>SecureResourceType</c> that is a member.
            </summary>
        </member>
        <member name="T:Cenium.Framework.Security.SecureResourceGroupMemberAttribute">
            <summary>
            Represents a member of a security resource group
            </summary>
            <seealso cref="T:Cenium.Framework.Security.SecureResourceGroupAttribute"/>
        </member>
        <member name="M:Cenium.Framework.Security.SecureResourceGroupMemberAttribute.#ctor(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the SecureResourceGroupMemberAttribute class
            </summary>
            <param name="groupIdentity">The identity of the group the resource id a member of</param>
            <param name="resourceIdentity">The identity of the resource that is a member of this group</param>
            <param name="isRead">Indicates whether the member has read-access to the security resource</param>
            <param name="isWrite">Indicates whether the member has write-access to the security resource</param>
        </member>
        <member name="P:Cenium.Framework.Security.SecureResourceGroupMemberAttribute.GroupIdentity">
            <summary>
            Gets the group identifier.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Security.SecureResourceGroupMemberAttribute.ResourceIdentity">
            <summary>
            Gets the security resource identifier that is the member of the group
            </summary>
        </member>
        <member name="P:Cenium.Framework.Security.SecureResourceGroupMemberAttribute.IsReadPermitted">
            <summary>
            Gets a value indicating whether read operations are permitted
            </summary>
        </member>
        <member name="P:Cenium.Framework.Security.SecureResourceGroupMemberAttribute.IsWritePermitted">
            <summary>
            Gets a value indicating whether write operations are permitted
            </summary>
        </member>
        <member name="T:Cenium.Framework.Security.SecureResourcePermissionLevel">
            <summary>
            Defines permission levels required for a given resource
            </summary>
        </member>
        <member name="F:Cenium.Framework.Security.SecureResourcePermissionLevel.None">
            <summary>
            No permission needed
            </summary>
        </member>
        <member name="F:Cenium.Framework.Security.SecureResourcePermissionLevel.Read">
            <summary>
            Read permission needed
            </summary>
        </member>
        <member name="F:Cenium.Framework.Security.SecureResourcePermissionLevel.Write">
            <summary>
            Write permission needed
            </summary>
        </member>
        <member name="T:Cenium.Framework.Security.SecureResourceType">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="M:Cenium.Framework.Security.SecureResourceType.#ctor(System.String,Cenium.Framework.Security.SecureResourceTypeAttribute)">
            <summary>
            Initializes a new instance of the SecureResourceType class
            </summary>
        </member>
        <member name="T:Cenium.Framework.Security.SecureResourceTypeAttribute">
            <summary>
            Defines a resource that can be secured using permissions
            </summary>
        </member>
        <member name="M:Cenium.Framework.Security.SecureResourceTypeAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the SecureResource class
            </summary>
            <param name="id">The identifier for the resource type</param>
            <param name="displayName">The display name for the resource type</param>
            <param name="description">The description for the resource type</param>
        </member>
        <member name="M:Cenium.Framework.Security.SecureResourceTypeAttribute.#ctor(System.String,System.String,System.String,Cenium.Framework.Security.SecureResourceAccessType)">
            <summary>
            Initializes a new instance of the SecureResource class
            </summary>
            <param name="id">The identifier for the resource type</param>
            <param name="displayName">The display name for the resource type</param>
            <param name="description">The description for the resource type</param>
            <param name="accessType">The access level required for the resource</param>
        </member>
        <member name="P:Cenium.Framework.Security.SecureResourceTypeAttribute.Id">
            <summary>
            Gets the identifier for the resource type
            </summary>
        </member>
        <member name="P:Cenium.Framework.Security.SecureResourceTypeAttribute.DisplayName">
            <summary>
            Gets the display name for the resource type
            </summary>
        </member>
        <member name="P:Cenium.Framework.Security.SecureResourceTypeAttribute.Description">
            <summary>
            Gets the description for the resource type
            </summary>
        </member>
        <member name="P:Cenium.Framework.Security.SecureResourceTypeAttribute.AccessType">
            <summary>
            Gets the access type for the resource type
            </summary>
        </member>
        <member name="P:Cenium.Framework.Security.SecureResourceTypeAttribute.LookupMembers">
            <summary>
            Gets or sets the lookup members.
            </summary>
        </member>
        <member name="T:Cenium.Framework.Security.SecureResourceTypeLookupMembersAttribute">
            <summary>
            Adds lookup references to an existing secure resource type.
            </summary>
            <remarks>
            Note that if the resource type is not defined, this attribute declaration is ignored.
            </remarks>
        </member>
        <member name="M:Cenium.Framework.Security.SecureResourceTypeLookupMembersAttribute.#ctor(System.String,System.String[])">
            <summary>
            Initializes a new instance of the SecureResourceTypeLookupMembersAttribute class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Security.SecureResourceTypeLookupMembersAttribute.ResourceType">
            <summary>
            Gets the resource type identifier
            </summary>
        </member>
        <member name="P:Cenium.Framework.Security.SecureResourceTypeLookupMembersAttribute.Members">
            <summary>
            Gets an array of lookup members
            </summary>
        </member>
        <member name="T:Cenium.Framework.Security.SecureResourceTypes">
            <summary>
            Implements a set of pre-defined security resources
            </summary>
        </member>
        <member name="F:Cenium.Framework.Security.SecureResourceTypes.Public">
            <summary>
            Identifier for the public security resource
            </summary>
            <remarks>
            Public security resources are resources available to all authenticated users. Operations within this type are expected to implement their own security mechanism, for instance data filtered by user.
            </remarks>
        </member>
        <member name="F:Cenium.Framework.Security.SecureResourceTypes.Admin">
            <summary>
            Identifier for the data administrator security resource
            </summary>
        </member>
        <member name="F:Cenium.Framework.Security.SecureResourceTypes.PropertyAdmin">
            <summary>
            Identifier for the property data administrator security resource
            </summary>
        </member>
        <member name="T:Cenium.Framework.Security.SecurityAuthorizationException">
            <summary>
            The exception that is thrown if a user does not have authorization to perform a specific action.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Security.SecurityAuthorizationException.#ctor(Cenium.Framework.Language.LanguageConstant,System.Object[])">
            <summary>
            Initializes a new instance of the SecurityAuthorizationException class
            </summary>
            <param name="id">The message identifier</param>
            <param name="args">arguments for the message</param>
        </member>
        <member name="T:Cenium.Framework.Security.SecurityManager">
            <summary>
            The SecurityManager is a static class that contains methods for retriving users, roles, groups and permissions
            </summary>
        </member>
        <member name="P:Cenium.Framework.Security.SecurityManager.CurrentContext">
            <summary>
            Gets the security context for the current thread
            </summary>
        </member>
        <member name="P:Cenium.Framework.Security.SecurityManager.Users">
            <summary>
            Gets all users in the security store
            </summary>
        </member>
        <member name="P:Cenium.Framework.Security.SecurityManager.Roles">
            <summary>
            Gets all roles in the security store
            </summary>
        </member>
        <member name="M:Cenium.Framework.Security.SecurityManager.GetUser(System.String)">
            <summary>
            Gets a user from the security store
            </summary>
            <param name="userId">The user identifier</param>
            <returns>A UserInfo instance, or null if the user doesn't exist</returns>
        </member>
        <member name="M:Cenium.Framework.Security.SecurityManager.GetRole(System.String)">
            <summary>
            Gets a security role from the security store
            </summary>
            <param name="userId">The role identifier</param>
            <returns>A RoleInfo instance, or null if the role doesn't exist</returns>
        </member>
        <member name="P:Cenium.Framework.Security.SecurityManager.UserGroups">
            <summary>
            Gets all the functional user groups that has been registered
            </summary>
        </member>
        <member name="M:Cenium.Framework.Security.SecurityManager.GetUserGroup(System.String)">
            <summary>
            Gets a user group based on an identifier
            </summary>
            <param name="id">The group identifier</param>
            <returns>A user group if the group exists; otherwise null</returns>
        </member>
        <member name="M:Cenium.Framework.Security.SecurityManager.ModifyUserGroupMembership(System.String,System.String,System.Boolean)">
            <summary>
            Adds or removes a user as a member of a user group
            </summary>
            <param name="id">The identity of the group</param>
            <param name="userId">The user to add or remove</param>
            <param name="isMember">Use true if the user is a member of the group; otherwise use false</param>
        </member>
        <member name="P:Cenium.Framework.Security.SecurityManager.ResourceTypes">
            <summary>
            Gets all secure resource types defined by <c>SecureResourceTypeAttribute</c>.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Security.SecurityManager.GetResourceTypeByIdentity(System.String)">
            <summary>
            Gets a secure resource type associated with the specified identifier
            </summary>
            <param name="id">The identifier for the resource type to get</param>
            <returns></returns>
        </member>
        <member name="P:Cenium.Framework.Security.SecurityManager.ResourceGroups">
            <summary>
            Gets all <c>SecureResourceGroup</c> instances that have been defined by the <c>SecureResourceGroupAttribute</c>
            </summary>
        </member>
        <member name="M:Cenium.Framework.Security.SecurityManager.GetResourceGroupByIdentity(System.String)">
            <summary>
            Gets a secure resource group associated with the specified identifier
            </summary>
            <param name="id">The identifier for the resource group to get</param>
            <returns></returns>
        </member>
        <member name="M:Cenium.Framework.Security.SecurityManager.GetAuthorizationUser(System.Guid,System.Boolean)">
            <summary>
            Gets the user that authorized a transaction for another user
            </summary>
            <param name="token">The security token associated with the transaction</param>
            <param name="raiseError">Indicates if the method should raise an error if the token is invalid</param>
            <returns>The authorization user identity associated with the token</returns>
        </member>
        <member name="M:Cenium.Framework.Security.SecurityManager.RegisterDataRestrictionType(System.String,Cenium.Framework.Language.LanguageConstant)">
            <summary>
            Registers a data restriction type
            </summary>
            <param name="identity">The identity of the restriction type</param>
            <param name="displayName">The display name as a LanguageConstant</param>
        </member>
        <member name="M:Cenium.Framework.Security.SecurityManager.RegisterDataRestrictionType(Cenium.Framework.Security.DataRestrictionType)">
            <summary>
            Registers a data restriction type
            </summary>
            <param name="restrictionType">The restriction type to register</param>
        </member>
        <member name="M:Cenium.Framework.Security.SecurityManager.GetDataRestrictionType(System.String)">
            <summary>
            Gets a data restriction type based on an identifier
            </summary>
            <param name="identity">The identity of the data restriction type</param>
            <returns>A <c>DataRestrictionType</c> instance, or null if the restriction does not exist.</returns>
        </member>
        <member name="P:Cenium.Framework.Security.SecurityManager.DataRestrictionTypes">
            <summary>
            Gets all registered data restriction types.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Security.SecurityManager.AddOrUpdateDataRestriction(Cenium.Framework.Security.DataRestrictionType,Cenium.Framework.Security.DataRestriction)">
            <summary>
            Adds or updates a data restriction
            </summary>
            <param name="restriction">The restriction to add or update</param>
        </member>
        <member name="M:Cenium.Framework.Security.SecurityManager.AddOrUpdateDataRestrictions(Cenium.Framework.Security.DataRestrictionType,System.Collections.Generic.ICollection{Cenium.Framework.Security.DataRestriction})">
            <summary>
            Adds or updates a collection of data restrictions
            </summary>
            <param name="restrictions">A collection of DataRestriction instances to add or update</param>
        </member>
        <member name="M:Cenium.Framework.Security.SecurityManager.RemoveDataRestriction(Cenium.Framework.Security.DataRestrictionType,Cenium.Framework.Security.DataRestriction)">
            <summary>
            Removes an existing data restriction group
            </summary>
            <param name="restriction">The restriction group to remove</param>
        </member>
        <member name="M:Cenium.Framework.Security.SecurityManager.GetTeamsForUser(System.String)">
            <summary>
            Gets the team identifiers that a specified user is a member of.
            </summary>
            <param name="userId">The user identifier</param>
            <returns>A collection of team identifiers that the user is a member of.</returns>
        </member>
        <member name="M:Cenium.Framework.Security.SecurityManager.GetTeamMembers(System.Int64)">
            <summary>
            Gets a collection of user identities that are members of a specified team.
            </summary>
            <param name="teamId">The team identifier.</param>
            <returns>A collection of user identities that are members of a specified team.</returns>
        </member>
        <member name="M:Cenium.Framework.Security.SecurityManager.GetTeamAccountName(System.Int64)">
            <summary>
            Creates a team account name from a team identifier
            </summary>
            <param name="teamId">The team identifier.</param>
            <returns>A team account name</returns>
        </member>
        <member name="M:Cenium.Framework.Security.SecurityManager.SetContextFactory(Cenium.Framework.Security.ISecurityContextFactory)">
            <summary>
            Sets the security context factory
            </summary>
            <remarks>
            This is an infrastructure method and should not be called outside the framework
            </remarks>
            <param name="securityContextFactory">The security context factory to set</param>
        </member>
        <member name="M:Cenium.Framework.Security.SecurityManager.SetSecurityStore(Cenium.Framework.Security.ISecurityStore)">
            <summary>
            Sets the security store
            </summary>
            <remarks>
            This is an infrastructure method and should not be called outside the framework
            </remarks>
            <param name="store">The security store set</param>
        </member>
        <member name="M:Cenium.Framework.Security.SecurityManager.Inspect(System.Reflection.Assembly)">
            <summary>
            This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.
            Performs assembly inspection to load security related metadata.
            </summary>
            <exclude/>
            <param name="assembly">The assembly to inspect</param>
        </member>
        <member name="M:Cenium.Framework.Security.SecurityManager.ToAnonymousUserId(System.String)">
            <summary>
            Converts a user identity to an anonymous user identity
            </summary>
            <param name="userId">The user identifier to convert.</param>
            <returns>A unqiue anonymous identity for the user id</returns>
        </member>
        <member name="T:Cenium.Framework.Security.UserGroup">
            <summary>
            Represents a functional user group
            </summary>
        </member>
        <member name="P:Cenium.Framework.Security.UserGroup.Id">
            <summary>
            Gets the identifier for the user group
            </summary>
        </member>
        <member name="P:Cenium.Framework.Security.UserGroup.DisplayName">
            <summary>
            Gets a display friendly name for the user group
            </summary>
        </member>
        <member name="P:Cenium.Framework.Security.UserGroup.Description">
            <summary>
            Gets the description for the user group
            </summary>
        </member>
        <member name="T:Cenium.Framework.Security.UserGroupMember">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="T:Cenium.Framework.Security.UserInfo">
            <summary>
            Represents information about a user
            </summary>
        </member>
        <member name="M:Cenium.Framework.Security.UserInfo.#ctor">
            <summary>
            Initializes a new instance of the UserInfo class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Security.UserInfo.UserId">
            <summary>
            Gets or sets the user identifier
            </summary>
        </member>
        <member name="P:Cenium.Framework.Security.UserInfo.Domain">
            <summary>
            Gets or sets the domain the user belongs to
            </summary>
        </member>
        <member name="P:Cenium.Framework.Security.UserInfo.Name">
            <summary>
            Gets or sets the user name
            </summary>
        </member>
        <member name="P:Cenium.Framework.Security.UserInfo.DisplayName">
            <summary>
            Gets or sets the display name
            </summary>
        </member>
        <member name="P:Cenium.Framework.Security.UserInfo.Description">
            <summary>
            Gets or sets the description
            </summary>
        </member>
        <member name="P:Cenium.Framework.Security.UserInfo.IsEnabled">
            <summary>
            Gets or sets if the user is enabled
            </summary>
        </member>
        <member name="P:Cenium.Framework.Security.UserInfo.ImageRef">
            <summary>
            Gets or sets the user image
            </summary>
        </member>
        <member name="P:Cenium.Framework.Security.UserInfo.Roles">
            <summary>
            Gets or sets the user roles
            </summary>
        </member>
        <member name="P:Cenium.Framework.Security.UserInfo.MailAddress">
            <summary>
            Gets or sets the mail address
            </summary>
        </member>
        <member name="P:Cenium.Framework.Security.UserInfo.HomePhoneNo">
            <summary>
            Gets pr sets the home phone number
            </summary>
        </member>
        <member name="P:Cenium.Framework.Security.UserInfo.MobilePhoneNo">
            <summary>
            Gets or sets the mobile phone number
            </summary>
        </member>
        <member name="P:Cenium.Framework.Security.UserInfo.BusinessPhoneNo">
            <summary>
            Gets or sets the business phone number
            </summary>
        </member>
        <member name="P:Cenium.Framework.Security.UserInfo.NavigatorProfileId">
            <summary>
            Gets or sets the navigator profile for the user
            </summary>
        </member>
        <member name="M:Cenium.Framework.Security.UserInfo.Copy">
            <summary>
            Creates a new object that is a copy of the current instance
            </summary>
            <returns>A new object that is a copy of this instance</returns>
        </member>
        <member name="M:Cenium.Framework.Security.UserInfo.UpdateTerms">
            <summary>
            Updates the search terms.
            </summary>
        </member>
        <member name="T:Cenium.Framework.Messaging.IMessageContent">
            <summary>
            Defines the contract for message content
            </summary>
        </member>
        <member name="P:Cenium.Framework.Messaging.IMessageContent.Name">
            <summary>
            Gets the name associated with the message content
            </summary>
        </member>
        <member name="M:Cenium.Framework.Messaging.IMessageContent.SetValue(System.String,System.Object)">
            <summary>
            Sets a value and associates the value with a name
            </summary>
            <param name="name">The name associated with the value</param>
            <param name="value">The value to set</param>
        </member>
        <member name="M:Cenium.Framework.Messaging.IMessageContent.GetValue(System.String)">
            <summary>
            Gets a value using the associated name
            </summary>
            <param name="name">The name to get the value for</param>
            <returns>The value associated with the name</returns>
        </member>
        <member name="M:Cenium.Framework.Messaging.IMessageContent.GetValue``1(System.String)">
            <summary>
            Gets a strongly typed value using the associated name
            </summary>
            <typeparam name="T">The type of value to get</typeparam>
            <param name="name">The name to get the value for</param>
            <returns>The value associated with the name</returns>
        </member>
        <member name="M:Cenium.Framework.Messaging.IMessageContent.AddChild(System.String,System.String)">
            <summary>
            Adds a child message identified by the specified property
            </summary>
            <param name="name">The property name</param>
            <param name="childName">Name of the child.</param>
            <returns>A new IMessageContent instance</returns>
        </member>
        <member name="M:Cenium.Framework.Messaging.IMessageContent.GetChildren(System.String)">
            <summary>
            Gets the children associated with the specified property
            </summary>
            <param name="name">The name of the property.</param>
            <returns>A read-only collection of <c>IMessageContent</c> instances, or null if there are no children associated with the specified property.</returns>
        </member>
        <member name="T:Cenium.Framework.Messaging.IMessageHeader">
            <summary>
            Defines the structure for a message header
            </summary>
        </member>
        <member name="P:Cenium.Framework.Messaging.IMessageHeader.ApplicationId">
            <summary>
            Gets the application identifier.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Messaging.IMessageHeader.MessageType">
            <summary>
            Gets the type of the message.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Messaging.IMessageHeader.Recipient">
            <summary>
            Gets the message recipient.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Messaging.IMessageHeader.Token">
            <summary>
            Gets the token associated with the message.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Messaging.IMessageHeader.Content">
            <summary>
            Gets the content of the message
            </summary>
        </member>
        <member name="T:Cenium.Framework.Messaging.IMessageProvider">
            <summary>
            Defines the contract for a message provider
            </summary>
        </member>
        <member name="M:Cenium.Framework.Messaging.IMessageProvider.Send(Cenium.Framework.Messaging.IMessageHeader,Cenium.Framework.Messaging.MessageProcessType)">
            <summary>
            Sends a message through the messaging system as an asynchronous operation
            </summary>
            <param name="message">The message to send</param>
            <param name="sendType">Specifies how the message is sent</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Cenium.Framework.Messaging.IMessageProvider.GetResponseById(System.Int64)">
            <summary>
            Retrieves a message response from the messaging system using a unique message id. This is an  asynchronous operation
            </summary>
            <param name="id">The identity of the message</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Cenium.Framework.Messaging.IMessageProvider.GetResponseByToken(System.Guid,System.String)">
            <summary>
            Retrieves all message responses from the messaging system that are associated with a specified token. This is an  asynchronous operation
            </summary>
            <param name="token">A unique identifier for a group of related messages</param>
            <param name="routing">The routing associated with the message response. When not specified, this method returns all responses associated with the specified token</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="P:Cenium.Framework.Messaging.IMessageProvider.IsMessageSystemAvailable">
            <summary>
            Returns true if the message system is available; otherwise false
            </summary>
        </member>
        <member name="P:Cenium.Framework.Messaging.IMessageProvider.IsSynchronousMessagingSupported">
            <summary>
            Returns true if the message system is available and synchronous messaging is supported; otherwise false
            </summary>
        </member>
        <member name="M:Cenium.Framework.Messaging.IMessageProvider.CreateMessage(System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new message structure
            </summary>
            <param name="applicationId">The application identifier.</param>
            <param name="messageType">Type of the message.</param>
            <param name="recipient">The recipient of the message.</param>
            <param name="messageName">Name of the message.</param>
            <returns>A new <c>IMessageHeader</c> instance</returns>
        </member>
        <member name="T:Cenium.Framework.Messaging.MessageCallbackInfo">
            <summary>
            Entity that defines the structure of a message callback
            </summary>
        </member>
        <member name="P:Cenium.Framework.Messaging.MessageCallbackInfo.ApplicationId">
            <summary>
            Gets or sets the application identifier.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Messaging.MessageCallbackInfo.MessageType">
            <summary>
            Gets or sets the message type
            </summary>
        </member>
        <member name="P:Cenium.Framework.Messaging.MessageCallbackInfo.Recipient">
            <summary>
            Gets or sets the message recipient.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Messaging.MessageCallbackInfo.MessageId">
            <summary>
            Gets or sets the message identity.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Messaging.MessageCallbackInfo.Token">
            <summary>
            Gets or sets the message token.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Messaging.MessageCallbackInfo.Routing">
            <summary>
            Gets or sets the routing associated with the message.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Messaging.MessageCallbackInfo.Status">
            <summary>
            Gets or sets the status of the message
            </summary>
        </member>
        <member name="P:Cenium.Framework.Messaging.MessageCallbackInfo.Data">
            <summary>
            Gets or sets the data associated with the message
            </summary>
        </member>
        <member name="P:Cenium.Framework.Messaging.MessageCallbackInfo.StatusText">
            <summary>
            Gets or sets the status text associated with the status.
            </summary>
        </member>
        <member name="T:Cenium.Framework.Messaging.MessageManager">
            <summary>
            Provides access to the messaging system
            </summary>
        </member>
        <member name="P:Cenium.Framework.Messaging.MessageManager.IsMessageSystemAvailable">
            <summary>
            Returns true if the message system is available; otherwise false
            </summary>
        </member>
        <member name="P:Cenium.Framework.Messaging.MessageManager.IsSynchronousMessagingSupported">
            <summary>
            Returns true if the message system is available and synchronous messaging is supported; otherwise false
            </summary>
        </member>
        <member name="M:Cenium.Framework.Messaging.MessageManager.Send(Cenium.Framework.Messaging.IMessageHeader,Cenium.Framework.Messaging.MessageProcessType)">
            <summary>
            Sends a message through the messaging system as an asynchronous operation
            </summary>
            <param name="message">The message header containing the message to send</param>
            <param name="sendType">Specifies how the message is sent</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Cenium.Framework.Messaging.MessageManager.GetResponseById(System.Int64)">
            <summary>
            Retrieves a message response from the messaging system using a unique message id. This is an  asynchronous operation
            </summary>
            <param name="id">The identity of the message</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Cenium.Framework.Messaging.MessageManager.GetResponseByToken(System.Guid,System.String)">
            <summary>
            Retrieves all message responses from the messaging system that are associated with a specified token. This is an  asynchronous operation
            </summary>
            <param name="token">A unique identifier for a group of related messages</param>
            <param name="routing">The routing associated with the message response. When not specified, this method returns all responses associated with the specified token</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Cenium.Framework.Messaging.MessageManager.CreateMessage(System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new message structure
            </summary>
            <param name="applicationId">The application identifier.</param>
            <param name="messageType">Type of the message.</param>
            <param name="recipient">The recipient of the message.</param>
            <param name="messageName">Name of the message.</param>
            <returns>A new <c>IMessageHeader</c> instance</returns>
        </member>
        <member name="M:Cenium.Framework.Messaging.MessageManager.SetProvider(Cenium.Framework.Messaging.IMessageProvider)">
            <summary>
            Sets the messaging provider.
            </summary>
            <param name="provider">The provider to set.</param>
        </member>
        <member name="T:Cenium.Framework.Messaging.MessageQueryResult">
            <summary>
            Contains the result of a message query
            </summary>
        </member>
        <member name="M:Cenium.Framework.Messaging.MessageQueryResult.#ctor">
            <summary>
            Initializes a new instance of the MessageQueryResult class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Messaging.MessageQueryResult.MessageId">
            <summary>
            Gets the message identifier.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Messaging.MessageQueryResult.Token">
            <summary>
            Gets the token associated with the message
            </summary>
        </member>
        <member name="P:Cenium.Framework.Messaging.MessageQueryResult.Routing">
            <summary>
            Gets the routing associated with the message
            </summary>
        </member>
        <member name="P:Cenium.Framework.Messaging.MessageQueryResult.QueueStatus">
            <summary>
            Gets the current queue status of the message
            </summary>
        </member>
        <member name="P:Cenium.Framework.Messaging.MessageQueryResult.StatusText">
            <summary>
            Gets the a detailed status text, if the queue status is an error status
            </summary>
        </member>
        <member name="P:Cenium.Framework.Messaging.MessageQueryResult.Result">
            <summary>
            Gets message process result
            </summary>
        </member>
        <member name="T:Cenium.Framework.Messaging.MessageQueueStatus">
            <summary>
            Represents the status of a message in a message queue
            </summary>
        </member>
        <member name="F:Cenium.Framework.Messaging.MessageQueueStatus.Waiting">
            <summary>
            The message is waiting to be processed
            </summary>
        </member>
        <member name="F:Cenium.Framework.Messaging.MessageQueueStatus.Completed">
            <summary>
            The message has been processed successfully
            </summary>
        </member>
        <member name="F:Cenium.Framework.Messaging.MessageQueueStatus.Error">
            <summary>
            The message has been processed with errors
            </summary>
        </member>
        <member name="F:Cenium.Framework.Messaging.MessageQueueStatus.NotFound">
            <summary>
            The message does not exist
            </summary>
        </member>
        <member name="T:Cenium.Framework.Messaging.MessageSendResult">
            <summary>
            Contains the result of a message send operation
            </summary>
        </member>
        <member name="M:Cenium.Framework.Messaging.MessageSendResult.#ctor">
            <summary>
            Initializes a new instance of the MessageSendResult class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Messaging.MessageSendResult.Status">
            <summary>
            Gets the status of the send operation
            </summary>
        </member>
        <member name="P:Cenium.Framework.Messaging.MessageSendResult.IsError">
            <summary>
            Gets a value indicating whether the send operation resulted in an error
            </summary>
        </member>
        <member name="P:Cenium.Framework.Messaging.MessageSendResult.StatusText">
            <summary>
            Gets the status text; this property will be empty if the send operation was successful
            </summary>
        </member>
        <member name="P:Cenium.Framework.Messaging.MessageSendResult.Result">
            <summary>
            Gets the result content
            </summary>
        </member>
        <member name="T:Cenium.Framework.Messaging.MessageSendStatus">
            <summary>
            Defines the possible statuses of a send operation
            </summary>
        </member>
        <member name="F:Cenium.Framework.Messaging.MessageSendStatus.Success">
            <summary>
            Message was sent successfully
            </summary>
        </member>
        <member name="F:Cenium.Framework.Messaging.MessageSendStatus.Error">
            <summary>
            An error occurred while sending the message
            </summary>
        </member>
        <member name="T:Cenium.Framework.Messaging.MessageProcessType">
            <summary>
            Specifies how the message is sent and processed by the messaging system
            </summary>
        </member>
        <member name="F:Cenium.Framework.Messaging.MessageProcessType.Synchronous">
            <summary>
            The message is sent and processed synchronous
            </summary>
        </member>
        <member name="F:Cenium.Framework.Messaging.MessageProcessType.Asynchronous">
            <summary>
            The message is sent to a queue for later processing
            </summary>
        </member>
        <member name="T:Cenium.Framework.ServerLanguageConstants">
            <summary>
            Constains public language constants for the server
            </summary>
        </member>
        <member name="T:Cenium.Framework.Threading.AppLock">
            <summary>
            Provides a mechanism that synchronizes distributed access to objects
            </summary>
            <remarks>
            The <c>AppLock</c> class is similar to <c>DistributedLock</c>; they both synchronize access across process and servers. The <c>DistributedLock</c> is intended for background jobs and can work across different threads
            where-as the <c>AppLock</c> is intended for locking user-initated processes within the same thread. You do not have to pre-define a lock identity with an <c>AppLock</c>.
            </remarks>
            <seealso cref="T:Cenium.Framework.Threading.DistributedLock"/>
        </member>
        <member name="M:Cenium.Framework.Threading.AppLock.#ctor(System.String)">
            <summary>
            Initializes a new instance of the AppLock class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Threading.AppLock.Name">
            <summary>
            Gets the application lock name. The name is used to identify the lock.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Threading.AppLock.TryEnter">
            <summary>
            Attempts to acquire an exclusive application lock.
            </summary>
            <returns>true if the application lock is aquired; otherwise, false.</returns>
        </member>
        <member name="M:Cenium.Framework.Threading.AppLock.TryEnter(System.TimeSpan)">
            <summary>
            Attempts, for the specified amount of time, to acquire an exclusive application lock.
            </summary>
            <param name="timeout">A <c>TimeSpan</c> representing the amount of time to wait for the lock. A value of –1 millisecond specifies an infinite wait.</param>
            <returns>true if the application lock is aquired; otherwise, false.</returns>
        </member>
        <member name="M:Cenium.Framework.Threading.AppLock.Release">
            <summary>
            Releases the application lock.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Threading.AppLock.OnTryEnter(System.TimeSpan)">
            <summary>
            Called from the TryEnter methods. Implementers must override this method
            </summary>
            <param name="timeout">A <c>TimeSpan</c> representing the amount of time to wait for the lock. A value of –1 millisecond specifies an infinite wait.</param>
            <returns>true if the application lock is aquired; otherwise, false.</returns>
        </member>
        <member name="M:Cenium.Framework.Threading.AppLock.Create(System.String)">
            <summary>
            Creates a new <c>AppLock</c> instance with the specified name. The name must be unique per lock and is not case-sensitive
            </summary>
            <param name="name">The application lock name.</param>
            <returns>A new <c>AppLock</c> instance if a application lock factory has been registered; otherwise null.</returns>
        </member>
        <member name="M:Cenium.Framework.Threading.AppLock.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Threading.AppLock.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="dispose"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Cenium.Framework.Threading.DistributedLock">
            <summary>
            Provides a mechanism that synchronizes distributed access to objects
            </summary>
        </member>
        <member name="P:Cenium.Framework.Threading.DistributedLock.IsDistributedLockAvailable">
            <summary>
            Gets a value indicating whether distributed locks are available or not.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Threading.DistributedLock.TryEnter(System.Guid)">
            <summary>
            Attempts to acquire an exclusive lock on the specified object
            </summary>
            <remarks>This method sets the max time-to-live to 1 day.</remarks>
            <param name="lockId">The object on which to acquire the lock.</param>
            <returns>A <c>Lock</c> instance if the operation was a success; otherwise null</returns>
        </member>
        <member name="M:Cenium.Framework.Threading.DistributedLock.TryEnter(System.Guid,System.TimeSpan)">
            <summary>
            Attempts to acquire an exclusive lock on the specified object. The maxTimeToLive argument specifies the max time the lock will stay valid.
            </summary>
            <param name="lockId">The object on which to acquire the lock.</param>
            <param name="maxTimeToLive">Max time the lock will stay valid.</param>
            <returns>A <c>Lock</c> instance if the operation was a success; otherwise null</returns>
        </member>
        <member name="M:Cenium.Framework.Threading.DistributedLock.Release(Cenium.Framework.Threading.Lock)">
            <summary>
            Releases the specified distributed lock.
            </summary>
            <param name="dlock">The lock to release.</param>
        </member>
        <member name="M:Cenium.Framework.Threading.DistributedLock.SetProvider(Cenium.Framework.Threading.IDistributedLockProvider)">
            <summary>
            Sets the provider that implements the logic for the distributed lock.
            </summary>
            <param name="provider">The provider to set</param>
        </member>
        <member name="T:Cenium.Framework.Threading.IDistributedLockProvider">
            <summary>
            Defines the contract for implementers of distributed locks
            </summary>
        </member>
        <member name="M:Cenium.Framework.Threading.IDistributedLockProvider.TryEnter(System.Guid,System.TimeSpan)">
            <summary>
            Attempts to acquire an exclusive lock on the specified object. The maxTimeToLive argument specifies the max time the lock will stay valid.
            </summary>
            <param name="lockId">The object on which to acquire the lock.</param>
            <param name="maxTimeToLive">Max time the lock will stay valid.</param>
            <returns>A <c>Lock</c> instance if the operation was a success; otherwise null</returns>
        </member>
        <member name="M:Cenium.Framework.Threading.IDistributedLockProvider.Release(Cenium.Framework.Threading.Lock)">
            <summary>
            Releases the specified distributed lock.
            </summary>
            <param name="dlock">The lock to release.</param>
        </member>
        <member name="T:Cenium.Framework.Threading.IntervalTimerPeriod">
            <summary>
            Represents a interval-based schedule for a timer callback
            </summary>
        </member>
        <member name="M:Cenium.Framework.Threading.IntervalTimerPeriod.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new instance of the IntervalTimerPeriod class
            </summary>
            <param name="interval">Specifies the time between each execution</param>
        </member>
        <member name="M:Cenium.Framework.Threading.IntervalTimerPeriod.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the IntervalTimerPeriod class
            </summary>
            <param name="interval">Specifies the time between each execution in milliseconds</param>
        </member>
        <member name="M:Cenium.Framework.Threading.IntervalTimerPeriod.GetNextRunTime(Cenium.Framework.Threading.ServerTimerContext)">
            <summary>
            Gets the next run time.
            </summary>
            <remarks>
            The IntervalTimePeriod defines the next run time as (DateTime.Now + interval)
            </remarks>
            <param name="context">The context of the timer callback</param>
            <returns>
            A DateTime instance specifying when the callback should be executed next
            </returns>
        </member>
        <member name="T:Cenium.Framework.Threading.Lock">
            <summary>
            Represents a lock primitive
            </summary>
        </member>
        <member name="M:Cenium.Framework.Threading.Lock.#ctor">
            <summary>
            Initializes a new instance of the Lock class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Threading.Lock.Identity">
            <summary>
            Gets the identity of the lock.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Threading.Lock.MaxTimeToLive">
            <summary>
            Gets the max time-to-live for the lock.
            </summary>
        </member>
        <member name="P:Cenium.Framework.Threading.Lock.Expires">
            <summary>
            Gets a <c>DateTime</c> that specifies when the lock expires.
            </summary>
        </member>
        <member name="T:Cenium.Framework.Threading.LockFactories">
            <summary>
            Contains factory methods for creating locks. This is an infrastructure class and should not be used outside the SDK.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Threading.LockFactories.SetAppLockFactory(System.Func{System.String,Cenium.Framework.Threading.AppLock})">
            <summary>
            Sets the application lock factory.
            </summary>
            <param name="factory">The factory to set</param>
        </member>
        <member name="M:Cenium.Framework.Threading.LockFactories.CreateAppLock(System.String)">
            <summary>
            Creates a new <c>AppLock</c> instance
            </summary>
            <returns>A new <c>AppLock</c> instance</returns>
        </member>
        <member name="T:Cenium.Framework.Threading.ServerMonitor">
            <summary>
            Provides a mechanism that synchronizes access to objects.
            </summary>
        </member>
        <member name="M:Cenium.Framework.Threading.ServerMonitor.TryEnter(System.String,System.TimeSpan)">
            <summary>
            Attempts, for the specified amount of time, to acquire an exclusive lock on the specified object.
            </summary>
            <param name="key">The key to the object on which to acquire the lock.</param>
            <param name="timeout">A <c>TimeSpan</c> representing the amount of time to wait for the lock. A value of –1 millisecond specifies an infinite wait.</param>
            <returns>true if the current thread acquires the lock; otherwise, false.</returns>
        </member>
        <member name="M:Cenium.Framework.Threading.ServerMonitor.TryEnter(System.String)">
            <summary>
            Attempts to acquire an exclusive lock on the specified object.
            </summary>
            <param name="key">The key to the object on which to acquire the lock.</param>
            <returns>true if the current thread acquires the lock; otherwise, false.</returns>
        </member>
        <member name="M:Cenium.Framework.Threading.ServerMonitor.Release(System.String)">
            <summary>
            Releases an exclusive lock on the specified object.
            </summary>
            <param name="key">The key to the object on which to release the lock.</param>
        </member>
        <member name="T:Cenium.Framework.Threading.ServerTimer">
            <summary>
            Provides a mechanism for executing a method at specified intervals.
            </summary>
            <remarks>
            The minimum delay between each invokation is set to 60 seconds.
            </remarks>
        </member>
        <member name="M:Cenium.Framework.Threading.ServerTimer.AddTimerCallback(System.Action{Cenium.Framework.Threading.ServerTimerContext},Cenium.Framework.Threading.TimerPeriod,Cenium.Framework.Threading.TimerCallbackOptions)">
            <summary>
            Adds a callback to the timer. The callback is executed once each time the period time interval elapses
            </summary>
            <param name="callback">A Action delegate representing the method to be executed</param>
            <param name="period">The period to delay before the callback is invoked.</param>
            <param name="options">Specifies the options for how the callback is executed.</param>
        </member>
        <member name="M:Cenium.Framework.Threading.ServerTimer.AddTimerCallback(System.Action{Cenium.Framework.Threading.ServerTimerContext},System.TimeSpan,Cenium.Framework.Threading.TimerCallbackOptions)">
            <summary>
            Adds a callback to the timer. The callback is executed once each time the period time interval elapses
            </summary>
            <param name="callback">A Action delegate representing the method to be executed</param>
            <param name="period">The period to delay before the callback is invoked expressed as a TimeSpan.</param>
            <param name="options">Specifies the options for how the callback is executed.</param>
        </member>
        <member name="M:Cenium.Framework.Threading.ServerTimer.AddTimerCallback(System.Action{Cenium.Framework.Threading.ServerTimerContext},System.Int64,Cenium.Framework.Threading.TimerCallbackOptions)">
            <summary>
            Adds a callback to the timer. The callback is executed once each time the period time interval elapses
            </summary>
            <param name="callback">A Action delegate representing the method to be executed</param>
            <param name="period">The period to delay before the callback is invoked expressed in milliseconds.</param>
            <param name="options">Specifies the options for how the callback is executed.</param>
        </member>
        <member name="T:Cenium.Framework.Threading.ServerTimerContext">
            <summary>
            Provides context for a server timer callback
            </summary>
        </member>
        <member name="M:Cenium.Framework.Threading.ServerTimerContext.#ctor">
            <summary>
            Initializes a new instance of the ServerTimerContext class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Threading.ServerTimerContext.Options">
            <summary>
            Gets the callback options associated with the callback
            </summary>
        </member>
        <member name="T:Cenium.Framework.Threading.ServerTimerTask">
            <summary>
            Represents information about a server background task
            </summary>
        </member>
        <member name="P:Cenium.Framework.Threading.ServerTimerTask.Interval">
            <summary>
            Gets a <c>TimerPeriod</c> instance that determines how frequently the task executes
            </summary>
        </member>
        <member name="P:Cenium.Framework.Threading.ServerTimerTask.IsConcurrent">
            <summary>
            Gets if the task can execute concurrently (i.e. multiple threads of same task)
            </summary>
        </member>
        <member name="P:Cenium.Framework.Threading.ServerTimerTask.IsLongRunning">
            <summary>
            Gets if the task is a long running task, i.e. requiring a separate execution thread
            </summary>
        </member>
        <member name="P:Cenium.Framework.Threading.ServerTimerTask.IsStartImmediately">
            <summary>
            Gets whether the task should start immediately upon server startup
            </summary>
        </member>
        <member name="T:Cenium.Framework.Threading.ServerTimerTaskConfiguration">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="M:Cenium.Framework.Threading.ServerTimerTaskConfiguration.#ctor(System.Action{Cenium.Framework.Threading.ServerTimerContext},Cenium.Framework.Threading.TimerPeriod,Cenium.Framework.Threading.TimerCallbackOptions)">
            <summary>
            Initializes a new instance of the ServerTimerTaskConfiguration class
            </summary>
        </member>
        <member name="T:Cenium.Framework.Threading.Session">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="M:Cenium.Framework.Threading.Session.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the Session class
            </summary>
        </member>
        <member name="T:Cenium.Framework.Threading.TimerCallbackOptions">
            <summary>
            Defines the behavior of a timer callback
            </summary>
        </member>
        <member name="F:Cenium.Framework.Threading.TimerCallbackOptions.None">
            <summary>
            Specifies that the default behavior should be used
            </summary>
        </member>
        <member name="F:Cenium.Framework.Threading.TimerCallbackOptions.StartImmediately">
            <summary>
            Specifies that the initial callback will start as soon as the timer is initialized, regardless of what period is specified.
            </summary>
        </member>
        <member name="F:Cenium.Framework.Threading.TimerCallbackOptions.Concurrent">
            <summary>
            Specifies that the callback can be invoked even if a previous callback is still executing
            </summary>
        </member>
        <member name="F:Cenium.Framework.Threading.TimerCallbackOptions.LongRunning">
            <summary>
            The job is a long-running job. Long running jobs are potentially executed on a separate thread.
            </summary>
        </member>
        <member name="T:Cenium.Framework.Threading.TimerPeriod">
            <summary>
            Base class for generating the next execution time for a timer callback.
            </summary>
            <remarks>
            Implementers that wish to have a custom period definition should override this class
            </remarks>
        </member>
        <member name="M:Cenium.Framework.Threading.TimerPeriod.#ctor">
            <summary>
            Initializes a new instance of the TimerCallback class
            </summary>
        </member>
        <member name="P:Cenium.Framework.Threading.TimerPeriod.Description">
            <summary>
            Gets a display-friendly description of the TimerPeriod instance
            </summary>
        </member>
        <member name="M:Cenium.Framework.Threading.TimerPeriod.GetNextRunTime(Cenium.Framework.Threading.ServerTimerContext)">
            <summary>
            Gets the next run time. Implementers should override this method and provide their own implementation. By default this method returns DateTime.MaxValue
            </summary>
            <param name="context">The context of the timer callback</param>
            <returns>A DateTime instance specifying when the callback should be executed next</returns>
        </member>
        <member name="T:Cenium.Framework.Web.HttpHandlerBase">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="M:Cenium.Framework.Web.HttpHandlerBase.#ctor">
            <summary>
            Initializes a new instance of the HttpHandlerBase class
            </summary>
        </member>
        <member name="T:Cenium.Framework.Web.HttpModuleBase">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="M:Cenium.Framework.Web.HttpModuleBase.#ctor">
            <summary>
            Initializes a new instance of the HttpModuleBase class
            </summary>
        </member>
        <member name="T:Cenium.Framework.Web.HttpRequestUtility">
            <summary>
            Utility class for HTTP requests
            </summary>
        </member>
        <member name="M:Cenium.Framework.Web.HttpRequestUtility.GetHttpHeaderValue(System.Web.HttpRequest,System.String,System.Func{System.String})">
            <summary>
            Gets an HTTP request header value. If the header value is null, the factory method will supply a value
            </summary>
            <param name="request">The HTTP request object</param>
            <param name="header">The header to get</param>
            <param name="factory">An optional factory to create a default value</param>
            <returns>The value associated with the header argument.</returns>
        </member>
        <member name="T:System.Globalization.CultureInfoExtensions">
            <summary>
            Contains extension and utility methods to the CultureInfo class
            </summary>
        </member>
        <member name="T:System.TimeZoneUtility">
            <summary>
            Explain the purpose of the class here
            </summary>
        </member>
        <member name="T:System.Web.HttpContextExtension">
            <summary>
            Extension methods for the HttpContext class
            </summary>
        </member>
        <member name="M:System.Web.HttpContextExtension.IsAutenticationHeaderPresent(System.Web.HttpContext)">
            <summary>
            Returns true if the request contains the Authorization header, otherwise false
            </summary>
            <param name="context">The HttpContext instance</param>
            <returns>True if the request contains the Authorization header, otherwise false</returns>
        </member>
        <member name="M:System.Web.HttpContextExtension.DenyAccess(System.Web.HttpContext)">
             <summary>
            
             </summary>
             <param name="context">The HttpContext instance</param>
        </member>
        <member name="M:System.Web.HttpContextExtension.SendBasicAuthenticationHeader(System.Web.HttpContext,System.String)">
            <summary>
            Sets the WWW-Authenticate header in the response
            </summary>
            <param name="context">The HttpContext instance</param>
            <param name="realm">The realm being used</param>
        </member>
        <member name="M:System.Web.HttpContextExtension.GetBasicCredentials(System.Web.HttpContext,System.String@,System.String@)">
            <summary>
            Extracts username and password from the Authorization header. Returns true if successfull, otherwise false
            </summary>
            <param name="context">The current HttpContext instance</param>
            <param name="username">The username contained in the Authorization header</param>
            <param name="password">The password contained in the Authorization header</param>
            <returns>Returns true if successfull, otherwise false</returns>
        </member>
        <member name="T:System.Web.SystemWebNamespaceDoc">
            <summary>
            Contains extension classes for the System.Web namespace
            </summary>
        </member>
    </members>
</doc>
